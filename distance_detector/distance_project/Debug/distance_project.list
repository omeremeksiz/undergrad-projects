
distance_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003510  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080035d0  080035d0  000135d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800366c  0800366c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800366c  0800366c  0001366c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003674  08003674  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003674  08003674  00013674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003678  08003678  00013678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800367c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08003688  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08003688  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000071ba  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000139c  00000000  00000000  000271ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  00028590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000738  00000000  00000000  00028d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013820  00000000  00000000  000294a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000084de  00000000  00000000  0003ccc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b961  00000000  00000000  000451a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c0b07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cd4  00000000  00000000  000c0b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080035b8 	.word	0x080035b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080035b8 	.word	0x080035b8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 fe96 	bl	800100c <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 fe91 	bl	800100c <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_ddiv>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	4681      	mov	r9, r0
 8000462:	0005      	movs	r5, r0
 8000464:	030c      	lsls	r4, r1, #12
 8000466:	0048      	lsls	r0, r1, #1
 8000468:	4692      	mov	sl, r2
 800046a:	001f      	movs	r7, r3
 800046c:	b085      	sub	sp, #20
 800046e:	0b24      	lsrs	r4, r4, #12
 8000470:	0d40      	lsrs	r0, r0, #21
 8000472:	0fce      	lsrs	r6, r1, #31
 8000474:	2800      	cmp	r0, #0
 8000476:	d100      	bne.n	800047a <__aeabi_ddiv+0x26>
 8000478:	e156      	b.n	8000728 <__aeabi_ddiv+0x2d4>
 800047a:	4bd4      	ldr	r3, [pc, #848]	; (80007cc <__aeabi_ddiv+0x378>)
 800047c:	4298      	cmp	r0, r3
 800047e:	d100      	bne.n	8000482 <__aeabi_ddiv+0x2e>
 8000480:	e172      	b.n	8000768 <__aeabi_ddiv+0x314>
 8000482:	0f6b      	lsrs	r3, r5, #29
 8000484:	00e4      	lsls	r4, r4, #3
 8000486:	431c      	orrs	r4, r3
 8000488:	2380      	movs	r3, #128	; 0x80
 800048a:	041b      	lsls	r3, r3, #16
 800048c:	4323      	orrs	r3, r4
 800048e:	4698      	mov	r8, r3
 8000490:	4bcf      	ldr	r3, [pc, #828]	; (80007d0 <__aeabi_ddiv+0x37c>)
 8000492:	00ed      	lsls	r5, r5, #3
 8000494:	469b      	mov	fp, r3
 8000496:	2300      	movs	r3, #0
 8000498:	4699      	mov	r9, r3
 800049a:	4483      	add	fp, r0
 800049c:	9300      	str	r3, [sp, #0]
 800049e:	033c      	lsls	r4, r7, #12
 80004a0:	007b      	lsls	r3, r7, #1
 80004a2:	4650      	mov	r0, sl
 80004a4:	0b24      	lsrs	r4, r4, #12
 80004a6:	0d5b      	lsrs	r3, r3, #21
 80004a8:	0fff      	lsrs	r7, r7, #31
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d100      	bne.n	80004b0 <__aeabi_ddiv+0x5c>
 80004ae:	e11f      	b.n	80006f0 <__aeabi_ddiv+0x29c>
 80004b0:	4ac6      	ldr	r2, [pc, #792]	; (80007cc <__aeabi_ddiv+0x378>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d100      	bne.n	80004b8 <__aeabi_ddiv+0x64>
 80004b6:	e162      	b.n	800077e <__aeabi_ddiv+0x32a>
 80004b8:	49c5      	ldr	r1, [pc, #788]	; (80007d0 <__aeabi_ddiv+0x37c>)
 80004ba:	0f42      	lsrs	r2, r0, #29
 80004bc:	468c      	mov	ip, r1
 80004be:	00e4      	lsls	r4, r4, #3
 80004c0:	4659      	mov	r1, fp
 80004c2:	4314      	orrs	r4, r2
 80004c4:	2280      	movs	r2, #128	; 0x80
 80004c6:	4463      	add	r3, ip
 80004c8:	0412      	lsls	r2, r2, #16
 80004ca:	1acb      	subs	r3, r1, r3
 80004cc:	4314      	orrs	r4, r2
 80004ce:	469b      	mov	fp, r3
 80004d0:	00c2      	lsls	r2, r0, #3
 80004d2:	2000      	movs	r0, #0
 80004d4:	0033      	movs	r3, r6
 80004d6:	407b      	eors	r3, r7
 80004d8:	469a      	mov	sl, r3
 80004da:	464b      	mov	r3, r9
 80004dc:	2b0f      	cmp	r3, #15
 80004de:	d827      	bhi.n	8000530 <__aeabi_ddiv+0xdc>
 80004e0:	49bc      	ldr	r1, [pc, #752]	; (80007d4 <__aeabi_ddiv+0x380>)
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	58cb      	ldr	r3, [r1, r3]
 80004e6:	469f      	mov	pc, r3
 80004e8:	46b2      	mov	sl, r6
 80004ea:	9b00      	ldr	r3, [sp, #0]
 80004ec:	2b02      	cmp	r3, #2
 80004ee:	d016      	beq.n	800051e <__aeabi_ddiv+0xca>
 80004f0:	2b03      	cmp	r3, #3
 80004f2:	d100      	bne.n	80004f6 <__aeabi_ddiv+0xa2>
 80004f4:	e28e      	b.n	8000a14 <__aeabi_ddiv+0x5c0>
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d000      	beq.n	80004fc <__aeabi_ddiv+0xa8>
 80004fa:	e0d9      	b.n	80006b0 <__aeabi_ddiv+0x25c>
 80004fc:	2300      	movs	r3, #0
 80004fe:	2400      	movs	r4, #0
 8000500:	2500      	movs	r5, #0
 8000502:	4652      	mov	r2, sl
 8000504:	051b      	lsls	r3, r3, #20
 8000506:	4323      	orrs	r3, r4
 8000508:	07d2      	lsls	r2, r2, #31
 800050a:	4313      	orrs	r3, r2
 800050c:	0028      	movs	r0, r5
 800050e:	0019      	movs	r1, r3
 8000510:	b005      	add	sp, #20
 8000512:	bcf0      	pop	{r4, r5, r6, r7}
 8000514:	46bb      	mov	fp, r7
 8000516:	46b2      	mov	sl, r6
 8000518:	46a9      	mov	r9, r5
 800051a:	46a0      	mov	r8, r4
 800051c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800051e:	2400      	movs	r4, #0
 8000520:	2500      	movs	r5, #0
 8000522:	4baa      	ldr	r3, [pc, #680]	; (80007cc <__aeabi_ddiv+0x378>)
 8000524:	e7ed      	b.n	8000502 <__aeabi_ddiv+0xae>
 8000526:	46ba      	mov	sl, r7
 8000528:	46a0      	mov	r8, r4
 800052a:	0015      	movs	r5, r2
 800052c:	9000      	str	r0, [sp, #0]
 800052e:	e7dc      	b.n	80004ea <__aeabi_ddiv+0x96>
 8000530:	4544      	cmp	r4, r8
 8000532:	d200      	bcs.n	8000536 <__aeabi_ddiv+0xe2>
 8000534:	e1c7      	b.n	80008c6 <__aeabi_ddiv+0x472>
 8000536:	d100      	bne.n	800053a <__aeabi_ddiv+0xe6>
 8000538:	e1c2      	b.n	80008c0 <__aeabi_ddiv+0x46c>
 800053a:	2301      	movs	r3, #1
 800053c:	425b      	negs	r3, r3
 800053e:	469c      	mov	ip, r3
 8000540:	002e      	movs	r6, r5
 8000542:	4640      	mov	r0, r8
 8000544:	2500      	movs	r5, #0
 8000546:	44e3      	add	fp, ip
 8000548:	0223      	lsls	r3, r4, #8
 800054a:	0e14      	lsrs	r4, r2, #24
 800054c:	431c      	orrs	r4, r3
 800054e:	0c1b      	lsrs	r3, r3, #16
 8000550:	4699      	mov	r9, r3
 8000552:	0423      	lsls	r3, r4, #16
 8000554:	0c1f      	lsrs	r7, r3, #16
 8000556:	0212      	lsls	r2, r2, #8
 8000558:	4649      	mov	r1, r9
 800055a:	9200      	str	r2, [sp, #0]
 800055c:	9701      	str	r7, [sp, #4]
 800055e:	f7ff fe59 	bl	8000214 <__aeabi_uidivmod>
 8000562:	0002      	movs	r2, r0
 8000564:	437a      	muls	r2, r7
 8000566:	040b      	lsls	r3, r1, #16
 8000568:	0c31      	lsrs	r1, r6, #16
 800056a:	4680      	mov	r8, r0
 800056c:	4319      	orrs	r1, r3
 800056e:	428a      	cmp	r2, r1
 8000570:	d907      	bls.n	8000582 <__aeabi_ddiv+0x12e>
 8000572:	2301      	movs	r3, #1
 8000574:	425b      	negs	r3, r3
 8000576:	469c      	mov	ip, r3
 8000578:	1909      	adds	r1, r1, r4
 800057a:	44e0      	add	r8, ip
 800057c:	428c      	cmp	r4, r1
 800057e:	d800      	bhi.n	8000582 <__aeabi_ddiv+0x12e>
 8000580:	e207      	b.n	8000992 <__aeabi_ddiv+0x53e>
 8000582:	1a88      	subs	r0, r1, r2
 8000584:	4649      	mov	r1, r9
 8000586:	f7ff fe45 	bl	8000214 <__aeabi_uidivmod>
 800058a:	0409      	lsls	r1, r1, #16
 800058c:	468c      	mov	ip, r1
 800058e:	0431      	lsls	r1, r6, #16
 8000590:	4666      	mov	r6, ip
 8000592:	9a01      	ldr	r2, [sp, #4]
 8000594:	0c09      	lsrs	r1, r1, #16
 8000596:	4342      	muls	r2, r0
 8000598:	0003      	movs	r3, r0
 800059a:	4331      	orrs	r1, r6
 800059c:	428a      	cmp	r2, r1
 800059e:	d904      	bls.n	80005aa <__aeabi_ddiv+0x156>
 80005a0:	1909      	adds	r1, r1, r4
 80005a2:	3b01      	subs	r3, #1
 80005a4:	428c      	cmp	r4, r1
 80005a6:	d800      	bhi.n	80005aa <__aeabi_ddiv+0x156>
 80005a8:	e1ed      	b.n	8000986 <__aeabi_ddiv+0x532>
 80005aa:	1a88      	subs	r0, r1, r2
 80005ac:	4642      	mov	r2, r8
 80005ae:	0412      	lsls	r2, r2, #16
 80005b0:	431a      	orrs	r2, r3
 80005b2:	4690      	mov	r8, r2
 80005b4:	4641      	mov	r1, r8
 80005b6:	9b00      	ldr	r3, [sp, #0]
 80005b8:	040e      	lsls	r6, r1, #16
 80005ba:	0c1b      	lsrs	r3, r3, #16
 80005bc:	001f      	movs	r7, r3
 80005be:	9302      	str	r3, [sp, #8]
 80005c0:	9b00      	ldr	r3, [sp, #0]
 80005c2:	0c36      	lsrs	r6, r6, #16
 80005c4:	041b      	lsls	r3, r3, #16
 80005c6:	0c19      	lsrs	r1, r3, #16
 80005c8:	000b      	movs	r3, r1
 80005ca:	4373      	muls	r3, r6
 80005cc:	0c12      	lsrs	r2, r2, #16
 80005ce:	437e      	muls	r6, r7
 80005d0:	9103      	str	r1, [sp, #12]
 80005d2:	4351      	muls	r1, r2
 80005d4:	437a      	muls	r2, r7
 80005d6:	0c1f      	lsrs	r7, r3, #16
 80005d8:	46bc      	mov	ip, r7
 80005da:	1876      	adds	r6, r6, r1
 80005dc:	4466      	add	r6, ip
 80005de:	42b1      	cmp	r1, r6
 80005e0:	d903      	bls.n	80005ea <__aeabi_ddiv+0x196>
 80005e2:	2180      	movs	r1, #128	; 0x80
 80005e4:	0249      	lsls	r1, r1, #9
 80005e6:	468c      	mov	ip, r1
 80005e8:	4462      	add	r2, ip
 80005ea:	0c31      	lsrs	r1, r6, #16
 80005ec:	188a      	adds	r2, r1, r2
 80005ee:	0431      	lsls	r1, r6, #16
 80005f0:	041e      	lsls	r6, r3, #16
 80005f2:	0c36      	lsrs	r6, r6, #16
 80005f4:	198e      	adds	r6, r1, r6
 80005f6:	4290      	cmp	r0, r2
 80005f8:	d302      	bcc.n	8000600 <__aeabi_ddiv+0x1ac>
 80005fa:	d112      	bne.n	8000622 <__aeabi_ddiv+0x1ce>
 80005fc:	42b5      	cmp	r5, r6
 80005fe:	d210      	bcs.n	8000622 <__aeabi_ddiv+0x1ce>
 8000600:	4643      	mov	r3, r8
 8000602:	1e59      	subs	r1, r3, #1
 8000604:	9b00      	ldr	r3, [sp, #0]
 8000606:	469c      	mov	ip, r3
 8000608:	4465      	add	r5, ip
 800060a:	001f      	movs	r7, r3
 800060c:	429d      	cmp	r5, r3
 800060e:	419b      	sbcs	r3, r3
 8000610:	425b      	negs	r3, r3
 8000612:	191b      	adds	r3, r3, r4
 8000614:	18c0      	adds	r0, r0, r3
 8000616:	4284      	cmp	r4, r0
 8000618:	d200      	bcs.n	800061c <__aeabi_ddiv+0x1c8>
 800061a:	e1a0      	b.n	800095e <__aeabi_ddiv+0x50a>
 800061c:	d100      	bne.n	8000620 <__aeabi_ddiv+0x1cc>
 800061e:	e19b      	b.n	8000958 <__aeabi_ddiv+0x504>
 8000620:	4688      	mov	r8, r1
 8000622:	1bae      	subs	r6, r5, r6
 8000624:	42b5      	cmp	r5, r6
 8000626:	41ad      	sbcs	r5, r5
 8000628:	1a80      	subs	r0, r0, r2
 800062a:	426d      	negs	r5, r5
 800062c:	1b40      	subs	r0, r0, r5
 800062e:	4284      	cmp	r4, r0
 8000630:	d100      	bne.n	8000634 <__aeabi_ddiv+0x1e0>
 8000632:	e1d5      	b.n	80009e0 <__aeabi_ddiv+0x58c>
 8000634:	4649      	mov	r1, r9
 8000636:	f7ff fded 	bl	8000214 <__aeabi_uidivmod>
 800063a:	9a01      	ldr	r2, [sp, #4]
 800063c:	040b      	lsls	r3, r1, #16
 800063e:	4342      	muls	r2, r0
 8000640:	0c31      	lsrs	r1, r6, #16
 8000642:	0005      	movs	r5, r0
 8000644:	4319      	orrs	r1, r3
 8000646:	428a      	cmp	r2, r1
 8000648:	d900      	bls.n	800064c <__aeabi_ddiv+0x1f8>
 800064a:	e16c      	b.n	8000926 <__aeabi_ddiv+0x4d2>
 800064c:	1a88      	subs	r0, r1, r2
 800064e:	4649      	mov	r1, r9
 8000650:	f7ff fde0 	bl	8000214 <__aeabi_uidivmod>
 8000654:	9a01      	ldr	r2, [sp, #4]
 8000656:	0436      	lsls	r6, r6, #16
 8000658:	4342      	muls	r2, r0
 800065a:	0409      	lsls	r1, r1, #16
 800065c:	0c36      	lsrs	r6, r6, #16
 800065e:	0003      	movs	r3, r0
 8000660:	430e      	orrs	r6, r1
 8000662:	42b2      	cmp	r2, r6
 8000664:	d900      	bls.n	8000668 <__aeabi_ddiv+0x214>
 8000666:	e153      	b.n	8000910 <__aeabi_ddiv+0x4bc>
 8000668:	9803      	ldr	r0, [sp, #12]
 800066a:	1ab6      	subs	r6, r6, r2
 800066c:	0002      	movs	r2, r0
 800066e:	042d      	lsls	r5, r5, #16
 8000670:	431d      	orrs	r5, r3
 8000672:	9f02      	ldr	r7, [sp, #8]
 8000674:	042b      	lsls	r3, r5, #16
 8000676:	0c1b      	lsrs	r3, r3, #16
 8000678:	435a      	muls	r2, r3
 800067a:	437b      	muls	r3, r7
 800067c:	469c      	mov	ip, r3
 800067e:	0c29      	lsrs	r1, r5, #16
 8000680:	4348      	muls	r0, r1
 8000682:	0c13      	lsrs	r3, r2, #16
 8000684:	4484      	add	ip, r0
 8000686:	4463      	add	r3, ip
 8000688:	4379      	muls	r1, r7
 800068a:	4298      	cmp	r0, r3
 800068c:	d903      	bls.n	8000696 <__aeabi_ddiv+0x242>
 800068e:	2080      	movs	r0, #128	; 0x80
 8000690:	0240      	lsls	r0, r0, #9
 8000692:	4684      	mov	ip, r0
 8000694:	4461      	add	r1, ip
 8000696:	0c18      	lsrs	r0, r3, #16
 8000698:	0412      	lsls	r2, r2, #16
 800069a:	041b      	lsls	r3, r3, #16
 800069c:	0c12      	lsrs	r2, r2, #16
 800069e:	1841      	adds	r1, r0, r1
 80006a0:	189b      	adds	r3, r3, r2
 80006a2:	428e      	cmp	r6, r1
 80006a4:	d200      	bcs.n	80006a8 <__aeabi_ddiv+0x254>
 80006a6:	e0ff      	b.n	80008a8 <__aeabi_ddiv+0x454>
 80006a8:	d100      	bne.n	80006ac <__aeabi_ddiv+0x258>
 80006aa:	e0fa      	b.n	80008a2 <__aeabi_ddiv+0x44e>
 80006ac:	2301      	movs	r3, #1
 80006ae:	431d      	orrs	r5, r3
 80006b0:	4a49      	ldr	r2, [pc, #292]	; (80007d8 <__aeabi_ddiv+0x384>)
 80006b2:	445a      	add	r2, fp
 80006b4:	2a00      	cmp	r2, #0
 80006b6:	dc00      	bgt.n	80006ba <__aeabi_ddiv+0x266>
 80006b8:	e0aa      	b.n	8000810 <__aeabi_ddiv+0x3bc>
 80006ba:	076b      	lsls	r3, r5, #29
 80006bc:	d000      	beq.n	80006c0 <__aeabi_ddiv+0x26c>
 80006be:	e13d      	b.n	800093c <__aeabi_ddiv+0x4e8>
 80006c0:	08ed      	lsrs	r5, r5, #3
 80006c2:	4643      	mov	r3, r8
 80006c4:	01db      	lsls	r3, r3, #7
 80006c6:	d506      	bpl.n	80006d6 <__aeabi_ddiv+0x282>
 80006c8:	4642      	mov	r2, r8
 80006ca:	4b44      	ldr	r3, [pc, #272]	; (80007dc <__aeabi_ddiv+0x388>)
 80006cc:	401a      	ands	r2, r3
 80006ce:	4690      	mov	r8, r2
 80006d0:	2280      	movs	r2, #128	; 0x80
 80006d2:	00d2      	lsls	r2, r2, #3
 80006d4:	445a      	add	r2, fp
 80006d6:	4b42      	ldr	r3, [pc, #264]	; (80007e0 <__aeabi_ddiv+0x38c>)
 80006d8:	429a      	cmp	r2, r3
 80006da:	dd00      	ble.n	80006de <__aeabi_ddiv+0x28a>
 80006dc:	e71f      	b.n	800051e <__aeabi_ddiv+0xca>
 80006de:	4643      	mov	r3, r8
 80006e0:	075b      	lsls	r3, r3, #29
 80006e2:	431d      	orrs	r5, r3
 80006e4:	4643      	mov	r3, r8
 80006e6:	0552      	lsls	r2, r2, #21
 80006e8:	025c      	lsls	r4, r3, #9
 80006ea:	0b24      	lsrs	r4, r4, #12
 80006ec:	0d53      	lsrs	r3, r2, #21
 80006ee:	e708      	b.n	8000502 <__aeabi_ddiv+0xae>
 80006f0:	4652      	mov	r2, sl
 80006f2:	4322      	orrs	r2, r4
 80006f4:	d100      	bne.n	80006f8 <__aeabi_ddiv+0x2a4>
 80006f6:	e07b      	b.n	80007f0 <__aeabi_ddiv+0x39c>
 80006f8:	2c00      	cmp	r4, #0
 80006fa:	d100      	bne.n	80006fe <__aeabi_ddiv+0x2aa>
 80006fc:	e0fa      	b.n	80008f4 <__aeabi_ddiv+0x4a0>
 80006fe:	0020      	movs	r0, r4
 8000700:	f000 fc66 	bl	8000fd0 <__clzsi2>
 8000704:	0002      	movs	r2, r0
 8000706:	3a0b      	subs	r2, #11
 8000708:	231d      	movs	r3, #29
 800070a:	0001      	movs	r1, r0
 800070c:	1a9b      	subs	r3, r3, r2
 800070e:	4652      	mov	r2, sl
 8000710:	3908      	subs	r1, #8
 8000712:	40da      	lsrs	r2, r3
 8000714:	408c      	lsls	r4, r1
 8000716:	4314      	orrs	r4, r2
 8000718:	4652      	mov	r2, sl
 800071a:	408a      	lsls	r2, r1
 800071c:	4b31      	ldr	r3, [pc, #196]	; (80007e4 <__aeabi_ddiv+0x390>)
 800071e:	4458      	add	r0, fp
 8000720:	469b      	mov	fp, r3
 8000722:	4483      	add	fp, r0
 8000724:	2000      	movs	r0, #0
 8000726:	e6d5      	b.n	80004d4 <__aeabi_ddiv+0x80>
 8000728:	464b      	mov	r3, r9
 800072a:	4323      	orrs	r3, r4
 800072c:	4698      	mov	r8, r3
 800072e:	d044      	beq.n	80007ba <__aeabi_ddiv+0x366>
 8000730:	2c00      	cmp	r4, #0
 8000732:	d100      	bne.n	8000736 <__aeabi_ddiv+0x2e2>
 8000734:	e0ce      	b.n	80008d4 <__aeabi_ddiv+0x480>
 8000736:	0020      	movs	r0, r4
 8000738:	f000 fc4a 	bl	8000fd0 <__clzsi2>
 800073c:	0001      	movs	r1, r0
 800073e:	0002      	movs	r2, r0
 8000740:	390b      	subs	r1, #11
 8000742:	231d      	movs	r3, #29
 8000744:	1a5b      	subs	r3, r3, r1
 8000746:	4649      	mov	r1, r9
 8000748:	0010      	movs	r0, r2
 800074a:	40d9      	lsrs	r1, r3
 800074c:	3808      	subs	r0, #8
 800074e:	4084      	lsls	r4, r0
 8000750:	000b      	movs	r3, r1
 8000752:	464d      	mov	r5, r9
 8000754:	4323      	orrs	r3, r4
 8000756:	4698      	mov	r8, r3
 8000758:	4085      	lsls	r5, r0
 800075a:	4823      	ldr	r0, [pc, #140]	; (80007e8 <__aeabi_ddiv+0x394>)
 800075c:	1a83      	subs	r3, r0, r2
 800075e:	469b      	mov	fp, r3
 8000760:	2300      	movs	r3, #0
 8000762:	4699      	mov	r9, r3
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	e69a      	b.n	800049e <__aeabi_ddiv+0x4a>
 8000768:	464b      	mov	r3, r9
 800076a:	4323      	orrs	r3, r4
 800076c:	4698      	mov	r8, r3
 800076e:	d11d      	bne.n	80007ac <__aeabi_ddiv+0x358>
 8000770:	2308      	movs	r3, #8
 8000772:	4699      	mov	r9, r3
 8000774:	3b06      	subs	r3, #6
 8000776:	2500      	movs	r5, #0
 8000778:	4683      	mov	fp, r0
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	e68f      	b.n	800049e <__aeabi_ddiv+0x4a>
 800077e:	4652      	mov	r2, sl
 8000780:	4322      	orrs	r2, r4
 8000782:	d109      	bne.n	8000798 <__aeabi_ddiv+0x344>
 8000784:	2302      	movs	r3, #2
 8000786:	4649      	mov	r1, r9
 8000788:	4319      	orrs	r1, r3
 800078a:	4b18      	ldr	r3, [pc, #96]	; (80007ec <__aeabi_ddiv+0x398>)
 800078c:	4689      	mov	r9, r1
 800078e:	469c      	mov	ip, r3
 8000790:	2400      	movs	r4, #0
 8000792:	2002      	movs	r0, #2
 8000794:	44e3      	add	fp, ip
 8000796:	e69d      	b.n	80004d4 <__aeabi_ddiv+0x80>
 8000798:	2303      	movs	r3, #3
 800079a:	464a      	mov	r2, r9
 800079c:	431a      	orrs	r2, r3
 800079e:	4b13      	ldr	r3, [pc, #76]	; (80007ec <__aeabi_ddiv+0x398>)
 80007a0:	4691      	mov	r9, r2
 80007a2:	469c      	mov	ip, r3
 80007a4:	4652      	mov	r2, sl
 80007a6:	2003      	movs	r0, #3
 80007a8:	44e3      	add	fp, ip
 80007aa:	e693      	b.n	80004d4 <__aeabi_ddiv+0x80>
 80007ac:	230c      	movs	r3, #12
 80007ae:	4699      	mov	r9, r3
 80007b0:	3b09      	subs	r3, #9
 80007b2:	46a0      	mov	r8, r4
 80007b4:	4683      	mov	fp, r0
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	e671      	b.n	800049e <__aeabi_ddiv+0x4a>
 80007ba:	2304      	movs	r3, #4
 80007bc:	4699      	mov	r9, r3
 80007be:	2300      	movs	r3, #0
 80007c0:	469b      	mov	fp, r3
 80007c2:	3301      	adds	r3, #1
 80007c4:	2500      	movs	r5, #0
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	e669      	b.n	800049e <__aeabi_ddiv+0x4a>
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	000007ff 	.word	0x000007ff
 80007d0:	fffffc01 	.word	0xfffffc01
 80007d4:	080035d0 	.word	0x080035d0
 80007d8:	000003ff 	.word	0x000003ff
 80007dc:	feffffff 	.word	0xfeffffff
 80007e0:	000007fe 	.word	0x000007fe
 80007e4:	000003f3 	.word	0x000003f3
 80007e8:	fffffc0d 	.word	0xfffffc0d
 80007ec:	fffff801 	.word	0xfffff801
 80007f0:	4649      	mov	r1, r9
 80007f2:	2301      	movs	r3, #1
 80007f4:	4319      	orrs	r1, r3
 80007f6:	4689      	mov	r9, r1
 80007f8:	2400      	movs	r4, #0
 80007fa:	2001      	movs	r0, #1
 80007fc:	e66a      	b.n	80004d4 <__aeabi_ddiv+0x80>
 80007fe:	2300      	movs	r3, #0
 8000800:	2480      	movs	r4, #128	; 0x80
 8000802:	469a      	mov	sl, r3
 8000804:	2500      	movs	r5, #0
 8000806:	4b8a      	ldr	r3, [pc, #552]	; (8000a30 <__aeabi_ddiv+0x5dc>)
 8000808:	0324      	lsls	r4, r4, #12
 800080a:	e67a      	b.n	8000502 <__aeabi_ddiv+0xae>
 800080c:	2501      	movs	r5, #1
 800080e:	426d      	negs	r5, r5
 8000810:	2301      	movs	r3, #1
 8000812:	1a9b      	subs	r3, r3, r2
 8000814:	2b38      	cmp	r3, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_ddiv+0x3c6>
 8000818:	e670      	b.n	80004fc <__aeabi_ddiv+0xa8>
 800081a:	2b1f      	cmp	r3, #31
 800081c:	dc00      	bgt.n	8000820 <__aeabi_ddiv+0x3cc>
 800081e:	e0bf      	b.n	80009a0 <__aeabi_ddiv+0x54c>
 8000820:	211f      	movs	r1, #31
 8000822:	4249      	negs	r1, r1
 8000824:	1a8a      	subs	r2, r1, r2
 8000826:	4641      	mov	r1, r8
 8000828:	40d1      	lsrs	r1, r2
 800082a:	000a      	movs	r2, r1
 800082c:	2b20      	cmp	r3, #32
 800082e:	d004      	beq.n	800083a <__aeabi_ddiv+0x3e6>
 8000830:	4641      	mov	r1, r8
 8000832:	4b80      	ldr	r3, [pc, #512]	; (8000a34 <__aeabi_ddiv+0x5e0>)
 8000834:	445b      	add	r3, fp
 8000836:	4099      	lsls	r1, r3
 8000838:	430d      	orrs	r5, r1
 800083a:	1e6b      	subs	r3, r5, #1
 800083c:	419d      	sbcs	r5, r3
 800083e:	2307      	movs	r3, #7
 8000840:	432a      	orrs	r2, r5
 8000842:	001d      	movs	r5, r3
 8000844:	2400      	movs	r4, #0
 8000846:	4015      	ands	r5, r2
 8000848:	4213      	tst	r3, r2
 800084a:	d100      	bne.n	800084e <__aeabi_ddiv+0x3fa>
 800084c:	e0d4      	b.n	80009f8 <__aeabi_ddiv+0x5a4>
 800084e:	210f      	movs	r1, #15
 8000850:	2300      	movs	r3, #0
 8000852:	4011      	ands	r1, r2
 8000854:	2904      	cmp	r1, #4
 8000856:	d100      	bne.n	800085a <__aeabi_ddiv+0x406>
 8000858:	e0cb      	b.n	80009f2 <__aeabi_ddiv+0x59e>
 800085a:	1d11      	adds	r1, r2, #4
 800085c:	4291      	cmp	r1, r2
 800085e:	4192      	sbcs	r2, r2
 8000860:	4252      	negs	r2, r2
 8000862:	189b      	adds	r3, r3, r2
 8000864:	000a      	movs	r2, r1
 8000866:	0219      	lsls	r1, r3, #8
 8000868:	d400      	bmi.n	800086c <__aeabi_ddiv+0x418>
 800086a:	e0c2      	b.n	80009f2 <__aeabi_ddiv+0x59e>
 800086c:	2301      	movs	r3, #1
 800086e:	2400      	movs	r4, #0
 8000870:	2500      	movs	r5, #0
 8000872:	e646      	b.n	8000502 <__aeabi_ddiv+0xae>
 8000874:	2380      	movs	r3, #128	; 0x80
 8000876:	4641      	mov	r1, r8
 8000878:	031b      	lsls	r3, r3, #12
 800087a:	4219      	tst	r1, r3
 800087c:	d008      	beq.n	8000890 <__aeabi_ddiv+0x43c>
 800087e:	421c      	tst	r4, r3
 8000880:	d106      	bne.n	8000890 <__aeabi_ddiv+0x43c>
 8000882:	431c      	orrs	r4, r3
 8000884:	0324      	lsls	r4, r4, #12
 8000886:	46ba      	mov	sl, r7
 8000888:	0015      	movs	r5, r2
 800088a:	4b69      	ldr	r3, [pc, #420]	; (8000a30 <__aeabi_ddiv+0x5dc>)
 800088c:	0b24      	lsrs	r4, r4, #12
 800088e:	e638      	b.n	8000502 <__aeabi_ddiv+0xae>
 8000890:	2480      	movs	r4, #128	; 0x80
 8000892:	4643      	mov	r3, r8
 8000894:	0324      	lsls	r4, r4, #12
 8000896:	431c      	orrs	r4, r3
 8000898:	0324      	lsls	r4, r4, #12
 800089a:	46b2      	mov	sl, r6
 800089c:	4b64      	ldr	r3, [pc, #400]	; (8000a30 <__aeabi_ddiv+0x5dc>)
 800089e:	0b24      	lsrs	r4, r4, #12
 80008a0:	e62f      	b.n	8000502 <__aeabi_ddiv+0xae>
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d100      	bne.n	80008a8 <__aeabi_ddiv+0x454>
 80008a6:	e703      	b.n	80006b0 <__aeabi_ddiv+0x25c>
 80008a8:	19a6      	adds	r6, r4, r6
 80008aa:	1e68      	subs	r0, r5, #1
 80008ac:	42a6      	cmp	r6, r4
 80008ae:	d200      	bcs.n	80008b2 <__aeabi_ddiv+0x45e>
 80008b0:	e08d      	b.n	80009ce <__aeabi_ddiv+0x57a>
 80008b2:	428e      	cmp	r6, r1
 80008b4:	d200      	bcs.n	80008b8 <__aeabi_ddiv+0x464>
 80008b6:	e0a3      	b.n	8000a00 <__aeabi_ddiv+0x5ac>
 80008b8:	d100      	bne.n	80008bc <__aeabi_ddiv+0x468>
 80008ba:	e0b3      	b.n	8000a24 <__aeabi_ddiv+0x5d0>
 80008bc:	0005      	movs	r5, r0
 80008be:	e6f5      	b.n	80006ac <__aeabi_ddiv+0x258>
 80008c0:	42aa      	cmp	r2, r5
 80008c2:	d900      	bls.n	80008c6 <__aeabi_ddiv+0x472>
 80008c4:	e639      	b.n	800053a <__aeabi_ddiv+0xe6>
 80008c6:	4643      	mov	r3, r8
 80008c8:	07de      	lsls	r6, r3, #31
 80008ca:	0858      	lsrs	r0, r3, #1
 80008cc:	086b      	lsrs	r3, r5, #1
 80008ce:	431e      	orrs	r6, r3
 80008d0:	07ed      	lsls	r5, r5, #31
 80008d2:	e639      	b.n	8000548 <__aeabi_ddiv+0xf4>
 80008d4:	4648      	mov	r0, r9
 80008d6:	f000 fb7b 	bl	8000fd0 <__clzsi2>
 80008da:	0001      	movs	r1, r0
 80008dc:	0002      	movs	r2, r0
 80008de:	3115      	adds	r1, #21
 80008e0:	3220      	adds	r2, #32
 80008e2:	291c      	cmp	r1, #28
 80008e4:	dc00      	bgt.n	80008e8 <__aeabi_ddiv+0x494>
 80008e6:	e72c      	b.n	8000742 <__aeabi_ddiv+0x2ee>
 80008e8:	464b      	mov	r3, r9
 80008ea:	3808      	subs	r0, #8
 80008ec:	4083      	lsls	r3, r0
 80008ee:	2500      	movs	r5, #0
 80008f0:	4698      	mov	r8, r3
 80008f2:	e732      	b.n	800075a <__aeabi_ddiv+0x306>
 80008f4:	f000 fb6c 	bl	8000fd0 <__clzsi2>
 80008f8:	0003      	movs	r3, r0
 80008fa:	001a      	movs	r2, r3
 80008fc:	3215      	adds	r2, #21
 80008fe:	3020      	adds	r0, #32
 8000900:	2a1c      	cmp	r2, #28
 8000902:	dc00      	bgt.n	8000906 <__aeabi_ddiv+0x4b2>
 8000904:	e700      	b.n	8000708 <__aeabi_ddiv+0x2b4>
 8000906:	4654      	mov	r4, sl
 8000908:	3b08      	subs	r3, #8
 800090a:	2200      	movs	r2, #0
 800090c:	409c      	lsls	r4, r3
 800090e:	e705      	b.n	800071c <__aeabi_ddiv+0x2c8>
 8000910:	1936      	adds	r6, r6, r4
 8000912:	3b01      	subs	r3, #1
 8000914:	42b4      	cmp	r4, r6
 8000916:	d900      	bls.n	800091a <__aeabi_ddiv+0x4c6>
 8000918:	e6a6      	b.n	8000668 <__aeabi_ddiv+0x214>
 800091a:	42b2      	cmp	r2, r6
 800091c:	d800      	bhi.n	8000920 <__aeabi_ddiv+0x4cc>
 800091e:	e6a3      	b.n	8000668 <__aeabi_ddiv+0x214>
 8000920:	1e83      	subs	r3, r0, #2
 8000922:	1936      	adds	r6, r6, r4
 8000924:	e6a0      	b.n	8000668 <__aeabi_ddiv+0x214>
 8000926:	1909      	adds	r1, r1, r4
 8000928:	3d01      	subs	r5, #1
 800092a:	428c      	cmp	r4, r1
 800092c:	d900      	bls.n	8000930 <__aeabi_ddiv+0x4dc>
 800092e:	e68d      	b.n	800064c <__aeabi_ddiv+0x1f8>
 8000930:	428a      	cmp	r2, r1
 8000932:	d800      	bhi.n	8000936 <__aeabi_ddiv+0x4e2>
 8000934:	e68a      	b.n	800064c <__aeabi_ddiv+0x1f8>
 8000936:	1e85      	subs	r5, r0, #2
 8000938:	1909      	adds	r1, r1, r4
 800093a:	e687      	b.n	800064c <__aeabi_ddiv+0x1f8>
 800093c:	230f      	movs	r3, #15
 800093e:	402b      	ands	r3, r5
 8000940:	2b04      	cmp	r3, #4
 8000942:	d100      	bne.n	8000946 <__aeabi_ddiv+0x4f2>
 8000944:	e6bc      	b.n	80006c0 <__aeabi_ddiv+0x26c>
 8000946:	2305      	movs	r3, #5
 8000948:	425b      	negs	r3, r3
 800094a:	42ab      	cmp	r3, r5
 800094c:	419b      	sbcs	r3, r3
 800094e:	3504      	adds	r5, #4
 8000950:	425b      	negs	r3, r3
 8000952:	08ed      	lsrs	r5, r5, #3
 8000954:	4498      	add	r8, r3
 8000956:	e6b4      	b.n	80006c2 <__aeabi_ddiv+0x26e>
 8000958:	42af      	cmp	r7, r5
 800095a:	d900      	bls.n	800095e <__aeabi_ddiv+0x50a>
 800095c:	e660      	b.n	8000620 <__aeabi_ddiv+0x1cc>
 800095e:	4282      	cmp	r2, r0
 8000960:	d804      	bhi.n	800096c <__aeabi_ddiv+0x518>
 8000962:	d000      	beq.n	8000966 <__aeabi_ddiv+0x512>
 8000964:	e65c      	b.n	8000620 <__aeabi_ddiv+0x1cc>
 8000966:	42ae      	cmp	r6, r5
 8000968:	d800      	bhi.n	800096c <__aeabi_ddiv+0x518>
 800096a:	e659      	b.n	8000620 <__aeabi_ddiv+0x1cc>
 800096c:	2302      	movs	r3, #2
 800096e:	425b      	negs	r3, r3
 8000970:	469c      	mov	ip, r3
 8000972:	9b00      	ldr	r3, [sp, #0]
 8000974:	44e0      	add	r8, ip
 8000976:	469c      	mov	ip, r3
 8000978:	4465      	add	r5, ip
 800097a:	429d      	cmp	r5, r3
 800097c:	419b      	sbcs	r3, r3
 800097e:	425b      	negs	r3, r3
 8000980:	191b      	adds	r3, r3, r4
 8000982:	18c0      	adds	r0, r0, r3
 8000984:	e64d      	b.n	8000622 <__aeabi_ddiv+0x1ce>
 8000986:	428a      	cmp	r2, r1
 8000988:	d800      	bhi.n	800098c <__aeabi_ddiv+0x538>
 800098a:	e60e      	b.n	80005aa <__aeabi_ddiv+0x156>
 800098c:	1e83      	subs	r3, r0, #2
 800098e:	1909      	adds	r1, r1, r4
 8000990:	e60b      	b.n	80005aa <__aeabi_ddiv+0x156>
 8000992:	428a      	cmp	r2, r1
 8000994:	d800      	bhi.n	8000998 <__aeabi_ddiv+0x544>
 8000996:	e5f4      	b.n	8000582 <__aeabi_ddiv+0x12e>
 8000998:	1e83      	subs	r3, r0, #2
 800099a:	4698      	mov	r8, r3
 800099c:	1909      	adds	r1, r1, r4
 800099e:	e5f0      	b.n	8000582 <__aeabi_ddiv+0x12e>
 80009a0:	4925      	ldr	r1, [pc, #148]	; (8000a38 <__aeabi_ddiv+0x5e4>)
 80009a2:	0028      	movs	r0, r5
 80009a4:	4459      	add	r1, fp
 80009a6:	408d      	lsls	r5, r1
 80009a8:	4642      	mov	r2, r8
 80009aa:	408a      	lsls	r2, r1
 80009ac:	1e69      	subs	r1, r5, #1
 80009ae:	418d      	sbcs	r5, r1
 80009b0:	4641      	mov	r1, r8
 80009b2:	40d8      	lsrs	r0, r3
 80009b4:	40d9      	lsrs	r1, r3
 80009b6:	4302      	orrs	r2, r0
 80009b8:	432a      	orrs	r2, r5
 80009ba:	000b      	movs	r3, r1
 80009bc:	0751      	lsls	r1, r2, #29
 80009be:	d100      	bne.n	80009c2 <__aeabi_ddiv+0x56e>
 80009c0:	e751      	b.n	8000866 <__aeabi_ddiv+0x412>
 80009c2:	210f      	movs	r1, #15
 80009c4:	4011      	ands	r1, r2
 80009c6:	2904      	cmp	r1, #4
 80009c8:	d000      	beq.n	80009cc <__aeabi_ddiv+0x578>
 80009ca:	e746      	b.n	800085a <__aeabi_ddiv+0x406>
 80009cc:	e74b      	b.n	8000866 <__aeabi_ddiv+0x412>
 80009ce:	0005      	movs	r5, r0
 80009d0:	428e      	cmp	r6, r1
 80009d2:	d000      	beq.n	80009d6 <__aeabi_ddiv+0x582>
 80009d4:	e66a      	b.n	80006ac <__aeabi_ddiv+0x258>
 80009d6:	9a00      	ldr	r2, [sp, #0]
 80009d8:	4293      	cmp	r3, r2
 80009da:	d000      	beq.n	80009de <__aeabi_ddiv+0x58a>
 80009dc:	e666      	b.n	80006ac <__aeabi_ddiv+0x258>
 80009de:	e667      	b.n	80006b0 <__aeabi_ddiv+0x25c>
 80009e0:	4a16      	ldr	r2, [pc, #88]	; (8000a3c <__aeabi_ddiv+0x5e8>)
 80009e2:	445a      	add	r2, fp
 80009e4:	2a00      	cmp	r2, #0
 80009e6:	dc00      	bgt.n	80009ea <__aeabi_ddiv+0x596>
 80009e8:	e710      	b.n	800080c <__aeabi_ddiv+0x3b8>
 80009ea:	2301      	movs	r3, #1
 80009ec:	2500      	movs	r5, #0
 80009ee:	4498      	add	r8, r3
 80009f0:	e667      	b.n	80006c2 <__aeabi_ddiv+0x26e>
 80009f2:	075d      	lsls	r5, r3, #29
 80009f4:	025b      	lsls	r3, r3, #9
 80009f6:	0b1c      	lsrs	r4, r3, #12
 80009f8:	08d2      	lsrs	r2, r2, #3
 80009fa:	2300      	movs	r3, #0
 80009fc:	4315      	orrs	r5, r2
 80009fe:	e580      	b.n	8000502 <__aeabi_ddiv+0xae>
 8000a00:	9800      	ldr	r0, [sp, #0]
 8000a02:	3d02      	subs	r5, #2
 8000a04:	0042      	lsls	r2, r0, #1
 8000a06:	4282      	cmp	r2, r0
 8000a08:	41bf      	sbcs	r7, r7
 8000a0a:	427f      	negs	r7, r7
 8000a0c:	193c      	adds	r4, r7, r4
 8000a0e:	1936      	adds	r6, r6, r4
 8000a10:	9200      	str	r2, [sp, #0]
 8000a12:	e7dd      	b.n	80009d0 <__aeabi_ddiv+0x57c>
 8000a14:	2480      	movs	r4, #128	; 0x80
 8000a16:	4643      	mov	r3, r8
 8000a18:	0324      	lsls	r4, r4, #12
 8000a1a:	431c      	orrs	r4, r3
 8000a1c:	0324      	lsls	r4, r4, #12
 8000a1e:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <__aeabi_ddiv+0x5dc>)
 8000a20:	0b24      	lsrs	r4, r4, #12
 8000a22:	e56e      	b.n	8000502 <__aeabi_ddiv+0xae>
 8000a24:	9a00      	ldr	r2, [sp, #0]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d3ea      	bcc.n	8000a00 <__aeabi_ddiv+0x5ac>
 8000a2a:	0005      	movs	r5, r0
 8000a2c:	e7d3      	b.n	80009d6 <__aeabi_ddiv+0x582>
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	000007ff 	.word	0x000007ff
 8000a34:	0000043e 	.word	0x0000043e
 8000a38:	0000041e 	.word	0x0000041e
 8000a3c:	000003ff 	.word	0x000003ff

08000a40 <__aeabi_dmul>:
 8000a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a42:	4657      	mov	r7, sl
 8000a44:	464e      	mov	r6, r9
 8000a46:	4645      	mov	r5, r8
 8000a48:	46de      	mov	lr, fp
 8000a4a:	b5e0      	push	{r5, r6, r7, lr}
 8000a4c:	4698      	mov	r8, r3
 8000a4e:	030c      	lsls	r4, r1, #12
 8000a50:	004b      	lsls	r3, r1, #1
 8000a52:	0006      	movs	r6, r0
 8000a54:	4692      	mov	sl, r2
 8000a56:	b087      	sub	sp, #28
 8000a58:	0b24      	lsrs	r4, r4, #12
 8000a5a:	0d5b      	lsrs	r3, r3, #21
 8000a5c:	0fcf      	lsrs	r7, r1, #31
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dmul+0x24>
 8000a62:	e15c      	b.n	8000d1e <__aeabi_dmul+0x2de>
 8000a64:	4ad9      	ldr	r2, [pc, #868]	; (8000dcc <__aeabi_dmul+0x38c>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d100      	bne.n	8000a6c <__aeabi_dmul+0x2c>
 8000a6a:	e175      	b.n	8000d58 <__aeabi_dmul+0x318>
 8000a6c:	0f42      	lsrs	r2, r0, #29
 8000a6e:	00e4      	lsls	r4, r4, #3
 8000a70:	4314      	orrs	r4, r2
 8000a72:	2280      	movs	r2, #128	; 0x80
 8000a74:	0412      	lsls	r2, r2, #16
 8000a76:	4314      	orrs	r4, r2
 8000a78:	4ad5      	ldr	r2, [pc, #852]	; (8000dd0 <__aeabi_dmul+0x390>)
 8000a7a:	00c5      	lsls	r5, r0, #3
 8000a7c:	4694      	mov	ip, r2
 8000a7e:	4463      	add	r3, ip
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	2300      	movs	r3, #0
 8000a84:	4699      	mov	r9, r3
 8000a86:	469b      	mov	fp, r3
 8000a88:	4643      	mov	r3, r8
 8000a8a:	4642      	mov	r2, r8
 8000a8c:	031e      	lsls	r6, r3, #12
 8000a8e:	0fd2      	lsrs	r2, r2, #31
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	4650      	mov	r0, sl
 8000a94:	4690      	mov	r8, r2
 8000a96:	0b36      	lsrs	r6, r6, #12
 8000a98:	0d5b      	lsrs	r3, r3, #21
 8000a9a:	d100      	bne.n	8000a9e <__aeabi_dmul+0x5e>
 8000a9c:	e120      	b.n	8000ce0 <__aeabi_dmul+0x2a0>
 8000a9e:	4acb      	ldr	r2, [pc, #812]	; (8000dcc <__aeabi_dmul+0x38c>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dmul+0x66>
 8000aa4:	e162      	b.n	8000d6c <__aeabi_dmul+0x32c>
 8000aa6:	49ca      	ldr	r1, [pc, #808]	; (8000dd0 <__aeabi_dmul+0x390>)
 8000aa8:	0f42      	lsrs	r2, r0, #29
 8000aaa:	468c      	mov	ip, r1
 8000aac:	9900      	ldr	r1, [sp, #0]
 8000aae:	4463      	add	r3, ip
 8000ab0:	00f6      	lsls	r6, r6, #3
 8000ab2:	468c      	mov	ip, r1
 8000ab4:	4316      	orrs	r6, r2
 8000ab6:	2280      	movs	r2, #128	; 0x80
 8000ab8:	449c      	add	ip, r3
 8000aba:	0412      	lsls	r2, r2, #16
 8000abc:	4663      	mov	r3, ip
 8000abe:	4316      	orrs	r6, r2
 8000ac0:	00c2      	lsls	r2, r0, #3
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	9900      	ldr	r1, [sp, #0]
 8000ac8:	4643      	mov	r3, r8
 8000aca:	3101      	adds	r1, #1
 8000acc:	468c      	mov	ip, r1
 8000ace:	4649      	mov	r1, r9
 8000ad0:	407b      	eors	r3, r7
 8000ad2:	9301      	str	r3, [sp, #4]
 8000ad4:	290f      	cmp	r1, #15
 8000ad6:	d826      	bhi.n	8000b26 <__aeabi_dmul+0xe6>
 8000ad8:	4bbe      	ldr	r3, [pc, #760]	; (8000dd4 <__aeabi_dmul+0x394>)
 8000ada:	0089      	lsls	r1, r1, #2
 8000adc:	5859      	ldr	r1, [r3, r1]
 8000ade:	468f      	mov	pc, r1
 8000ae0:	4643      	mov	r3, r8
 8000ae2:	9301      	str	r3, [sp, #4]
 8000ae4:	0034      	movs	r4, r6
 8000ae6:	0015      	movs	r5, r2
 8000ae8:	4683      	mov	fp, r0
 8000aea:	465b      	mov	r3, fp
 8000aec:	2b02      	cmp	r3, #2
 8000aee:	d016      	beq.n	8000b1e <__aeabi_dmul+0xde>
 8000af0:	2b03      	cmp	r3, #3
 8000af2:	d100      	bne.n	8000af6 <__aeabi_dmul+0xb6>
 8000af4:	e203      	b.n	8000efe <__aeabi_dmul+0x4be>
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d000      	beq.n	8000afc <__aeabi_dmul+0xbc>
 8000afa:	e0cd      	b.n	8000c98 <__aeabi_dmul+0x258>
 8000afc:	2200      	movs	r2, #0
 8000afe:	2400      	movs	r4, #0
 8000b00:	2500      	movs	r5, #0
 8000b02:	9b01      	ldr	r3, [sp, #4]
 8000b04:	0512      	lsls	r2, r2, #20
 8000b06:	4322      	orrs	r2, r4
 8000b08:	07db      	lsls	r3, r3, #31
 8000b0a:	431a      	orrs	r2, r3
 8000b0c:	0028      	movs	r0, r5
 8000b0e:	0011      	movs	r1, r2
 8000b10:	b007      	add	sp, #28
 8000b12:	bcf0      	pop	{r4, r5, r6, r7}
 8000b14:	46bb      	mov	fp, r7
 8000b16:	46b2      	mov	sl, r6
 8000b18:	46a9      	mov	r9, r5
 8000b1a:	46a0      	mov	r8, r4
 8000b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b1e:	2400      	movs	r4, #0
 8000b20:	2500      	movs	r5, #0
 8000b22:	4aaa      	ldr	r2, [pc, #680]	; (8000dcc <__aeabi_dmul+0x38c>)
 8000b24:	e7ed      	b.n	8000b02 <__aeabi_dmul+0xc2>
 8000b26:	0c28      	lsrs	r0, r5, #16
 8000b28:	042d      	lsls	r5, r5, #16
 8000b2a:	0c2d      	lsrs	r5, r5, #16
 8000b2c:	002b      	movs	r3, r5
 8000b2e:	0c11      	lsrs	r1, r2, #16
 8000b30:	0412      	lsls	r2, r2, #16
 8000b32:	0c12      	lsrs	r2, r2, #16
 8000b34:	4353      	muls	r3, r2
 8000b36:	4698      	mov	r8, r3
 8000b38:	0013      	movs	r3, r2
 8000b3a:	002f      	movs	r7, r5
 8000b3c:	4343      	muls	r3, r0
 8000b3e:	4699      	mov	r9, r3
 8000b40:	434f      	muls	r7, r1
 8000b42:	444f      	add	r7, r9
 8000b44:	46bb      	mov	fp, r7
 8000b46:	4647      	mov	r7, r8
 8000b48:	000b      	movs	r3, r1
 8000b4a:	0c3f      	lsrs	r7, r7, #16
 8000b4c:	46ba      	mov	sl, r7
 8000b4e:	4343      	muls	r3, r0
 8000b50:	44da      	add	sl, fp
 8000b52:	9302      	str	r3, [sp, #8]
 8000b54:	45d1      	cmp	r9, sl
 8000b56:	d904      	bls.n	8000b62 <__aeabi_dmul+0x122>
 8000b58:	2780      	movs	r7, #128	; 0x80
 8000b5a:	027f      	lsls	r7, r7, #9
 8000b5c:	46b9      	mov	r9, r7
 8000b5e:	444b      	add	r3, r9
 8000b60:	9302      	str	r3, [sp, #8]
 8000b62:	4653      	mov	r3, sl
 8000b64:	0c1b      	lsrs	r3, r3, #16
 8000b66:	469b      	mov	fp, r3
 8000b68:	4653      	mov	r3, sl
 8000b6a:	041f      	lsls	r7, r3, #16
 8000b6c:	4643      	mov	r3, r8
 8000b6e:	041b      	lsls	r3, r3, #16
 8000b70:	0c1b      	lsrs	r3, r3, #16
 8000b72:	4698      	mov	r8, r3
 8000b74:	003b      	movs	r3, r7
 8000b76:	4443      	add	r3, r8
 8000b78:	9304      	str	r3, [sp, #16]
 8000b7a:	0c33      	lsrs	r3, r6, #16
 8000b7c:	0436      	lsls	r6, r6, #16
 8000b7e:	0c36      	lsrs	r6, r6, #16
 8000b80:	4698      	mov	r8, r3
 8000b82:	0033      	movs	r3, r6
 8000b84:	4343      	muls	r3, r0
 8000b86:	4699      	mov	r9, r3
 8000b88:	4643      	mov	r3, r8
 8000b8a:	4343      	muls	r3, r0
 8000b8c:	002f      	movs	r7, r5
 8000b8e:	469a      	mov	sl, r3
 8000b90:	4643      	mov	r3, r8
 8000b92:	4377      	muls	r7, r6
 8000b94:	435d      	muls	r5, r3
 8000b96:	0c38      	lsrs	r0, r7, #16
 8000b98:	444d      	add	r5, r9
 8000b9a:	1945      	adds	r5, r0, r5
 8000b9c:	45a9      	cmp	r9, r5
 8000b9e:	d903      	bls.n	8000ba8 <__aeabi_dmul+0x168>
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	025b      	lsls	r3, r3, #9
 8000ba4:	4699      	mov	r9, r3
 8000ba6:	44ca      	add	sl, r9
 8000ba8:	043f      	lsls	r7, r7, #16
 8000baa:	0c28      	lsrs	r0, r5, #16
 8000bac:	0c3f      	lsrs	r7, r7, #16
 8000bae:	042d      	lsls	r5, r5, #16
 8000bb0:	19ed      	adds	r5, r5, r7
 8000bb2:	0c27      	lsrs	r7, r4, #16
 8000bb4:	0424      	lsls	r4, r4, #16
 8000bb6:	0c24      	lsrs	r4, r4, #16
 8000bb8:	0003      	movs	r3, r0
 8000bba:	0020      	movs	r0, r4
 8000bbc:	4350      	muls	r0, r2
 8000bbe:	437a      	muls	r2, r7
 8000bc0:	4691      	mov	r9, r2
 8000bc2:	003a      	movs	r2, r7
 8000bc4:	4453      	add	r3, sl
 8000bc6:	9305      	str	r3, [sp, #20]
 8000bc8:	0c03      	lsrs	r3, r0, #16
 8000bca:	469a      	mov	sl, r3
 8000bcc:	434a      	muls	r2, r1
 8000bce:	4361      	muls	r1, r4
 8000bd0:	4449      	add	r1, r9
 8000bd2:	4451      	add	r1, sl
 8000bd4:	44ab      	add	fp, r5
 8000bd6:	4589      	cmp	r9, r1
 8000bd8:	d903      	bls.n	8000be2 <__aeabi_dmul+0x1a2>
 8000bda:	2380      	movs	r3, #128	; 0x80
 8000bdc:	025b      	lsls	r3, r3, #9
 8000bde:	4699      	mov	r9, r3
 8000be0:	444a      	add	r2, r9
 8000be2:	0400      	lsls	r0, r0, #16
 8000be4:	0c0b      	lsrs	r3, r1, #16
 8000be6:	0c00      	lsrs	r0, r0, #16
 8000be8:	0409      	lsls	r1, r1, #16
 8000bea:	1809      	adds	r1, r1, r0
 8000bec:	0020      	movs	r0, r4
 8000bee:	4699      	mov	r9, r3
 8000bf0:	4643      	mov	r3, r8
 8000bf2:	4370      	muls	r0, r6
 8000bf4:	435c      	muls	r4, r3
 8000bf6:	437e      	muls	r6, r7
 8000bf8:	435f      	muls	r7, r3
 8000bfa:	0c03      	lsrs	r3, r0, #16
 8000bfc:	4698      	mov	r8, r3
 8000bfe:	19a4      	adds	r4, r4, r6
 8000c00:	4444      	add	r4, r8
 8000c02:	444a      	add	r2, r9
 8000c04:	9703      	str	r7, [sp, #12]
 8000c06:	42a6      	cmp	r6, r4
 8000c08:	d904      	bls.n	8000c14 <__aeabi_dmul+0x1d4>
 8000c0a:	2380      	movs	r3, #128	; 0x80
 8000c0c:	025b      	lsls	r3, r3, #9
 8000c0e:	4698      	mov	r8, r3
 8000c10:	4447      	add	r7, r8
 8000c12:	9703      	str	r7, [sp, #12]
 8000c14:	0423      	lsls	r3, r4, #16
 8000c16:	9e02      	ldr	r6, [sp, #8]
 8000c18:	469a      	mov	sl, r3
 8000c1a:	9b05      	ldr	r3, [sp, #20]
 8000c1c:	445e      	add	r6, fp
 8000c1e:	4698      	mov	r8, r3
 8000c20:	42ae      	cmp	r6, r5
 8000c22:	41ad      	sbcs	r5, r5
 8000c24:	1876      	adds	r6, r6, r1
 8000c26:	428e      	cmp	r6, r1
 8000c28:	4189      	sbcs	r1, r1
 8000c2a:	0400      	lsls	r0, r0, #16
 8000c2c:	0c00      	lsrs	r0, r0, #16
 8000c2e:	4450      	add	r0, sl
 8000c30:	4440      	add	r0, r8
 8000c32:	426d      	negs	r5, r5
 8000c34:	1947      	adds	r7, r0, r5
 8000c36:	46b8      	mov	r8, r7
 8000c38:	4693      	mov	fp, r2
 8000c3a:	4249      	negs	r1, r1
 8000c3c:	4689      	mov	r9, r1
 8000c3e:	44c3      	add	fp, r8
 8000c40:	44d9      	add	r9, fp
 8000c42:	4298      	cmp	r0, r3
 8000c44:	4180      	sbcs	r0, r0
 8000c46:	45a8      	cmp	r8, r5
 8000c48:	41ad      	sbcs	r5, r5
 8000c4a:	4593      	cmp	fp, r2
 8000c4c:	4192      	sbcs	r2, r2
 8000c4e:	4589      	cmp	r9, r1
 8000c50:	4189      	sbcs	r1, r1
 8000c52:	426d      	negs	r5, r5
 8000c54:	4240      	negs	r0, r0
 8000c56:	4328      	orrs	r0, r5
 8000c58:	0c24      	lsrs	r4, r4, #16
 8000c5a:	4252      	negs	r2, r2
 8000c5c:	4249      	negs	r1, r1
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	9b03      	ldr	r3, [sp, #12]
 8000c62:	1900      	adds	r0, r0, r4
 8000c64:	1880      	adds	r0, r0, r2
 8000c66:	18c7      	adds	r7, r0, r3
 8000c68:	464b      	mov	r3, r9
 8000c6a:	0ddc      	lsrs	r4, r3, #23
 8000c6c:	9b04      	ldr	r3, [sp, #16]
 8000c6e:	0275      	lsls	r5, r6, #9
 8000c70:	431d      	orrs	r5, r3
 8000c72:	1e6a      	subs	r2, r5, #1
 8000c74:	4195      	sbcs	r5, r2
 8000c76:	464b      	mov	r3, r9
 8000c78:	0df6      	lsrs	r6, r6, #23
 8000c7a:	027f      	lsls	r7, r7, #9
 8000c7c:	4335      	orrs	r5, r6
 8000c7e:	025a      	lsls	r2, r3, #9
 8000c80:	433c      	orrs	r4, r7
 8000c82:	4315      	orrs	r5, r2
 8000c84:	01fb      	lsls	r3, r7, #7
 8000c86:	d400      	bmi.n	8000c8a <__aeabi_dmul+0x24a>
 8000c88:	e11c      	b.n	8000ec4 <__aeabi_dmul+0x484>
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	086a      	lsrs	r2, r5, #1
 8000c8e:	400d      	ands	r5, r1
 8000c90:	4315      	orrs	r5, r2
 8000c92:	07e2      	lsls	r2, r4, #31
 8000c94:	4315      	orrs	r5, r2
 8000c96:	0864      	lsrs	r4, r4, #1
 8000c98:	494f      	ldr	r1, [pc, #316]	; (8000dd8 <__aeabi_dmul+0x398>)
 8000c9a:	4461      	add	r1, ip
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	dc00      	bgt.n	8000ca2 <__aeabi_dmul+0x262>
 8000ca0:	e0b0      	b.n	8000e04 <__aeabi_dmul+0x3c4>
 8000ca2:	076b      	lsls	r3, r5, #29
 8000ca4:	d009      	beq.n	8000cba <__aeabi_dmul+0x27a>
 8000ca6:	220f      	movs	r2, #15
 8000ca8:	402a      	ands	r2, r5
 8000caa:	2a04      	cmp	r2, #4
 8000cac:	d005      	beq.n	8000cba <__aeabi_dmul+0x27a>
 8000cae:	1d2a      	adds	r2, r5, #4
 8000cb0:	42aa      	cmp	r2, r5
 8000cb2:	41ad      	sbcs	r5, r5
 8000cb4:	426d      	negs	r5, r5
 8000cb6:	1964      	adds	r4, r4, r5
 8000cb8:	0015      	movs	r5, r2
 8000cba:	01e3      	lsls	r3, r4, #7
 8000cbc:	d504      	bpl.n	8000cc8 <__aeabi_dmul+0x288>
 8000cbe:	2180      	movs	r1, #128	; 0x80
 8000cc0:	4a46      	ldr	r2, [pc, #280]	; (8000ddc <__aeabi_dmul+0x39c>)
 8000cc2:	00c9      	lsls	r1, r1, #3
 8000cc4:	4014      	ands	r4, r2
 8000cc6:	4461      	add	r1, ip
 8000cc8:	4a45      	ldr	r2, [pc, #276]	; (8000de0 <__aeabi_dmul+0x3a0>)
 8000cca:	4291      	cmp	r1, r2
 8000ccc:	dd00      	ble.n	8000cd0 <__aeabi_dmul+0x290>
 8000cce:	e726      	b.n	8000b1e <__aeabi_dmul+0xde>
 8000cd0:	0762      	lsls	r2, r4, #29
 8000cd2:	08ed      	lsrs	r5, r5, #3
 8000cd4:	0264      	lsls	r4, r4, #9
 8000cd6:	0549      	lsls	r1, r1, #21
 8000cd8:	4315      	orrs	r5, r2
 8000cda:	0b24      	lsrs	r4, r4, #12
 8000cdc:	0d4a      	lsrs	r2, r1, #21
 8000cde:	e710      	b.n	8000b02 <__aeabi_dmul+0xc2>
 8000ce0:	4652      	mov	r2, sl
 8000ce2:	4332      	orrs	r2, r6
 8000ce4:	d100      	bne.n	8000ce8 <__aeabi_dmul+0x2a8>
 8000ce6:	e07f      	b.n	8000de8 <__aeabi_dmul+0x3a8>
 8000ce8:	2e00      	cmp	r6, #0
 8000cea:	d100      	bne.n	8000cee <__aeabi_dmul+0x2ae>
 8000cec:	e0dc      	b.n	8000ea8 <__aeabi_dmul+0x468>
 8000cee:	0030      	movs	r0, r6
 8000cf0:	f000 f96e 	bl	8000fd0 <__clzsi2>
 8000cf4:	0002      	movs	r2, r0
 8000cf6:	3a0b      	subs	r2, #11
 8000cf8:	231d      	movs	r3, #29
 8000cfa:	0001      	movs	r1, r0
 8000cfc:	1a9b      	subs	r3, r3, r2
 8000cfe:	4652      	mov	r2, sl
 8000d00:	3908      	subs	r1, #8
 8000d02:	40da      	lsrs	r2, r3
 8000d04:	408e      	lsls	r6, r1
 8000d06:	4316      	orrs	r6, r2
 8000d08:	4652      	mov	r2, sl
 8000d0a:	408a      	lsls	r2, r1
 8000d0c:	9b00      	ldr	r3, [sp, #0]
 8000d0e:	4935      	ldr	r1, [pc, #212]	; (8000de4 <__aeabi_dmul+0x3a4>)
 8000d10:	1a18      	subs	r0, r3, r0
 8000d12:	0003      	movs	r3, r0
 8000d14:	468c      	mov	ip, r1
 8000d16:	4463      	add	r3, ip
 8000d18:	2000      	movs	r0, #0
 8000d1a:	9300      	str	r3, [sp, #0]
 8000d1c:	e6d3      	b.n	8000ac6 <__aeabi_dmul+0x86>
 8000d1e:	0025      	movs	r5, r4
 8000d20:	4305      	orrs	r5, r0
 8000d22:	d04a      	beq.n	8000dba <__aeabi_dmul+0x37a>
 8000d24:	2c00      	cmp	r4, #0
 8000d26:	d100      	bne.n	8000d2a <__aeabi_dmul+0x2ea>
 8000d28:	e0b0      	b.n	8000e8c <__aeabi_dmul+0x44c>
 8000d2a:	0020      	movs	r0, r4
 8000d2c:	f000 f950 	bl	8000fd0 <__clzsi2>
 8000d30:	0001      	movs	r1, r0
 8000d32:	0002      	movs	r2, r0
 8000d34:	390b      	subs	r1, #11
 8000d36:	231d      	movs	r3, #29
 8000d38:	0010      	movs	r0, r2
 8000d3a:	1a5b      	subs	r3, r3, r1
 8000d3c:	0031      	movs	r1, r6
 8000d3e:	0035      	movs	r5, r6
 8000d40:	3808      	subs	r0, #8
 8000d42:	4084      	lsls	r4, r0
 8000d44:	40d9      	lsrs	r1, r3
 8000d46:	4085      	lsls	r5, r0
 8000d48:	430c      	orrs	r4, r1
 8000d4a:	4826      	ldr	r0, [pc, #152]	; (8000de4 <__aeabi_dmul+0x3a4>)
 8000d4c:	1a83      	subs	r3, r0, r2
 8000d4e:	9300      	str	r3, [sp, #0]
 8000d50:	2300      	movs	r3, #0
 8000d52:	4699      	mov	r9, r3
 8000d54:	469b      	mov	fp, r3
 8000d56:	e697      	b.n	8000a88 <__aeabi_dmul+0x48>
 8000d58:	0005      	movs	r5, r0
 8000d5a:	4325      	orrs	r5, r4
 8000d5c:	d126      	bne.n	8000dac <__aeabi_dmul+0x36c>
 8000d5e:	2208      	movs	r2, #8
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	2302      	movs	r3, #2
 8000d64:	2400      	movs	r4, #0
 8000d66:	4691      	mov	r9, r2
 8000d68:	469b      	mov	fp, r3
 8000d6a:	e68d      	b.n	8000a88 <__aeabi_dmul+0x48>
 8000d6c:	4652      	mov	r2, sl
 8000d6e:	9b00      	ldr	r3, [sp, #0]
 8000d70:	4332      	orrs	r2, r6
 8000d72:	d110      	bne.n	8000d96 <__aeabi_dmul+0x356>
 8000d74:	4915      	ldr	r1, [pc, #84]	; (8000dcc <__aeabi_dmul+0x38c>)
 8000d76:	2600      	movs	r6, #0
 8000d78:	468c      	mov	ip, r1
 8000d7a:	4463      	add	r3, ip
 8000d7c:	4649      	mov	r1, r9
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	2302      	movs	r3, #2
 8000d82:	4319      	orrs	r1, r3
 8000d84:	4689      	mov	r9, r1
 8000d86:	2002      	movs	r0, #2
 8000d88:	e69d      	b.n	8000ac6 <__aeabi_dmul+0x86>
 8000d8a:	465b      	mov	r3, fp
 8000d8c:	9701      	str	r7, [sp, #4]
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d000      	beq.n	8000d94 <__aeabi_dmul+0x354>
 8000d92:	e6ad      	b.n	8000af0 <__aeabi_dmul+0xb0>
 8000d94:	e6c3      	b.n	8000b1e <__aeabi_dmul+0xde>
 8000d96:	4a0d      	ldr	r2, [pc, #52]	; (8000dcc <__aeabi_dmul+0x38c>)
 8000d98:	2003      	movs	r0, #3
 8000d9a:	4694      	mov	ip, r2
 8000d9c:	4463      	add	r3, ip
 8000d9e:	464a      	mov	r2, r9
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	2303      	movs	r3, #3
 8000da4:	431a      	orrs	r2, r3
 8000da6:	4691      	mov	r9, r2
 8000da8:	4652      	mov	r2, sl
 8000daa:	e68c      	b.n	8000ac6 <__aeabi_dmul+0x86>
 8000dac:	220c      	movs	r2, #12
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	2303      	movs	r3, #3
 8000db2:	0005      	movs	r5, r0
 8000db4:	4691      	mov	r9, r2
 8000db6:	469b      	mov	fp, r3
 8000db8:	e666      	b.n	8000a88 <__aeabi_dmul+0x48>
 8000dba:	2304      	movs	r3, #4
 8000dbc:	4699      	mov	r9, r3
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	2400      	movs	r4, #0
 8000dc6:	469b      	mov	fp, r3
 8000dc8:	e65e      	b.n	8000a88 <__aeabi_dmul+0x48>
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	000007ff 	.word	0x000007ff
 8000dd0:	fffffc01 	.word	0xfffffc01
 8000dd4:	08003610 	.word	0x08003610
 8000dd8:	000003ff 	.word	0x000003ff
 8000ddc:	feffffff 	.word	0xfeffffff
 8000de0:	000007fe 	.word	0x000007fe
 8000de4:	fffffc0d 	.word	0xfffffc0d
 8000de8:	4649      	mov	r1, r9
 8000dea:	2301      	movs	r3, #1
 8000dec:	4319      	orrs	r1, r3
 8000dee:	4689      	mov	r9, r1
 8000df0:	2600      	movs	r6, #0
 8000df2:	2001      	movs	r0, #1
 8000df4:	e667      	b.n	8000ac6 <__aeabi_dmul+0x86>
 8000df6:	2300      	movs	r3, #0
 8000df8:	2480      	movs	r4, #128	; 0x80
 8000dfa:	2500      	movs	r5, #0
 8000dfc:	4a43      	ldr	r2, [pc, #268]	; (8000f0c <__aeabi_dmul+0x4cc>)
 8000dfe:	9301      	str	r3, [sp, #4]
 8000e00:	0324      	lsls	r4, r4, #12
 8000e02:	e67e      	b.n	8000b02 <__aeabi_dmul+0xc2>
 8000e04:	2001      	movs	r0, #1
 8000e06:	1a40      	subs	r0, r0, r1
 8000e08:	2838      	cmp	r0, #56	; 0x38
 8000e0a:	dd00      	ble.n	8000e0e <__aeabi_dmul+0x3ce>
 8000e0c:	e676      	b.n	8000afc <__aeabi_dmul+0xbc>
 8000e0e:	281f      	cmp	r0, #31
 8000e10:	dd5b      	ble.n	8000eca <__aeabi_dmul+0x48a>
 8000e12:	221f      	movs	r2, #31
 8000e14:	0023      	movs	r3, r4
 8000e16:	4252      	negs	r2, r2
 8000e18:	1a51      	subs	r1, r2, r1
 8000e1a:	40cb      	lsrs	r3, r1
 8000e1c:	0019      	movs	r1, r3
 8000e1e:	2820      	cmp	r0, #32
 8000e20:	d003      	beq.n	8000e2a <__aeabi_dmul+0x3ea>
 8000e22:	4a3b      	ldr	r2, [pc, #236]	; (8000f10 <__aeabi_dmul+0x4d0>)
 8000e24:	4462      	add	r2, ip
 8000e26:	4094      	lsls	r4, r2
 8000e28:	4325      	orrs	r5, r4
 8000e2a:	1e6a      	subs	r2, r5, #1
 8000e2c:	4195      	sbcs	r5, r2
 8000e2e:	002a      	movs	r2, r5
 8000e30:	430a      	orrs	r2, r1
 8000e32:	2107      	movs	r1, #7
 8000e34:	000d      	movs	r5, r1
 8000e36:	2400      	movs	r4, #0
 8000e38:	4015      	ands	r5, r2
 8000e3a:	4211      	tst	r1, r2
 8000e3c:	d05b      	beq.n	8000ef6 <__aeabi_dmul+0x4b6>
 8000e3e:	210f      	movs	r1, #15
 8000e40:	2400      	movs	r4, #0
 8000e42:	4011      	ands	r1, r2
 8000e44:	2904      	cmp	r1, #4
 8000e46:	d053      	beq.n	8000ef0 <__aeabi_dmul+0x4b0>
 8000e48:	1d11      	adds	r1, r2, #4
 8000e4a:	4291      	cmp	r1, r2
 8000e4c:	4192      	sbcs	r2, r2
 8000e4e:	4252      	negs	r2, r2
 8000e50:	18a4      	adds	r4, r4, r2
 8000e52:	000a      	movs	r2, r1
 8000e54:	0223      	lsls	r3, r4, #8
 8000e56:	d54b      	bpl.n	8000ef0 <__aeabi_dmul+0x4b0>
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2400      	movs	r4, #0
 8000e5c:	2500      	movs	r5, #0
 8000e5e:	e650      	b.n	8000b02 <__aeabi_dmul+0xc2>
 8000e60:	2380      	movs	r3, #128	; 0x80
 8000e62:	031b      	lsls	r3, r3, #12
 8000e64:	421c      	tst	r4, r3
 8000e66:	d009      	beq.n	8000e7c <__aeabi_dmul+0x43c>
 8000e68:	421e      	tst	r6, r3
 8000e6a:	d107      	bne.n	8000e7c <__aeabi_dmul+0x43c>
 8000e6c:	4333      	orrs	r3, r6
 8000e6e:	031c      	lsls	r4, r3, #12
 8000e70:	4643      	mov	r3, r8
 8000e72:	0015      	movs	r5, r2
 8000e74:	0b24      	lsrs	r4, r4, #12
 8000e76:	4a25      	ldr	r2, [pc, #148]	; (8000f0c <__aeabi_dmul+0x4cc>)
 8000e78:	9301      	str	r3, [sp, #4]
 8000e7a:	e642      	b.n	8000b02 <__aeabi_dmul+0xc2>
 8000e7c:	2280      	movs	r2, #128	; 0x80
 8000e7e:	0312      	lsls	r2, r2, #12
 8000e80:	4314      	orrs	r4, r2
 8000e82:	0324      	lsls	r4, r4, #12
 8000e84:	4a21      	ldr	r2, [pc, #132]	; (8000f0c <__aeabi_dmul+0x4cc>)
 8000e86:	0b24      	lsrs	r4, r4, #12
 8000e88:	9701      	str	r7, [sp, #4]
 8000e8a:	e63a      	b.n	8000b02 <__aeabi_dmul+0xc2>
 8000e8c:	f000 f8a0 	bl	8000fd0 <__clzsi2>
 8000e90:	0001      	movs	r1, r0
 8000e92:	0002      	movs	r2, r0
 8000e94:	3115      	adds	r1, #21
 8000e96:	3220      	adds	r2, #32
 8000e98:	291c      	cmp	r1, #28
 8000e9a:	dc00      	bgt.n	8000e9e <__aeabi_dmul+0x45e>
 8000e9c:	e74b      	b.n	8000d36 <__aeabi_dmul+0x2f6>
 8000e9e:	0034      	movs	r4, r6
 8000ea0:	3808      	subs	r0, #8
 8000ea2:	2500      	movs	r5, #0
 8000ea4:	4084      	lsls	r4, r0
 8000ea6:	e750      	b.n	8000d4a <__aeabi_dmul+0x30a>
 8000ea8:	f000 f892 	bl	8000fd0 <__clzsi2>
 8000eac:	0003      	movs	r3, r0
 8000eae:	001a      	movs	r2, r3
 8000eb0:	3215      	adds	r2, #21
 8000eb2:	3020      	adds	r0, #32
 8000eb4:	2a1c      	cmp	r2, #28
 8000eb6:	dc00      	bgt.n	8000eba <__aeabi_dmul+0x47a>
 8000eb8:	e71e      	b.n	8000cf8 <__aeabi_dmul+0x2b8>
 8000eba:	4656      	mov	r6, sl
 8000ebc:	3b08      	subs	r3, #8
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	409e      	lsls	r6, r3
 8000ec2:	e723      	b.n	8000d0c <__aeabi_dmul+0x2cc>
 8000ec4:	9b00      	ldr	r3, [sp, #0]
 8000ec6:	469c      	mov	ip, r3
 8000ec8:	e6e6      	b.n	8000c98 <__aeabi_dmul+0x258>
 8000eca:	4912      	ldr	r1, [pc, #72]	; (8000f14 <__aeabi_dmul+0x4d4>)
 8000ecc:	0022      	movs	r2, r4
 8000ece:	4461      	add	r1, ip
 8000ed0:	002e      	movs	r6, r5
 8000ed2:	408d      	lsls	r5, r1
 8000ed4:	408a      	lsls	r2, r1
 8000ed6:	40c6      	lsrs	r6, r0
 8000ed8:	1e69      	subs	r1, r5, #1
 8000eda:	418d      	sbcs	r5, r1
 8000edc:	4332      	orrs	r2, r6
 8000ede:	432a      	orrs	r2, r5
 8000ee0:	40c4      	lsrs	r4, r0
 8000ee2:	0753      	lsls	r3, r2, #29
 8000ee4:	d0b6      	beq.n	8000e54 <__aeabi_dmul+0x414>
 8000ee6:	210f      	movs	r1, #15
 8000ee8:	4011      	ands	r1, r2
 8000eea:	2904      	cmp	r1, #4
 8000eec:	d1ac      	bne.n	8000e48 <__aeabi_dmul+0x408>
 8000eee:	e7b1      	b.n	8000e54 <__aeabi_dmul+0x414>
 8000ef0:	0765      	lsls	r5, r4, #29
 8000ef2:	0264      	lsls	r4, r4, #9
 8000ef4:	0b24      	lsrs	r4, r4, #12
 8000ef6:	08d2      	lsrs	r2, r2, #3
 8000ef8:	4315      	orrs	r5, r2
 8000efa:	2200      	movs	r2, #0
 8000efc:	e601      	b.n	8000b02 <__aeabi_dmul+0xc2>
 8000efe:	2280      	movs	r2, #128	; 0x80
 8000f00:	0312      	lsls	r2, r2, #12
 8000f02:	4314      	orrs	r4, r2
 8000f04:	0324      	lsls	r4, r4, #12
 8000f06:	4a01      	ldr	r2, [pc, #4]	; (8000f0c <__aeabi_dmul+0x4cc>)
 8000f08:	0b24      	lsrs	r4, r4, #12
 8000f0a:	e5fa      	b.n	8000b02 <__aeabi_dmul+0xc2>
 8000f0c:	000007ff 	.word	0x000007ff
 8000f10:	0000043e 	.word	0x0000043e
 8000f14:	0000041e 	.word	0x0000041e

08000f18 <__aeabi_d2iz>:
 8000f18:	000a      	movs	r2, r1
 8000f1a:	b530      	push	{r4, r5, lr}
 8000f1c:	4c13      	ldr	r4, [pc, #76]	; (8000f6c <__aeabi_d2iz+0x54>)
 8000f1e:	0053      	lsls	r3, r2, #1
 8000f20:	0309      	lsls	r1, r1, #12
 8000f22:	0005      	movs	r5, r0
 8000f24:	0b09      	lsrs	r1, r1, #12
 8000f26:	2000      	movs	r0, #0
 8000f28:	0d5b      	lsrs	r3, r3, #21
 8000f2a:	0fd2      	lsrs	r2, r2, #31
 8000f2c:	42a3      	cmp	r3, r4
 8000f2e:	dd04      	ble.n	8000f3a <__aeabi_d2iz+0x22>
 8000f30:	480f      	ldr	r0, [pc, #60]	; (8000f70 <__aeabi_d2iz+0x58>)
 8000f32:	4283      	cmp	r3, r0
 8000f34:	dd02      	ble.n	8000f3c <__aeabi_d2iz+0x24>
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <__aeabi_d2iz+0x5c>)
 8000f38:	18d0      	adds	r0, r2, r3
 8000f3a:	bd30      	pop	{r4, r5, pc}
 8000f3c:	2080      	movs	r0, #128	; 0x80
 8000f3e:	0340      	lsls	r0, r0, #13
 8000f40:	4301      	orrs	r1, r0
 8000f42:	480d      	ldr	r0, [pc, #52]	; (8000f78 <__aeabi_d2iz+0x60>)
 8000f44:	1ac0      	subs	r0, r0, r3
 8000f46:	281f      	cmp	r0, #31
 8000f48:	dd08      	ble.n	8000f5c <__aeabi_d2iz+0x44>
 8000f4a:	480c      	ldr	r0, [pc, #48]	; (8000f7c <__aeabi_d2iz+0x64>)
 8000f4c:	1ac3      	subs	r3, r0, r3
 8000f4e:	40d9      	lsrs	r1, r3
 8000f50:	000b      	movs	r3, r1
 8000f52:	4258      	negs	r0, r3
 8000f54:	2a00      	cmp	r2, #0
 8000f56:	d1f0      	bne.n	8000f3a <__aeabi_d2iz+0x22>
 8000f58:	0018      	movs	r0, r3
 8000f5a:	e7ee      	b.n	8000f3a <__aeabi_d2iz+0x22>
 8000f5c:	4c08      	ldr	r4, [pc, #32]	; (8000f80 <__aeabi_d2iz+0x68>)
 8000f5e:	40c5      	lsrs	r5, r0
 8000f60:	46a4      	mov	ip, r4
 8000f62:	4463      	add	r3, ip
 8000f64:	4099      	lsls	r1, r3
 8000f66:	000b      	movs	r3, r1
 8000f68:	432b      	orrs	r3, r5
 8000f6a:	e7f2      	b.n	8000f52 <__aeabi_d2iz+0x3a>
 8000f6c:	000003fe 	.word	0x000003fe
 8000f70:	0000041d 	.word	0x0000041d
 8000f74:	7fffffff 	.word	0x7fffffff
 8000f78:	00000433 	.word	0x00000433
 8000f7c:	00000413 	.word	0x00000413
 8000f80:	fffffbed 	.word	0xfffffbed

08000f84 <__aeabi_ui2d>:
 8000f84:	b510      	push	{r4, lr}
 8000f86:	1e04      	subs	r4, r0, #0
 8000f88:	d010      	beq.n	8000fac <__aeabi_ui2d+0x28>
 8000f8a:	f000 f821 	bl	8000fd0 <__clzsi2>
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <__aeabi_ui2d+0x48>)
 8000f90:	1a1b      	subs	r3, r3, r0
 8000f92:	280a      	cmp	r0, #10
 8000f94:	dc11      	bgt.n	8000fba <__aeabi_ui2d+0x36>
 8000f96:	220b      	movs	r2, #11
 8000f98:	0021      	movs	r1, r4
 8000f9a:	1a12      	subs	r2, r2, r0
 8000f9c:	40d1      	lsrs	r1, r2
 8000f9e:	3015      	adds	r0, #21
 8000fa0:	030a      	lsls	r2, r1, #12
 8000fa2:	055b      	lsls	r3, r3, #21
 8000fa4:	4084      	lsls	r4, r0
 8000fa6:	0b12      	lsrs	r2, r2, #12
 8000fa8:	0d5b      	lsrs	r3, r3, #21
 8000faa:	e001      	b.n	8000fb0 <__aeabi_ui2d+0x2c>
 8000fac:	2300      	movs	r3, #0
 8000fae:	2200      	movs	r2, #0
 8000fb0:	051b      	lsls	r3, r3, #20
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	0020      	movs	r0, r4
 8000fb6:	0019      	movs	r1, r3
 8000fb8:	bd10      	pop	{r4, pc}
 8000fba:	0022      	movs	r2, r4
 8000fbc:	380b      	subs	r0, #11
 8000fbe:	4082      	lsls	r2, r0
 8000fc0:	055b      	lsls	r3, r3, #21
 8000fc2:	0312      	lsls	r2, r2, #12
 8000fc4:	2400      	movs	r4, #0
 8000fc6:	0b12      	lsrs	r2, r2, #12
 8000fc8:	0d5b      	lsrs	r3, r3, #21
 8000fca:	e7f1      	b.n	8000fb0 <__aeabi_ui2d+0x2c>
 8000fcc:	0000041e 	.word	0x0000041e

08000fd0 <__clzsi2>:
 8000fd0:	211c      	movs	r1, #28
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	041b      	lsls	r3, r3, #16
 8000fd6:	4298      	cmp	r0, r3
 8000fd8:	d301      	bcc.n	8000fde <__clzsi2+0xe>
 8000fda:	0c00      	lsrs	r0, r0, #16
 8000fdc:	3910      	subs	r1, #16
 8000fde:	0a1b      	lsrs	r3, r3, #8
 8000fe0:	4298      	cmp	r0, r3
 8000fe2:	d301      	bcc.n	8000fe8 <__clzsi2+0x18>
 8000fe4:	0a00      	lsrs	r0, r0, #8
 8000fe6:	3908      	subs	r1, #8
 8000fe8:	091b      	lsrs	r3, r3, #4
 8000fea:	4298      	cmp	r0, r3
 8000fec:	d301      	bcc.n	8000ff2 <__clzsi2+0x22>
 8000fee:	0900      	lsrs	r0, r0, #4
 8000ff0:	3904      	subs	r1, #4
 8000ff2:	a202      	add	r2, pc, #8	; (adr r2, 8000ffc <__clzsi2+0x2c>)
 8000ff4:	5c10      	ldrb	r0, [r2, r0]
 8000ff6:	1840      	adds	r0, r0, r1
 8000ff8:	4770      	bx	lr
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	02020304 	.word	0x02020304
 8001000:	01010101 	.word	0x01010101
	...

0800100c <__clzdi2>:
 800100c:	b510      	push	{r4, lr}
 800100e:	2900      	cmp	r1, #0
 8001010:	d103      	bne.n	800101a <__clzdi2+0xe>
 8001012:	f7ff ffdd 	bl	8000fd0 <__clzsi2>
 8001016:	3020      	adds	r0, #32
 8001018:	e002      	b.n	8001020 <__clzdi2+0x14>
 800101a:	0008      	movs	r0, r1
 800101c:	f7ff ffd8 	bl	8000fd0 <__clzsi2>
 8001020:	bd10      	pop	{r4, pc}
 8001022:	46c0      	nop			; (mov r8, r8)

08001024 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	0002      	movs	r2, r0
 800102c:	1dbb      	adds	r3, r7, #6
 800102e:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == GPIO_PIN_7){
 8001030:	1dbb      	adds	r3, r7, #6
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	2b80      	cmp	r3, #128	; 0x80
 8001036:	d104      	bne.n	8001042 <HAL_GPIO_EXTI_Callback+0x1e>
		counter++;
 8001038:	4b04      	ldr	r3, [pc, #16]	; (800104c <HAL_GPIO_EXTI_Callback+0x28>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	1c5a      	adds	r2, r3, #1
 800103e:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GPIO_EXTI_Callback+0x28>)
 8001040:	601a      	str	r2, [r3, #0]
	}
}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	46bd      	mov	sp, r7
 8001046:	b002      	add	sp, #8
 8001048:	bd80      	pop	{r7, pc}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	200000b8 	.word	0x200000b8

08001050 <change_angle>:
void change_angle(int angle){
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
		angle=angle+45;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	332d      	adds	r3, #45	; 0x2d
 800105c:	607b      	str	r3, [r7, #4]
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,angle);
 800105e:	4b04      	ldr	r3, [pc, #16]	; (8001070 <change_angle+0x20>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	46bd      	mov	sp, r7
 800106a:	b002      	add	sp, #8
 800106c:	bd80      	pop	{r7, pc}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	20000068 	.word	0x20000068

08001074 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001074:	b590      	push	{r4, r7, lr}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107a:	f000 fbd1 	bl	8001820 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107e:	f000 f8fd 	bl	800127c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001082:	f000 fa2b 	bl	80014dc <MX_GPIO_Init>
  MX_TIM2_Init();
 8001086:	f000 f953 	bl	8001330 <MX_TIM2_Init>
  MX_TIM3_Init();
 800108a:	f000 f9a5 	bl	80013d8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 800108e:	4b71      	ldr	r3, [pc, #452]	; (8001254 <main+0x1e0>)
 8001090:	2108      	movs	r1, #8
 8001092:	0018      	movs	r0, r3
 8001094:	f001 fdba 	bl	8002c0c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim2);
 8001098:	4b6f      	ldr	r3, [pc, #444]	; (8001258 <main+0x1e4>)
 800109a:	0018      	movs	r0, r3
 800109c:	f001 fd24 	bl	8002ae8 <HAL_TIM_Base_Start>
   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);  // pull the TRIG pin low
 80010a0:	2380      	movs	r3, #128	; 0x80
 80010a2:	0099      	lsls	r1, r3, #2
 80010a4:	23a0      	movs	r3, #160	; 0xa0
 80010a6:	05db      	lsls	r3, r3, #23
 80010a8:	2200      	movs	r2, #0
 80010aa:	0018      	movs	r0, r3
 80010ac:	f000 fec5 	bl	8001e3a <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80010b0:	2380      	movs	r3, #128	; 0x80
 80010b2:	0099      	lsls	r1, r3, #2
 80010b4:	23a0      	movs	r3, #160	; 0xa0
 80010b6:	05db      	lsls	r3, r3, #23
 80010b8:	2201      	movs	r2, #1
 80010ba:	0018      	movs	r0, r3
 80010bc:	f000 febd 	bl	8001e3a <HAL_GPIO_WritePin>
	      __HAL_TIM_SET_COUNTER(&htim2, 0);
 80010c0:	4b65      	ldr	r3, [pc, #404]	; (8001258 <main+0x1e4>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2200      	movs	r2, #0
 80010c6:	625a      	str	r2, [r3, #36]	; 0x24
	      while (__HAL_TIM_GET_COUNTER (&htim2) < 10);  // wait for 10 us
 80010c8:	46c0      	nop			; (mov r8, r8)
 80010ca:	4b63      	ldr	r3, [pc, #396]	; (8001258 <main+0x1e4>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d0:	2b09      	cmp	r3, #9
 80010d2:	d9fa      	bls.n	80010ca <main+0x56>
	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);  // pull the TRIG pin low
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	0099      	lsls	r1, r3, #2
 80010d8:	23a0      	movs	r3, #160	; 0xa0
 80010da:	05db      	lsls	r3, r3, #23
 80010dc:	2200      	movs	r2, #0
 80010de:	0018      	movs	r0, r3
 80010e0:	f000 feab 	bl	8001e3a <HAL_GPIO_WritePin>

	      pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 80010e4:	f000 fc02 	bl	80018ec <HAL_GetTick>
 80010e8:	0002      	movs	r2, r0
 80010ea:	4b5c      	ldr	r3, [pc, #368]	; (800125c <main+0x1e8>)
 80010ec:	601a      	str	r2, [r3, #0]
	      // wait for the echo pin to go high
	      while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_8)) && pMillis + 10 >  HAL_GetTick());
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	005a      	lsls	r2, r3, #1
 80010f4:	23a0      	movs	r3, #160	; 0xa0
 80010f6:	05db      	lsls	r3, r3, #23
 80010f8:	0011      	movs	r1, r2
 80010fa:	0018      	movs	r0, r3
 80010fc:	f000 fe80 	bl	8001e00 <HAL_GPIO_ReadPin>
 8001100:	1e03      	subs	r3, r0, #0
 8001102:	d108      	bne.n	8001116 <main+0xa2>
 8001104:	4b55      	ldr	r3, [pc, #340]	; (800125c <main+0x1e8>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	330a      	adds	r3, #10
 800110a:	001c      	movs	r4, r3
 800110c:	f000 fbee 	bl	80018ec <HAL_GetTick>
 8001110:	0003      	movs	r3, r0
 8001112:	429c      	cmp	r4, r3
 8001114:	d8ec      	bhi.n	80010f0 <main+0x7c>
	      Value1 = __HAL_TIM_GET_COUNTER (&htim2);
 8001116:	4b50      	ldr	r3, [pc, #320]	; (8001258 <main+0x1e4>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800111c:	4b50      	ldr	r3, [pc, #320]	; (8001260 <main+0x1ec>)
 800111e:	601a      	str	r2, [r3, #0]

	      pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8001120:	f000 fbe4 	bl	80018ec <HAL_GetTick>
 8001124:	0002      	movs	r2, r0
 8001126:	4b4d      	ldr	r3, [pc, #308]	; (800125c <main+0x1e8>)
 8001128:	601a      	str	r2, [r3, #0]
	      // wait for the echo pin to go low
	      while ((HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_8)) && pMillis + 50 > HAL_GetTick());
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	005a      	lsls	r2, r3, #1
 8001130:	23a0      	movs	r3, #160	; 0xa0
 8001132:	05db      	lsls	r3, r3, #23
 8001134:	0011      	movs	r1, r2
 8001136:	0018      	movs	r0, r3
 8001138:	f000 fe62 	bl	8001e00 <HAL_GPIO_ReadPin>
 800113c:	1e03      	subs	r3, r0, #0
 800113e:	d008      	beq.n	8001152 <main+0xde>
 8001140:	4b46      	ldr	r3, [pc, #280]	; (800125c <main+0x1e8>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	3332      	adds	r3, #50	; 0x32
 8001146:	001c      	movs	r4, r3
 8001148:	f000 fbd0 	bl	80018ec <HAL_GetTick>
 800114c:	0003      	movs	r3, r0
 800114e:	429c      	cmp	r4, r3
 8001150:	d8ec      	bhi.n	800112c <main+0xb8>
	      Value2 = __HAL_TIM_GET_COUNTER (&htim2);
 8001152:	4b41      	ldr	r3, [pc, #260]	; (8001258 <main+0x1e4>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001158:	4b42      	ldr	r3, [pc, #264]	; (8001264 <main+0x1f0>)
 800115a:	601a      	str	r2, [r3, #0]

	      Distance = (Value2-Value1)* 0.034/2;
 800115c:	4b41      	ldr	r3, [pc, #260]	; (8001264 <main+0x1f0>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b3f      	ldr	r3, [pc, #252]	; (8001260 <main+0x1ec>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	0018      	movs	r0, r3
 8001168:	f7ff ff0c 	bl	8000f84 <__aeabi_ui2d>
 800116c:	4a3e      	ldr	r2, [pc, #248]	; (8001268 <main+0x1f4>)
 800116e:	4b3f      	ldr	r3, [pc, #252]	; (800126c <main+0x1f8>)
 8001170:	f7ff fc66 	bl	8000a40 <__aeabi_dmul>
 8001174:	0002      	movs	r2, r0
 8001176:	000b      	movs	r3, r1
 8001178:	0010      	movs	r0, r2
 800117a:	0019      	movs	r1, r3
 800117c:	2200      	movs	r2, #0
 800117e:	2380      	movs	r3, #128	; 0x80
 8001180:	05db      	lsls	r3, r3, #23
 8001182:	f7ff f967 	bl	8000454 <__aeabi_ddiv>
 8001186:	0002      	movs	r2, r0
 8001188:	000b      	movs	r3, r1
 800118a:	0010      	movs	r0, r2
 800118c:	0019      	movs	r1, r3
 800118e:	f7ff fec3 	bl	8000f18 <__aeabi_d2iz>
 8001192:	0002      	movs	r2, r0
 8001194:	4b36      	ldr	r3, [pc, #216]	; (8001270 <main+0x1fc>)
 8001196:	601a      	str	r2, [r3, #0]
	      HAL_Delay(50);
 8001198:	2032      	movs	r0, #50	; 0x32
 800119a:	f000 fbb1 	bl	8001900 <HAL_Delay>

	      int angle = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]

	      if(Distance>=0 && Distance<10 && counter==1){
 80011a2:	4b33      	ldr	r3, [pc, #204]	; (8001270 <main+0x1fc>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	db15      	blt.n	80011d6 <main+0x162>
 80011aa:	4b31      	ldr	r3, [pc, #196]	; (8001270 <main+0x1fc>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b09      	cmp	r3, #9
 80011b0:	dc11      	bgt.n	80011d6 <main+0x162>
 80011b2:	4b30      	ldr	r3, [pc, #192]	; (8001274 <main+0x200>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d10d      	bne.n	80011d6 <main+0x162>
	    	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_10);
 80011ba:	2380      	movs	r3, #128	; 0x80
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	4a2e      	ldr	r2, [pc, #184]	; (8001278 <main+0x204>)
 80011c0:	0019      	movs	r1, r3
 80011c2:	0010      	movs	r0, r2
 80011c4:	f000 fe56 	bl	8001e74 <HAL_GPIO_TogglePin>
	    	  angle = angle + 30;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	331e      	adds	r3, #30
 80011cc:	607b      	str	r3, [r7, #4]
	    	  change_angle(angle);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	0018      	movs	r0, r3
 80011d2:	f7ff ff3d 	bl	8001050 <change_angle>
	      }
	      if(Distance>=10 && Distance<20 && counter==2){
 80011d6:	4b26      	ldr	r3, [pc, #152]	; (8001270 <main+0x1fc>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2b09      	cmp	r3, #9
 80011dc:	dd13      	ble.n	8001206 <main+0x192>
 80011de:	4b24      	ldr	r3, [pc, #144]	; (8001270 <main+0x1fc>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2b13      	cmp	r3, #19
 80011e4:	dc0f      	bgt.n	8001206 <main+0x192>
 80011e6:	4b23      	ldr	r3, [pc, #140]	; (8001274 <main+0x200>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d10b      	bne.n	8001206 <main+0x192>
	      	    	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_4);
 80011ee:	4b22      	ldr	r3, [pc, #136]	; (8001278 <main+0x204>)
 80011f0:	2110      	movs	r1, #16
 80011f2:	0018      	movs	r0, r3
 80011f4:	f000 fe3e 	bl	8001e74 <HAL_GPIO_TogglePin>
	      	    	  angle = angle + 45;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	332d      	adds	r3, #45	; 0x2d
 80011fc:	607b      	str	r3, [r7, #4]
	      	    	change_angle(angle);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	0018      	movs	r0, r3
 8001202:	f7ff ff25 	bl	8001050 <change_angle>
	      	      }
	      if(Distance>=20 && Distance<30 && counter==3){
 8001206:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <main+0x1fc>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b13      	cmp	r3, #19
 800120c:	dd13      	ble.n	8001236 <main+0x1c2>
 800120e:	4b18      	ldr	r3, [pc, #96]	; (8001270 <main+0x1fc>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2b1d      	cmp	r3, #29
 8001214:	dc0f      	bgt.n	8001236 <main+0x1c2>
 8001216:	4b17      	ldr	r3, [pc, #92]	; (8001274 <main+0x200>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b03      	cmp	r3, #3
 800121c:	d10b      	bne.n	8001236 <main+0x1c2>
	      	    	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_5);
 800121e:	4b16      	ldr	r3, [pc, #88]	; (8001278 <main+0x204>)
 8001220:	2120      	movs	r1, #32
 8001222:	0018      	movs	r0, r3
 8001224:	f000 fe26 	bl	8001e74 <HAL_GPIO_TogglePin>
	      	    	  angle = angle + 60;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	333c      	adds	r3, #60	; 0x3c
 800122c:	607b      	str	r3, [r7, #4]
	      	    	  change_angle(angle);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	0018      	movs	r0, r3
 8001232:	f7ff ff0d 	bl	8001050 <change_angle>
	      	      }
	      if(counter>=4){
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <main+0x200>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b03      	cmp	r3, #3
 800123c:	dc00      	bgt.n	8001240 <main+0x1cc>
 800123e:	e737      	b.n	80010b0 <main+0x3c>
	    	  counter = 0;
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <main+0x200>)
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
	    	  angle = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
	    	  change_angle(angle);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	0018      	movs	r0, r3
 800124e:	f7ff feff 	bl	8001050 <change_angle>
  {
 8001252:	e72d      	b.n	80010b0 <main+0x3c>
 8001254:	20000068 	.word	0x20000068
 8001258:	20000028 	.word	0x20000028
 800125c:	200000a8 	.word	0x200000a8
 8001260:	200000ac 	.word	0x200000ac
 8001264:	200000b0 	.word	0x200000b0
 8001268:	b020c49c 	.word	0xb020c49c
 800126c:	3fa16872 	.word	0x3fa16872
 8001270:	200000b4 	.word	0x200000b4
 8001274:	200000b8 	.word	0x200000b8
 8001278:	50000400 	.word	0x50000400

0800127c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b095      	sub	sp, #84	; 0x54
 8001280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001282:	2418      	movs	r4, #24
 8001284:	193b      	adds	r3, r7, r4
 8001286:	0018      	movs	r0, r3
 8001288:	2338      	movs	r3, #56	; 0x38
 800128a:	001a      	movs	r2, r3
 800128c:	2100      	movs	r1, #0
 800128e:	f002 f98b 	bl	80035a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	0018      	movs	r0, r3
 8001296:	2314      	movs	r3, #20
 8001298:	001a      	movs	r2, r3
 800129a:	2100      	movs	r1, #0
 800129c:	f002 f984 	bl	80035a8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012a0:	4b21      	ldr	r3, [pc, #132]	; (8001328 <SystemClock_Config+0xac>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a21      	ldr	r2, [pc, #132]	; (800132c <SystemClock_Config+0xb0>)
 80012a6:	401a      	ands	r2, r3
 80012a8:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <SystemClock_Config+0xac>)
 80012aa:	2180      	movs	r1, #128	; 0x80
 80012ac:	0109      	lsls	r1, r1, #4
 80012ae:	430a      	orrs	r2, r1
 80012b0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012b2:	0021      	movs	r1, r4
 80012b4:	187b      	adds	r3, r7, r1
 80012b6:	2202      	movs	r2, #2
 80012b8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ba:	187b      	adds	r3, r7, r1
 80012bc:	2201      	movs	r2, #1
 80012be:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012c0:	187b      	adds	r3, r7, r1
 80012c2:	2210      	movs	r2, #16
 80012c4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c6:	187b      	adds	r3, r7, r1
 80012c8:	2202      	movs	r2, #2
 80012ca:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012cc:	187b      	adds	r3, r7, r1
 80012ce:	2200      	movs	r2, #0
 80012d0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 80012d2:	187b      	adds	r3, r7, r1
 80012d4:	2200      	movs	r2, #0
 80012d6:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80012d8:	187b      	adds	r3, r7, r1
 80012da:	2280      	movs	r2, #128	; 0x80
 80012dc:	03d2      	lsls	r2, r2, #15
 80012de:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e0:	187b      	adds	r3, r7, r1
 80012e2:	0018      	movs	r0, r3
 80012e4:	f000 fdfe 	bl	8001ee4 <HAL_RCC_OscConfig>
 80012e8:	1e03      	subs	r3, r0, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80012ec:	f000 f9c8 	bl	8001680 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	220f      	movs	r2, #15
 80012f4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2203      	movs	r2, #3
 80012fa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	2200      	movs	r2, #0
 8001306:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	2200      	movs	r2, #0
 800130c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	2101      	movs	r1, #1
 8001312:	0018      	movs	r0, r3
 8001314:	f001 f9ba 	bl	800268c <HAL_RCC_ClockConfig>
 8001318:	1e03      	subs	r3, r0, #0
 800131a:	d001      	beq.n	8001320 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800131c:	f000 f9b0 	bl	8001680 <Error_Handler>
  }
}
 8001320:	46c0      	nop			; (mov r8, r8)
 8001322:	46bd      	mov	sp, r7
 8001324:	b015      	add	sp, #84	; 0x54
 8001326:	bd90      	pop	{r4, r7, pc}
 8001328:	40007000 	.word	0x40007000
 800132c:	ffffe7ff 	.word	0xffffe7ff

08001330 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001336:	2308      	movs	r3, #8
 8001338:	18fb      	adds	r3, r7, r3
 800133a:	0018      	movs	r0, r3
 800133c:	2310      	movs	r3, #16
 800133e:	001a      	movs	r2, r3
 8001340:	2100      	movs	r1, #0
 8001342:	f002 f931 	bl	80035a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001346:	003b      	movs	r3, r7
 8001348:	0018      	movs	r0, r3
 800134a:	2308      	movs	r3, #8
 800134c:	001a      	movs	r2, r3
 800134e:	2100      	movs	r1, #0
 8001350:	f002 f92a 	bl	80035a8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001354:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <MX_TIM2_Init+0xa0>)
 8001356:	2280      	movs	r2, #128	; 0x80
 8001358:	05d2      	lsls	r2, r2, #23
 800135a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 23;
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <MX_TIM2_Init+0xa0>)
 800135e:	2217      	movs	r2, #23
 8001360:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001362:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <MX_TIM2_Init+0xa0>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <MX_TIM2_Init+0xa0>)
 800136a:	4a1a      	ldr	r2, [pc, #104]	; (80013d4 <MX_TIM2_Init+0xa4>)
 800136c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <MX_TIM2_Init+0xa0>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001374:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <MX_TIM2_Init+0xa0>)
 8001376:	2200      	movs	r2, #0
 8001378:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <MX_TIM2_Init+0xa0>)
 800137c:	0018      	movs	r0, r3
 800137e:	f001 fb73 	bl	8002a68 <HAL_TIM_Base_Init>
 8001382:	1e03      	subs	r3, r0, #0
 8001384:	d001      	beq.n	800138a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001386:	f000 f97b 	bl	8001680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800138a:	2108      	movs	r1, #8
 800138c:	187b      	adds	r3, r7, r1
 800138e:	2280      	movs	r2, #128	; 0x80
 8001390:	0152      	lsls	r2, r2, #5
 8001392:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001394:	187a      	adds	r2, r7, r1
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <MX_TIM2_Init+0xa0>)
 8001398:	0011      	movs	r1, r2
 800139a:	0018      	movs	r0, r3
 800139c:	f001 fd8e 	bl	8002ebc <HAL_TIM_ConfigClockSource>
 80013a0:	1e03      	subs	r3, r0, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80013a4:	f000 f96c 	bl	8001680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a8:	003b      	movs	r3, r7
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ae:	003b      	movs	r3, r7
 80013b0:	2200      	movs	r2, #0
 80013b2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013b4:	003a      	movs	r2, r7
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <MX_TIM2_Init+0xa0>)
 80013b8:	0011      	movs	r1, r2
 80013ba:	0018      	movs	r0, r3
 80013bc:	f002 f872 	bl	80034a4 <HAL_TIMEx_MasterConfigSynchronization>
 80013c0:	1e03      	subs	r3, r0, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80013c4:	f000 f95c 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013c8:	46c0      	nop			; (mov r8, r8)
 80013ca:	46bd      	mov	sp, r7
 80013cc:	b006      	add	sp, #24
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000028 	.word	0x20000028
 80013d4:	0000ffff 	.word	0x0000ffff

080013d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	; 0x28
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013de:	2318      	movs	r3, #24
 80013e0:	18fb      	adds	r3, r7, r3
 80013e2:	0018      	movs	r0, r3
 80013e4:	2310      	movs	r3, #16
 80013e6:	001a      	movs	r2, r3
 80013e8:	2100      	movs	r1, #0
 80013ea:	f002 f8dd 	bl	80035a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ee:	2310      	movs	r3, #16
 80013f0:	18fb      	adds	r3, r7, r3
 80013f2:	0018      	movs	r0, r3
 80013f4:	2308      	movs	r3, #8
 80013f6:	001a      	movs	r2, r3
 80013f8:	2100      	movs	r1, #0
 80013fa:	f002 f8d5 	bl	80035a8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013fe:	003b      	movs	r3, r7
 8001400:	0018      	movs	r0, r3
 8001402:	2310      	movs	r3, #16
 8001404:	001a      	movs	r2, r3
 8001406:	2100      	movs	r1, #0
 8001408:	f002 f8ce 	bl	80035a8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800140c:	4b30      	ldr	r3, [pc, #192]	; (80014d0 <MX_TIM3_Init+0xf8>)
 800140e:	4a31      	ldr	r2, [pc, #196]	; (80014d4 <MX_TIM3_Init+0xfc>)
 8001410:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 355;
 8001412:	4b2f      	ldr	r3, [pc, #188]	; (80014d0 <MX_TIM3_Init+0xf8>)
 8001414:	2264      	movs	r2, #100	; 0x64
 8001416:	32ff      	adds	r2, #255	; 0xff
 8001418:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141a:	4b2d      	ldr	r3, [pc, #180]	; (80014d0 <MX_TIM3_Init+0xf8>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001420:	4b2b      	ldr	r3, [pc, #172]	; (80014d0 <MX_TIM3_Init+0xf8>)
 8001422:	4a2d      	ldr	r2, [pc, #180]	; (80014d8 <MX_TIM3_Init+0x100>)
 8001424:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001426:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <MX_TIM3_Init+0xf8>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142c:	4b28      	ldr	r3, [pc, #160]	; (80014d0 <MX_TIM3_Init+0xf8>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001432:	4b27      	ldr	r3, [pc, #156]	; (80014d0 <MX_TIM3_Init+0xf8>)
 8001434:	0018      	movs	r0, r3
 8001436:	f001 fb17 	bl	8002a68 <HAL_TIM_Base_Init>
 800143a:	1e03      	subs	r3, r0, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800143e:	f000 f91f 	bl	8001680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001442:	2118      	movs	r1, #24
 8001444:	187b      	adds	r3, r7, r1
 8001446:	2280      	movs	r2, #128	; 0x80
 8001448:	0152      	lsls	r2, r2, #5
 800144a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800144c:	187a      	adds	r2, r7, r1
 800144e:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <MX_TIM3_Init+0xf8>)
 8001450:	0011      	movs	r1, r2
 8001452:	0018      	movs	r0, r3
 8001454:	f001 fd32 	bl	8002ebc <HAL_TIM_ConfigClockSource>
 8001458:	1e03      	subs	r3, r0, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 800145c:	f000 f910 	bl	8001680 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001460:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <MX_TIM3_Init+0xf8>)
 8001462:	0018      	movs	r0, r3
 8001464:	f001 fb8a 	bl	8002b7c <HAL_TIM_PWM_Init>
 8001468:	1e03      	subs	r3, r0, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800146c:	f000 f908 	bl	8001680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001470:	2110      	movs	r1, #16
 8001472:	187b      	adds	r3, r7, r1
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001478:	187b      	adds	r3, r7, r1
 800147a:	2200      	movs	r2, #0
 800147c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800147e:	187a      	adds	r2, r7, r1
 8001480:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <MX_TIM3_Init+0xf8>)
 8001482:	0011      	movs	r1, r2
 8001484:	0018      	movs	r0, r3
 8001486:	f002 f80d 	bl	80034a4 <HAL_TIMEx_MasterConfigSynchronization>
 800148a:	1e03      	subs	r3, r0, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 800148e:	f000 f8f7 	bl	8001680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001492:	003b      	movs	r3, r7
 8001494:	2260      	movs	r2, #96	; 0x60
 8001496:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001498:	003b      	movs	r3, r7
 800149a:	2200      	movs	r2, #0
 800149c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800149e:	003b      	movs	r3, r7
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a4:	003b      	movs	r3, r7
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014aa:	0039      	movs	r1, r7
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <MX_TIM3_Init+0xf8>)
 80014ae:	2208      	movs	r2, #8
 80014b0:	0018      	movs	r0, r3
 80014b2:	f001 fc3d 	bl	8002d30 <HAL_TIM_PWM_ConfigChannel>
 80014b6:	1e03      	subs	r3, r0, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80014ba:	f000 f8e1 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014be:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <MX_TIM3_Init+0xf8>)
 80014c0:	0018      	movs	r0, r3
 80014c2:	f000 f91b 	bl	80016fc <HAL_TIM_MspPostInit>

}
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	46bd      	mov	sp, r7
 80014ca:	b00a      	add	sp, #40	; 0x28
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	20000068 	.word	0x20000068
 80014d4:	40000400 	.word	0x40000400
 80014d8:	0000ffff 	.word	0x0000ffff

080014dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014dc:	b590      	push	{r4, r7, lr}
 80014de:	b08b      	sub	sp, #44	; 0x2c
 80014e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e2:	2414      	movs	r4, #20
 80014e4:	193b      	adds	r3, r7, r4
 80014e6:	0018      	movs	r0, r3
 80014e8:	2314      	movs	r3, #20
 80014ea:	001a      	movs	r2, r3
 80014ec:	2100      	movs	r1, #0
 80014ee:	f002 f85b 	bl	80035a8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f2:	4b60      	ldr	r3, [pc, #384]	; (8001674 <MX_GPIO_Init+0x198>)
 80014f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014f6:	4b5f      	ldr	r3, [pc, #380]	; (8001674 <MX_GPIO_Init+0x198>)
 80014f8:	2104      	movs	r1, #4
 80014fa:	430a      	orrs	r2, r1
 80014fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80014fe:	4b5d      	ldr	r3, [pc, #372]	; (8001674 <MX_GPIO_Init+0x198>)
 8001500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001502:	2204      	movs	r2, #4
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800150a:	4b5a      	ldr	r3, [pc, #360]	; (8001674 <MX_GPIO_Init+0x198>)
 800150c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800150e:	4b59      	ldr	r3, [pc, #356]	; (8001674 <MX_GPIO_Init+0x198>)
 8001510:	2180      	movs	r1, #128	; 0x80
 8001512:	430a      	orrs	r2, r1
 8001514:	62da      	str	r2, [r3, #44]	; 0x2c
 8001516:	4b57      	ldr	r3, [pc, #348]	; (8001674 <MX_GPIO_Init+0x198>)
 8001518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151a:	2280      	movs	r2, #128	; 0x80
 800151c:	4013      	ands	r3, r2
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	4b54      	ldr	r3, [pc, #336]	; (8001674 <MX_GPIO_Init+0x198>)
 8001524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001526:	4b53      	ldr	r3, [pc, #332]	; (8001674 <MX_GPIO_Init+0x198>)
 8001528:	2101      	movs	r1, #1
 800152a:	430a      	orrs	r2, r1
 800152c:	62da      	str	r2, [r3, #44]	; 0x2c
 800152e:	4b51      	ldr	r3, [pc, #324]	; (8001674 <MX_GPIO_Init+0x198>)
 8001530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001532:	2201      	movs	r2, #1
 8001534:	4013      	ands	r3, r2
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	4b4e      	ldr	r3, [pc, #312]	; (8001674 <MX_GPIO_Init+0x198>)
 800153c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800153e:	4b4d      	ldr	r3, [pc, #308]	; (8001674 <MX_GPIO_Init+0x198>)
 8001540:	2102      	movs	r1, #2
 8001542:	430a      	orrs	r2, r1
 8001544:	62da      	str	r2, [r3, #44]	; 0x2c
 8001546:	4b4b      	ldr	r3, [pc, #300]	; (8001674 <MX_GPIO_Init+0x198>)
 8001548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154a:	2202      	movs	r2, #2
 800154c:	4013      	ands	r3, r2
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8001552:	2388      	movs	r3, #136	; 0x88
 8001554:	0099      	lsls	r1, r3, #2
 8001556:	23a0      	movs	r3, #160	; 0xa0
 8001558:	05db      	lsls	r3, r3, #23
 800155a:	2200      	movs	r2, #0
 800155c:	0018      	movs	r0, r3
 800155e:	f000 fc6c 	bl	8001e3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001562:	2386      	movs	r3, #134	; 0x86
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	4844      	ldr	r0, [pc, #272]	; (8001678 <MX_GPIO_Init+0x19c>)
 8001568:	2200      	movs	r2, #0
 800156a:	0019      	movs	r1, r3
 800156c:	f000 fc65 	bl	8001e3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001570:	193b      	adds	r3, r7, r4
 8001572:	2280      	movs	r2, #128	; 0x80
 8001574:	0192      	lsls	r2, r2, #6
 8001576:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001578:	193b      	adds	r3, r7, r4
 800157a:	2284      	movs	r2, #132	; 0x84
 800157c:	0392      	lsls	r2, r2, #14
 800157e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	193b      	adds	r3, r7, r4
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001586:	193b      	adds	r3, r7, r4
 8001588:	4a3c      	ldr	r2, [pc, #240]	; (800167c <MX_GPIO_Init+0x1a0>)
 800158a:	0019      	movs	r1, r3
 800158c:	0010      	movs	r0, r2
 800158e:	f000 fab9 	bl	8001b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001592:	193b      	adds	r3, r7, r4
 8001594:	220c      	movs	r2, #12
 8001596:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	193b      	adds	r3, r7, r4
 800159a:	2202      	movs	r2, #2
 800159c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	193b      	adds	r3, r7, r4
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a4:	193b      	adds	r3, r7, r4
 80015a6:	2203      	movs	r2, #3
 80015a8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80015aa:	193b      	adds	r3, r7, r4
 80015ac:	2204      	movs	r2, #4
 80015ae:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b0:	193a      	adds	r2, r7, r4
 80015b2:	23a0      	movs	r3, #160	; 0xa0
 80015b4:	05db      	lsls	r3, r3, #23
 80015b6:	0011      	movs	r1, r2
 80015b8:	0018      	movs	r0, r3
 80015ba:	f000 faa3 	bl	8001b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 80015be:	0021      	movs	r1, r4
 80015c0:	187b      	adds	r3, r7, r1
 80015c2:	2288      	movs	r2, #136	; 0x88
 80015c4:	0092      	lsls	r2, r2, #2
 80015c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c8:	000c      	movs	r4, r1
 80015ca:	193b      	adds	r3, r7, r4
 80015cc:	2201      	movs	r2, #1
 80015ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	193b      	adds	r3, r7, r4
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	193b      	adds	r3, r7, r4
 80015d8:	2200      	movs	r2, #0
 80015da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015dc:	193a      	adds	r2, r7, r4
 80015de:	23a0      	movs	r3, #160	; 0xa0
 80015e0:	05db      	lsls	r3, r3, #23
 80015e2:	0011      	movs	r1, r2
 80015e4:	0018      	movs	r0, r3
 80015e6:	f000 fa8d 	bl	8001b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 80015ea:	0021      	movs	r1, r4
 80015ec:	187b      	adds	r3, r7, r1
 80015ee:	2286      	movs	r2, #134	; 0x86
 80015f0:	00d2      	lsls	r2, r2, #3
 80015f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f4:	000c      	movs	r4, r1
 80015f6:	193b      	adds	r3, r7, r4
 80015f8:	2201      	movs	r2, #1
 80015fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	193b      	adds	r3, r7, r4
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	193b      	adds	r3, r7, r4
 8001604:	2200      	movs	r2, #0
 8001606:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001608:	193b      	adds	r3, r7, r4
 800160a:	4a1b      	ldr	r2, [pc, #108]	; (8001678 <MX_GPIO_Init+0x19c>)
 800160c:	0019      	movs	r1, r3
 800160e:	0010      	movs	r0, r2
 8001610:	f000 fa78 	bl	8001b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001614:	0021      	movs	r1, r4
 8001616:	187b      	adds	r3, r7, r1
 8001618:	2280      	movs	r2, #128	; 0x80
 800161a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800161c:	187b      	adds	r3, r7, r1
 800161e:	2288      	movs	r2, #136	; 0x88
 8001620:	0352      	lsls	r2, r2, #13
 8001622:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001624:	187b      	adds	r3, r7, r1
 8001626:	2202      	movs	r2, #2
 8001628:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162a:	000c      	movs	r4, r1
 800162c:	187b      	adds	r3, r7, r1
 800162e:	4a13      	ldr	r2, [pc, #76]	; (800167c <MX_GPIO_Init+0x1a0>)
 8001630:	0019      	movs	r1, r3
 8001632:	0010      	movs	r0, r2
 8001634:	f000 fa66 	bl	8001b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001638:	0021      	movs	r1, r4
 800163a:	187b      	adds	r3, r7, r1
 800163c:	2280      	movs	r2, #128	; 0x80
 800163e:	0052      	lsls	r2, r2, #1
 8001640:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001642:	187b      	adds	r3, r7, r1
 8001644:	2200      	movs	r2, #0
 8001646:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	187b      	adds	r3, r7, r1
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164e:	187a      	adds	r2, r7, r1
 8001650:	23a0      	movs	r3, #160	; 0xa0
 8001652:	05db      	lsls	r3, r3, #23
 8001654:	0011      	movs	r1, r2
 8001656:	0018      	movs	r0, r3
 8001658:	f000 fa54 	bl	8001b04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800165c:	2200      	movs	r2, #0
 800165e:	2100      	movs	r1, #0
 8001660:	2007      	movs	r0, #7
 8001662:	f000 fa1d 	bl	8001aa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001666:	2007      	movs	r0, #7
 8001668:	f000 fa2f 	bl	8001aca <HAL_NVIC_EnableIRQ>

}
 800166c:	46c0      	nop			; (mov r8, r8)
 800166e:	46bd      	mov	sp, r7
 8001670:	b00b      	add	sp, #44	; 0x2c
 8001672:	bd90      	pop	{r4, r7, pc}
 8001674:	40021000 	.word	0x40021000
 8001678:	50000400 	.word	0x50000400
 800167c:	50000800 	.word	0x50000800

08001680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001684:	b672      	cpsid	i
}
 8001686:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001688:	e7fe      	b.n	8001688 <Error_Handler+0x8>
	...

0800168c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <HAL_MspInit+0x24>)
 8001692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_MspInit+0x24>)
 8001696:	2101      	movs	r1, #1
 8001698:	430a      	orrs	r2, r1
 800169a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800169c:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <HAL_MspInit+0x24>)
 800169e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016a0:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <HAL_MspInit+0x24>)
 80016a2:	2180      	movs	r1, #128	; 0x80
 80016a4:	0549      	lsls	r1, r1, #21
 80016a6:	430a      	orrs	r2, r1
 80016a8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40021000 	.word	0x40021000

080016b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	2380      	movs	r3, #128	; 0x80
 80016c2:	05db      	lsls	r3, r3, #23
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d106      	bne.n	80016d6 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016c8:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <HAL_TIM_Base_MspInit+0x40>)
 80016ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_TIM_Base_MspInit+0x40>)
 80016ce:	2101      	movs	r1, #1
 80016d0:	430a      	orrs	r2, r1
 80016d2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016d4:	e00a      	b.n	80016ec <HAL_TIM_Base_MspInit+0x38>
  else if(htim_base->Instance==TIM3)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a07      	ldr	r2, [pc, #28]	; (80016f8 <HAL_TIM_Base_MspInit+0x44>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d105      	bne.n	80016ec <HAL_TIM_Base_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <HAL_TIM_Base_MspInit+0x40>)
 80016e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016e4:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <HAL_TIM_Base_MspInit+0x40>)
 80016e6:	2102      	movs	r1, #2
 80016e8:	430a      	orrs	r2, r1
 80016ea:	639a      	str	r2, [r3, #56]	; 0x38
}
 80016ec:	46c0      	nop			; (mov r8, r8)
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b002      	add	sp, #8
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40000400 	.word	0x40000400

080016fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016fc:	b590      	push	{r4, r7, lr}
 80016fe:	b089      	sub	sp, #36	; 0x24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	240c      	movs	r4, #12
 8001706:	193b      	adds	r3, r7, r4
 8001708:	0018      	movs	r0, r3
 800170a:	2314      	movs	r3, #20
 800170c:	001a      	movs	r2, r3
 800170e:	2100      	movs	r1, #0
 8001710:	f001 ff4a 	bl	80035a8 <memset>
  if(htim->Instance==TIM3)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a14      	ldr	r2, [pc, #80]	; (800176c <HAL_TIM_MspPostInit+0x70>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d121      	bne.n	8001762 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800171e:	4b14      	ldr	r3, [pc, #80]	; (8001770 <HAL_TIM_MspPostInit+0x74>)
 8001720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001722:	4b13      	ldr	r3, [pc, #76]	; (8001770 <HAL_TIM_MspPostInit+0x74>)
 8001724:	2102      	movs	r1, #2
 8001726:	430a      	orrs	r2, r1
 8001728:	62da      	str	r2, [r3, #44]	; 0x2c
 800172a:	4b11      	ldr	r3, [pc, #68]	; (8001770 <HAL_TIM_MspPostInit+0x74>)
 800172c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172e:	2202      	movs	r2, #2
 8001730:	4013      	ands	r3, r2
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001736:	0021      	movs	r1, r4
 8001738:	187b      	adds	r3, r7, r1
 800173a:	2201      	movs	r2, #1
 800173c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	187b      	adds	r3, r7, r1
 8001740:	2202      	movs	r2, #2
 8001742:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	187b      	adds	r3, r7, r1
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	187b      	adds	r3, r7, r1
 800174c:	2200      	movs	r2, #0
 800174e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001750:	187b      	adds	r3, r7, r1
 8001752:	2202      	movs	r2, #2
 8001754:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001756:	187b      	adds	r3, r7, r1
 8001758:	4a06      	ldr	r2, [pc, #24]	; (8001774 <HAL_TIM_MspPostInit+0x78>)
 800175a:	0019      	movs	r1, r3
 800175c:	0010      	movs	r0, r2
 800175e:	f000 f9d1 	bl	8001b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	46bd      	mov	sp, r7
 8001766:	b009      	add	sp, #36	; 0x24
 8001768:	bd90      	pop	{r4, r7, pc}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	40000400 	.word	0x40000400
 8001770:	40021000 	.word	0x40021000
 8001774:	50000400 	.word	0x50000400

08001778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800177c:	e7fe      	b.n	800177c <NMI_Handler+0x4>

0800177e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001782:	e7fe      	b.n	8001782 <HardFault_Handler+0x4>

08001784 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001788:	46c0      	nop			; (mov r8, r8)
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800179c:	f000 f894 	bl	80018c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a0:	46c0      	nop			; (mov r8, r8)
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80017aa:	2080      	movs	r0, #128	; 0x80
 80017ac:	f000 fb7e 	bl	8001eac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80017b0:	2380      	movs	r3, #128	; 0x80
 80017b2:	019b      	lsls	r3, r3, #6
 80017b4:	0018      	movs	r0, r3
 80017b6:	f000 fb79 	bl	8001eac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017c4:	46c0      	nop			; (mov r8, r8)
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80017cc:	480d      	ldr	r0, [pc, #52]	; (8001804 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80017ce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017d0:	480d      	ldr	r0, [pc, #52]	; (8001808 <LoopForever+0x6>)
  ldr r1, =_edata
 80017d2:	490e      	ldr	r1, [pc, #56]	; (800180c <LoopForever+0xa>)
  ldr r2, =_sidata
 80017d4:	4a0e      	ldr	r2, [pc, #56]	; (8001810 <LoopForever+0xe>)
  movs r3, #0
 80017d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d8:	e002      	b.n	80017e0 <LoopCopyDataInit>

080017da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017de:	3304      	adds	r3, #4

080017e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e4:	d3f9      	bcc.n	80017da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017e6:	4a0b      	ldr	r2, [pc, #44]	; (8001814 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017e8:	4c0b      	ldr	r4, [pc, #44]	; (8001818 <LoopForever+0x16>)
  movs r3, #0
 80017ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017ec:	e001      	b.n	80017f2 <LoopFillZerobss>

080017ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f0:	3204      	adds	r2, #4

080017f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f4:	d3fb      	bcc.n	80017ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80017f6:	f7ff ffe3 	bl	80017c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017fa:	f001 feb1 	bl	8003560 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017fe:	f7ff fc39 	bl	8001074 <main>

08001802 <LoopForever>:

LoopForever:
    b LoopForever
 8001802:	e7fe      	b.n	8001802 <LoopForever>
   ldr   r0, =_estack
 8001804:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800180c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001810:	0800367c 	.word	0x0800367c
  ldr r2, =_sbss
 8001814:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001818:	200000c0 	.word	0x200000c0

0800181c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800181c:	e7fe      	b.n	800181c <ADC1_COMP_IRQHandler>
	...

08001820 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001826:	1dfb      	adds	r3, r7, #7
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <HAL_Init+0x3c>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b0a      	ldr	r3, [pc, #40]	; (800185c <HAL_Init+0x3c>)
 8001832:	2140      	movs	r1, #64	; 0x40
 8001834:	430a      	orrs	r2, r1
 8001836:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001838:	2000      	movs	r0, #0
 800183a:	f000 f811 	bl	8001860 <HAL_InitTick>
 800183e:	1e03      	subs	r3, r0, #0
 8001840:	d003      	beq.n	800184a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001842:	1dfb      	adds	r3, r7, #7
 8001844:	2201      	movs	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]
 8001848:	e001      	b.n	800184e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800184a:	f7ff ff1f 	bl	800168c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800184e:	1dfb      	adds	r3, r7, #7
 8001850:	781b      	ldrb	r3, [r3, #0]
}
 8001852:	0018      	movs	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	b002      	add	sp, #8
 8001858:	bd80      	pop	{r7, pc}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	40022000 	.word	0x40022000

08001860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001860:	b590      	push	{r4, r7, lr}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <HAL_InitTick+0x5c>)
 800186a:	681c      	ldr	r4, [r3, #0]
 800186c:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <HAL_InitTick+0x60>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	0019      	movs	r1, r3
 8001872:	23fa      	movs	r3, #250	; 0xfa
 8001874:	0098      	lsls	r0, r3, #2
 8001876:	f7fe fc47 	bl	8000108 <__udivsi3>
 800187a:	0003      	movs	r3, r0
 800187c:	0019      	movs	r1, r3
 800187e:	0020      	movs	r0, r4
 8001880:	f7fe fc42 	bl	8000108 <__udivsi3>
 8001884:	0003      	movs	r3, r0
 8001886:	0018      	movs	r0, r3
 8001888:	f000 f92f 	bl	8001aea <HAL_SYSTICK_Config>
 800188c:	1e03      	subs	r3, r0, #0
 800188e:	d001      	beq.n	8001894 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e00f      	b.n	80018b4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b03      	cmp	r3, #3
 8001898:	d80b      	bhi.n	80018b2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	2301      	movs	r3, #1
 800189e:	425b      	negs	r3, r3
 80018a0:	2200      	movs	r2, #0
 80018a2:	0018      	movs	r0, r3
 80018a4:	f000 f8fc 	bl	8001aa0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_InitTick+0x64>)
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e000      	b.n	80018b4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
}
 80018b4:	0018      	movs	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	b003      	add	sp, #12
 80018ba:	bd90      	pop	{r4, r7, pc}
 80018bc:	20000000 	.word	0x20000000
 80018c0:	20000008 	.word	0x20000008
 80018c4:	20000004 	.word	0x20000004

080018c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <HAL_IncTick+0x1c>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	001a      	movs	r2, r3
 80018d2:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <HAL_IncTick+0x20>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	18d2      	adds	r2, r2, r3
 80018d8:	4b03      	ldr	r3, [pc, #12]	; (80018e8 <HAL_IncTick+0x20>)
 80018da:	601a      	str	r2, [r3, #0]
}
 80018dc:	46c0      	nop			; (mov r8, r8)
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	20000008 	.word	0x20000008
 80018e8:	200000bc 	.word	0x200000bc

080018ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  return uwTick;
 80018f0:	4b02      	ldr	r3, [pc, #8]	; (80018fc <HAL_GetTick+0x10>)
 80018f2:	681b      	ldr	r3, [r3, #0]
}
 80018f4:	0018      	movs	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	200000bc 	.word	0x200000bc

08001900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001908:	f7ff fff0 	bl	80018ec <HAL_GetTick>
 800190c:	0003      	movs	r3, r0
 800190e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	3301      	adds	r3, #1
 8001918:	d005      	beq.n	8001926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <HAL_Delay+0x44>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	001a      	movs	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	189b      	adds	r3, r3, r2
 8001924:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	f7ff ffe0 	bl	80018ec <HAL_GetTick>
 800192c:	0002      	movs	r2, r0
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	429a      	cmp	r2, r3
 8001936:	d8f7      	bhi.n	8001928 <HAL_Delay+0x28>
  {
  }
}
 8001938:	46c0      	nop			; (mov r8, r8)
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	46bd      	mov	sp, r7
 800193e:	b004      	add	sp, #16
 8001940:	bd80      	pop	{r7, pc}
 8001942:	46c0      	nop			; (mov r8, r8)
 8001944:	20000008 	.word	0x20000008

08001948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	0002      	movs	r2, r0
 8001950:	1dfb      	adds	r3, r7, #7
 8001952:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001954:	1dfb      	adds	r3, r7, #7
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b7f      	cmp	r3, #127	; 0x7f
 800195a:	d809      	bhi.n	8001970 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800195c:	1dfb      	adds	r3, r7, #7
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	001a      	movs	r2, r3
 8001962:	231f      	movs	r3, #31
 8001964:	401a      	ands	r2, r3
 8001966:	4b04      	ldr	r3, [pc, #16]	; (8001978 <__NVIC_EnableIRQ+0x30>)
 8001968:	2101      	movs	r1, #1
 800196a:	4091      	lsls	r1, r2
 800196c:	000a      	movs	r2, r1
 800196e:	601a      	str	r2, [r3, #0]
  }
}
 8001970:	46c0      	nop			; (mov r8, r8)
 8001972:	46bd      	mov	sp, r7
 8001974:	b002      	add	sp, #8
 8001976:	bd80      	pop	{r7, pc}
 8001978:	e000e100 	.word	0xe000e100

0800197c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800197c:	b590      	push	{r4, r7, lr}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	0002      	movs	r2, r0
 8001984:	6039      	str	r1, [r7, #0]
 8001986:	1dfb      	adds	r3, r7, #7
 8001988:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800198a:	1dfb      	adds	r3, r7, #7
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b7f      	cmp	r3, #127	; 0x7f
 8001990:	d828      	bhi.n	80019e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001992:	4a2f      	ldr	r2, [pc, #188]	; (8001a50 <__NVIC_SetPriority+0xd4>)
 8001994:	1dfb      	adds	r3, r7, #7
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	b25b      	sxtb	r3, r3
 800199a:	089b      	lsrs	r3, r3, #2
 800199c:	33c0      	adds	r3, #192	; 0xc0
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	589b      	ldr	r3, [r3, r2]
 80019a2:	1dfa      	adds	r2, r7, #7
 80019a4:	7812      	ldrb	r2, [r2, #0]
 80019a6:	0011      	movs	r1, r2
 80019a8:	2203      	movs	r2, #3
 80019aa:	400a      	ands	r2, r1
 80019ac:	00d2      	lsls	r2, r2, #3
 80019ae:	21ff      	movs	r1, #255	; 0xff
 80019b0:	4091      	lsls	r1, r2
 80019b2:	000a      	movs	r2, r1
 80019b4:	43d2      	mvns	r2, r2
 80019b6:	401a      	ands	r2, r3
 80019b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	019b      	lsls	r3, r3, #6
 80019be:	22ff      	movs	r2, #255	; 0xff
 80019c0:	401a      	ands	r2, r3
 80019c2:	1dfb      	adds	r3, r7, #7
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	0018      	movs	r0, r3
 80019c8:	2303      	movs	r3, #3
 80019ca:	4003      	ands	r3, r0
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019d0:	481f      	ldr	r0, [pc, #124]	; (8001a50 <__NVIC_SetPriority+0xd4>)
 80019d2:	1dfb      	adds	r3, r7, #7
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	b25b      	sxtb	r3, r3
 80019d8:	089b      	lsrs	r3, r3, #2
 80019da:	430a      	orrs	r2, r1
 80019dc:	33c0      	adds	r3, #192	; 0xc0
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80019e2:	e031      	b.n	8001a48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019e4:	4a1b      	ldr	r2, [pc, #108]	; (8001a54 <__NVIC_SetPriority+0xd8>)
 80019e6:	1dfb      	adds	r3, r7, #7
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	0019      	movs	r1, r3
 80019ec:	230f      	movs	r3, #15
 80019ee:	400b      	ands	r3, r1
 80019f0:	3b08      	subs	r3, #8
 80019f2:	089b      	lsrs	r3, r3, #2
 80019f4:	3306      	adds	r3, #6
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	18d3      	adds	r3, r2, r3
 80019fa:	3304      	adds	r3, #4
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	1dfa      	adds	r2, r7, #7
 8001a00:	7812      	ldrb	r2, [r2, #0]
 8001a02:	0011      	movs	r1, r2
 8001a04:	2203      	movs	r2, #3
 8001a06:	400a      	ands	r2, r1
 8001a08:	00d2      	lsls	r2, r2, #3
 8001a0a:	21ff      	movs	r1, #255	; 0xff
 8001a0c:	4091      	lsls	r1, r2
 8001a0e:	000a      	movs	r2, r1
 8001a10:	43d2      	mvns	r2, r2
 8001a12:	401a      	ands	r2, r3
 8001a14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	019b      	lsls	r3, r3, #6
 8001a1a:	22ff      	movs	r2, #255	; 0xff
 8001a1c:	401a      	ands	r2, r3
 8001a1e:	1dfb      	adds	r3, r7, #7
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	0018      	movs	r0, r3
 8001a24:	2303      	movs	r3, #3
 8001a26:	4003      	ands	r3, r0
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a2c:	4809      	ldr	r0, [pc, #36]	; (8001a54 <__NVIC_SetPriority+0xd8>)
 8001a2e:	1dfb      	adds	r3, r7, #7
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	001c      	movs	r4, r3
 8001a34:	230f      	movs	r3, #15
 8001a36:	4023      	ands	r3, r4
 8001a38:	3b08      	subs	r3, #8
 8001a3a:	089b      	lsrs	r3, r3, #2
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	3306      	adds	r3, #6
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	18c3      	adds	r3, r0, r3
 8001a44:	3304      	adds	r3, #4
 8001a46:	601a      	str	r2, [r3, #0]
}
 8001a48:	46c0      	nop			; (mov r8, r8)
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	b003      	add	sp, #12
 8001a4e:	bd90      	pop	{r4, r7, pc}
 8001a50:	e000e100 	.word	0xe000e100
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	1e5a      	subs	r2, r3, #1
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	045b      	lsls	r3, r3, #17
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d301      	bcc.n	8001a70 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e010      	b.n	8001a92 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a70:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <SysTick_Config+0x44>)
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	3a01      	subs	r2, #1
 8001a76:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a78:	2301      	movs	r3, #1
 8001a7a:	425b      	negs	r3, r3
 8001a7c:	2103      	movs	r1, #3
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f7ff ff7c 	bl	800197c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <SysTick_Config+0x44>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8a:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <SysTick_Config+0x44>)
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	0018      	movs	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	b002      	add	sp, #8
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	e000e010 	.word	0xe000e010

08001aa0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	210f      	movs	r1, #15
 8001aac:	187b      	adds	r3, r7, r1
 8001aae:	1c02      	adds	r2, r0, #0
 8001ab0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	187b      	adds	r3, r7, r1
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	b25b      	sxtb	r3, r3
 8001aba:	0011      	movs	r1, r2
 8001abc:	0018      	movs	r0, r3
 8001abe:	f7ff ff5d 	bl	800197c <__NVIC_SetPriority>
}
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	b004      	add	sp, #16
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	0002      	movs	r2, r0
 8001ad2:	1dfb      	adds	r3, r7, #7
 8001ad4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad6:	1dfb      	adds	r3, r7, #7
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	b25b      	sxtb	r3, r3
 8001adc:	0018      	movs	r0, r3
 8001ade:	f7ff ff33 	bl	8001948 <__NVIC_EnableIRQ>
}
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b002      	add	sp, #8
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	0018      	movs	r0, r3
 8001af6:	f7ff ffaf 	bl	8001a58 <SysTick_Config>
 8001afa:	0003      	movs	r3, r0
}
 8001afc:	0018      	movs	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	b002      	add	sp, #8
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001b1a:	e155      	b.n	8001dc8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2101      	movs	r1, #1
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	4091      	lsls	r1, r2
 8001b26:	000a      	movs	r2, r1
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d100      	bne.n	8001b34 <HAL_GPIO_Init+0x30>
 8001b32:	e146      	b.n	8001dc2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2203      	movs	r2, #3
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d005      	beq.n	8001b4c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2203      	movs	r2, #3
 8001b46:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d130      	bne.n	8001bae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	2203      	movs	r2, #3
 8001b58:	409a      	lsls	r2, r3
 8001b5a:	0013      	movs	r3, r2
 8001b5c:	43da      	mvns	r2, r3
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	68da      	ldr	r2, [r3, #12]
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	0013      	movs	r3, r2
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b82:	2201      	movs	r2, #1
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	409a      	lsls	r2, r3
 8001b88:	0013      	movs	r3, r2
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	091b      	lsrs	r3, r3, #4
 8001b98:	2201      	movs	r2, #1
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	0013      	movs	r3, r2
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	d017      	beq.n	8001bea <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	409a      	lsls	r2, r3
 8001bc8:	0013      	movs	r3, r2
 8001bca:	43da      	mvns	r2, r3
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	409a      	lsls	r2, r3
 8001bdc:	0013      	movs	r3, r2
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2203      	movs	r2, #3
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d123      	bne.n	8001c3e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	08da      	lsrs	r2, r3, #3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3208      	adds	r2, #8
 8001bfe:	0092      	lsls	r2, r2, #2
 8001c00:	58d3      	ldr	r3, [r2, r3]
 8001c02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	2207      	movs	r2, #7
 8001c08:	4013      	ands	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	220f      	movs	r2, #15
 8001c0e:	409a      	lsls	r2, r3
 8001c10:	0013      	movs	r3, r2
 8001c12:	43da      	mvns	r2, r3
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	4013      	ands	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	691a      	ldr	r2, [r3, #16]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	2107      	movs	r1, #7
 8001c22:	400b      	ands	r3, r1
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	409a      	lsls	r2, r3
 8001c28:	0013      	movs	r3, r2
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	08da      	lsrs	r2, r3, #3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3208      	adds	r2, #8
 8001c38:	0092      	lsls	r2, r2, #2
 8001c3a:	6939      	ldr	r1, [r7, #16]
 8001c3c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	2203      	movs	r2, #3
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	0013      	movs	r3, r2
 8001c4e:	43da      	mvns	r2, r3
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	4013      	ands	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	401a      	ands	r2, r3
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	409a      	lsls	r2, r3
 8001c64:	0013      	movs	r3, r2
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	23c0      	movs	r3, #192	; 0xc0
 8001c78:	029b      	lsls	r3, r3, #10
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d100      	bne.n	8001c80 <HAL_GPIO_Init+0x17c>
 8001c7e:	e0a0      	b.n	8001dc2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c80:	4b57      	ldr	r3, [pc, #348]	; (8001de0 <HAL_GPIO_Init+0x2dc>)
 8001c82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c84:	4b56      	ldr	r3, [pc, #344]	; (8001de0 <HAL_GPIO_Init+0x2dc>)
 8001c86:	2101      	movs	r1, #1
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c8c:	4a55      	ldr	r2, [pc, #340]	; (8001de4 <HAL_GPIO_Init+0x2e0>)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	089b      	lsrs	r3, r3, #2
 8001c92:	3302      	adds	r3, #2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	589b      	ldr	r3, [r3, r2]
 8001c98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	220f      	movs	r2, #15
 8001ca4:	409a      	lsls	r2, r3
 8001ca6:	0013      	movs	r3, r2
 8001ca8:	43da      	mvns	r2, r3
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	23a0      	movs	r3, #160	; 0xa0
 8001cb4:	05db      	lsls	r3, r3, #23
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d01f      	beq.n	8001cfa <HAL_GPIO_Init+0x1f6>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a4a      	ldr	r2, [pc, #296]	; (8001de8 <HAL_GPIO_Init+0x2e4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d019      	beq.n	8001cf6 <HAL_GPIO_Init+0x1f2>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a49      	ldr	r2, [pc, #292]	; (8001dec <HAL_GPIO_Init+0x2e8>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d013      	beq.n	8001cf2 <HAL_GPIO_Init+0x1ee>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a48      	ldr	r2, [pc, #288]	; (8001df0 <HAL_GPIO_Init+0x2ec>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d00d      	beq.n	8001cee <HAL_GPIO_Init+0x1ea>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a47      	ldr	r2, [pc, #284]	; (8001df4 <HAL_GPIO_Init+0x2f0>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d007      	beq.n	8001cea <HAL_GPIO_Init+0x1e6>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a46      	ldr	r2, [pc, #280]	; (8001df8 <HAL_GPIO_Init+0x2f4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d101      	bne.n	8001ce6 <HAL_GPIO_Init+0x1e2>
 8001ce2:	2305      	movs	r3, #5
 8001ce4:	e00a      	b.n	8001cfc <HAL_GPIO_Init+0x1f8>
 8001ce6:	2306      	movs	r3, #6
 8001ce8:	e008      	b.n	8001cfc <HAL_GPIO_Init+0x1f8>
 8001cea:	2304      	movs	r3, #4
 8001cec:	e006      	b.n	8001cfc <HAL_GPIO_Init+0x1f8>
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e004      	b.n	8001cfc <HAL_GPIO_Init+0x1f8>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e002      	b.n	8001cfc <HAL_GPIO_Init+0x1f8>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <HAL_GPIO_Init+0x1f8>
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	2103      	movs	r1, #3
 8001d00:	400a      	ands	r2, r1
 8001d02:	0092      	lsls	r2, r2, #2
 8001d04:	4093      	lsls	r3, r2
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d0c:	4935      	ldr	r1, [pc, #212]	; (8001de4 <HAL_GPIO_Init+0x2e0>)
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	089b      	lsrs	r3, r3, #2
 8001d12:	3302      	adds	r3, #2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d1a:	4b38      	ldr	r3, [pc, #224]	; (8001dfc <HAL_GPIO_Init+0x2f8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	43da      	mvns	r2, r3
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	4013      	ands	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	2380      	movs	r3, #128	; 0x80
 8001d30:	025b      	lsls	r3, r3, #9
 8001d32:	4013      	ands	r3, r2
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d3e:	4b2f      	ldr	r3, [pc, #188]	; (8001dfc <HAL_GPIO_Init+0x2f8>)
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001d44:	4b2d      	ldr	r3, [pc, #180]	; (8001dfc <HAL_GPIO_Init+0x2f8>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	43da      	mvns	r2, r3
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	2380      	movs	r3, #128	; 0x80
 8001d5a:	029b      	lsls	r3, r3, #10
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d68:	4b24      	ldr	r3, [pc, #144]	; (8001dfc <HAL_GPIO_Init+0x2f8>)
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d6e:	4b23      	ldr	r3, [pc, #140]	; (8001dfc <HAL_GPIO_Init+0x2f8>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	43da      	mvns	r2, r3
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	2380      	movs	r3, #128	; 0x80
 8001d84:	035b      	lsls	r3, r3, #13
 8001d86:	4013      	ands	r3, r2
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d92:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <HAL_GPIO_Init+0x2f8>)
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001d98:	4b18      	ldr	r3, [pc, #96]	; (8001dfc <HAL_GPIO_Init+0x2f8>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	43da      	mvns	r2, r3
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4013      	ands	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	2380      	movs	r3, #128	; 0x80
 8001dae:	039b      	lsls	r3, r3, #14
 8001db0:	4013      	ands	r3, r2
 8001db2:	d003      	beq.n	8001dbc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <HAL_GPIO_Init+0x2f8>)
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	40da      	lsrs	r2, r3
 8001dd0:	1e13      	subs	r3, r2, #0
 8001dd2:	d000      	beq.n	8001dd6 <HAL_GPIO_Init+0x2d2>
 8001dd4:	e6a2      	b.n	8001b1c <HAL_GPIO_Init+0x18>
  }
}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	46c0      	nop			; (mov r8, r8)
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b006      	add	sp, #24
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40010000 	.word	0x40010000
 8001de8:	50000400 	.word	0x50000400
 8001dec:	50000800 	.word	0x50000800
 8001df0:	50000c00 	.word	0x50000c00
 8001df4:	50001000 	.word	0x50001000
 8001df8:	50001c00 	.word	0x50001c00
 8001dfc:	40010400 	.word	0x40010400

08001e00 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	000a      	movs	r2, r1
 8001e0a:	1cbb      	adds	r3, r7, #2
 8001e0c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	1cba      	adds	r2, r7, #2
 8001e14:	8812      	ldrh	r2, [r2, #0]
 8001e16:	4013      	ands	r3, r2
 8001e18:	d004      	beq.n	8001e24 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001e1a:	230f      	movs	r3, #15
 8001e1c:	18fb      	adds	r3, r7, r3
 8001e1e:	2201      	movs	r2, #1
 8001e20:	701a      	strb	r2, [r3, #0]
 8001e22:	e003      	b.n	8001e2c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e24:	230f      	movs	r3, #15
 8001e26:	18fb      	adds	r3, r7, r3
 8001e28:	2200      	movs	r2, #0
 8001e2a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001e2c:	230f      	movs	r3, #15
 8001e2e:	18fb      	adds	r3, r7, r3
 8001e30:	781b      	ldrb	r3, [r3, #0]
}
 8001e32:	0018      	movs	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	b004      	add	sp, #16
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	0008      	movs	r0, r1
 8001e44:	0011      	movs	r1, r2
 8001e46:	1cbb      	adds	r3, r7, #2
 8001e48:	1c02      	adds	r2, r0, #0
 8001e4a:	801a      	strh	r2, [r3, #0]
 8001e4c:	1c7b      	adds	r3, r7, #1
 8001e4e:	1c0a      	adds	r2, r1, #0
 8001e50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e52:	1c7b      	adds	r3, r7, #1
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d004      	beq.n	8001e64 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e5a:	1cbb      	adds	r3, r7, #2
 8001e5c:	881a      	ldrh	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001e62:	e003      	b.n	8001e6c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001e64:	1cbb      	adds	r3, r7, #2
 8001e66:	881a      	ldrh	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e6c:	46c0      	nop			; (mov r8, r8)
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	b002      	add	sp, #8
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	000a      	movs	r2, r1
 8001e7e:	1cbb      	adds	r3, r7, #2
 8001e80:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e88:	1cbb      	adds	r3, r7, #2
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	041a      	lsls	r2, r3, #16
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	1cb9      	adds	r1, r7, #2
 8001e98:	8809      	ldrh	r1, [r1, #0]
 8001e9a:	400b      	ands	r3, r1
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	619a      	str	r2, [r3, #24]
}
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	b004      	add	sp, #16
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	0002      	movs	r2, r0
 8001eb4:	1dbb      	adds	r3, r7, #6
 8001eb6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001eb8:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	1dba      	adds	r2, r7, #6
 8001ebe:	8812      	ldrh	r2, [r2, #0]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d008      	beq.n	8001ed6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001ec6:	1dba      	adds	r2, r7, #6
 8001ec8:	8812      	ldrh	r2, [r2, #0]
 8001eca:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ecc:	1dbb      	adds	r3, r7, #6
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f7ff f8a7 	bl	8001024 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	b002      	add	sp, #8
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	40010400 	.word	0x40010400

08001ee4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee4:	b5b0      	push	{r4, r5, r7, lr}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d102      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	f000 fbbf 	bl	8002676 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ef8:	4bc9      	ldr	r3, [pc, #804]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	220c      	movs	r2, #12
 8001efe:	4013      	ands	r3, r2
 8001f00:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f02:	4bc7      	ldr	r3, [pc, #796]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 8001f04:	68da      	ldr	r2, [r3, #12]
 8001f06:	2380      	movs	r3, #128	; 0x80
 8001f08:	025b      	lsls	r3, r3, #9
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2201      	movs	r2, #1
 8001f14:	4013      	ands	r3, r2
 8001f16:	d100      	bne.n	8001f1a <HAL_RCC_OscConfig+0x36>
 8001f18:	e07e      	b.n	8002018 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d007      	beq.n	8001f30 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	2b0c      	cmp	r3, #12
 8001f24:	d112      	bne.n	8001f4c <HAL_RCC_OscConfig+0x68>
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	025b      	lsls	r3, r3, #9
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d10d      	bne.n	8001f4c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f30:	4bbb      	ldr	r3, [pc, #748]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	2380      	movs	r3, #128	; 0x80
 8001f36:	029b      	lsls	r3, r3, #10
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d100      	bne.n	8001f3e <HAL_RCC_OscConfig+0x5a>
 8001f3c:	e06b      	b.n	8002016 <HAL_RCC_OscConfig+0x132>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d167      	bne.n	8002016 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	f000 fb95 	bl	8002676 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	2380      	movs	r3, #128	; 0x80
 8001f52:	025b      	lsls	r3, r3, #9
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d107      	bne.n	8001f68 <HAL_RCC_OscConfig+0x84>
 8001f58:	4bb1      	ldr	r3, [pc, #708]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4bb0      	ldr	r3, [pc, #704]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 8001f5e:	2180      	movs	r1, #128	; 0x80
 8001f60:	0249      	lsls	r1, r1, #9
 8001f62:	430a      	orrs	r2, r1
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	e027      	b.n	8001fb8 <HAL_RCC_OscConfig+0xd4>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	23a0      	movs	r3, #160	; 0xa0
 8001f6e:	02db      	lsls	r3, r3, #11
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d10e      	bne.n	8001f92 <HAL_RCC_OscConfig+0xae>
 8001f74:	4baa      	ldr	r3, [pc, #680]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4ba9      	ldr	r3, [pc, #676]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 8001f7a:	2180      	movs	r1, #128	; 0x80
 8001f7c:	02c9      	lsls	r1, r1, #11
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	4ba7      	ldr	r3, [pc, #668]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	4ba6      	ldr	r3, [pc, #664]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 8001f88:	2180      	movs	r1, #128	; 0x80
 8001f8a:	0249      	lsls	r1, r1, #9
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	e012      	b.n	8001fb8 <HAL_RCC_OscConfig+0xd4>
 8001f92:	4ba3      	ldr	r3, [pc, #652]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	4ba2      	ldr	r3, [pc, #648]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 8001f98:	49a2      	ldr	r1, [pc, #648]	; (8002224 <HAL_RCC_OscConfig+0x340>)
 8001f9a:	400a      	ands	r2, r1
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	4ba0      	ldr	r3, [pc, #640]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	2380      	movs	r3, #128	; 0x80
 8001fa4:	025b      	lsls	r3, r3, #9
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4b9c      	ldr	r3, [pc, #624]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4b9b      	ldr	r3, [pc, #620]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 8001fb2:	499d      	ldr	r1, [pc, #628]	; (8002228 <HAL_RCC_OscConfig+0x344>)
 8001fb4:	400a      	ands	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d015      	beq.n	8001fec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7ff fc94 	bl	80018ec <HAL_GetTick>
 8001fc4:	0003      	movs	r3, r0
 8001fc6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fc8:	e009      	b.n	8001fde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fca:	f7ff fc8f 	bl	80018ec <HAL_GetTick>
 8001fce:	0002      	movs	r2, r0
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b64      	cmp	r3, #100	; 0x64
 8001fd6:	d902      	bls.n	8001fde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	f000 fb4c 	bl	8002676 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fde:	4b90      	ldr	r3, [pc, #576]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	2380      	movs	r3, #128	; 0x80
 8001fe4:	029b      	lsls	r3, r3, #10
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d0ef      	beq.n	8001fca <HAL_RCC_OscConfig+0xe6>
 8001fea:	e015      	b.n	8002018 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fec:	f7ff fc7e 	bl	80018ec <HAL_GetTick>
 8001ff0:	0003      	movs	r3, r0
 8001ff2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ff6:	f7ff fc79 	bl	80018ec <HAL_GetTick>
 8001ffa:	0002      	movs	r2, r0
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b64      	cmp	r3, #100	; 0x64
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e336      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002008:	4b85      	ldr	r3, [pc, #532]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	2380      	movs	r3, #128	; 0x80
 800200e:	029b      	lsls	r3, r3, #10
 8002010:	4013      	ands	r3, r2
 8002012:	d1f0      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x112>
 8002014:	e000      	b.n	8002018 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002016:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2202      	movs	r2, #2
 800201e:	4013      	ands	r3, r2
 8002020:	d100      	bne.n	8002024 <HAL_RCC_OscConfig+0x140>
 8002022:	e099      	b.n	8002158 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	2220      	movs	r2, #32
 800202e:	4013      	ands	r3, r2
 8002030:	d009      	beq.n	8002046 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002032:	4b7b      	ldr	r3, [pc, #492]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	4b7a      	ldr	r3, [pc, #488]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 8002038:	2120      	movs	r1, #32
 800203a:	430a      	orrs	r2, r1
 800203c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	2220      	movs	r2, #32
 8002042:	4393      	bics	r3, r2
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	2b04      	cmp	r3, #4
 800204a:	d005      	beq.n	8002058 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	2b0c      	cmp	r3, #12
 8002050:	d13e      	bne.n	80020d0 <HAL_RCC_OscConfig+0x1ec>
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d13b      	bne.n	80020d0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002058:	4b71      	ldr	r3, [pc, #452]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2204      	movs	r2, #4
 800205e:	4013      	ands	r3, r2
 8002060:	d004      	beq.n	800206c <HAL_RCC_OscConfig+0x188>
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e304      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206c:	4b6c      	ldr	r3, [pc, #432]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	4a6e      	ldr	r2, [pc, #440]	; (800222c <HAL_RCC_OscConfig+0x348>)
 8002072:	4013      	ands	r3, r2
 8002074:	0019      	movs	r1, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	021a      	lsls	r2, r3, #8
 800207c:	4b68      	ldr	r3, [pc, #416]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 800207e:	430a      	orrs	r2, r1
 8002080:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002082:	4b67      	ldr	r3, [pc, #412]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2209      	movs	r2, #9
 8002088:	4393      	bics	r3, r2
 800208a:	0019      	movs	r1, r3
 800208c:	4b64      	ldr	r3, [pc, #400]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 800208e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002090:	430a      	orrs	r2, r1
 8002092:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002094:	f000 fc42 	bl	800291c <HAL_RCC_GetSysClockFreq>
 8002098:	0001      	movs	r1, r0
 800209a:	4b61      	ldr	r3, [pc, #388]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	091b      	lsrs	r3, r3, #4
 80020a0:	220f      	movs	r2, #15
 80020a2:	4013      	ands	r3, r2
 80020a4:	4a62      	ldr	r2, [pc, #392]	; (8002230 <HAL_RCC_OscConfig+0x34c>)
 80020a6:	5cd3      	ldrb	r3, [r2, r3]
 80020a8:	000a      	movs	r2, r1
 80020aa:	40da      	lsrs	r2, r3
 80020ac:	4b61      	ldr	r3, [pc, #388]	; (8002234 <HAL_RCC_OscConfig+0x350>)
 80020ae:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80020b0:	4b61      	ldr	r3, [pc, #388]	; (8002238 <HAL_RCC_OscConfig+0x354>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2513      	movs	r5, #19
 80020b6:	197c      	adds	r4, r7, r5
 80020b8:	0018      	movs	r0, r3
 80020ba:	f7ff fbd1 	bl	8001860 <HAL_InitTick>
 80020be:	0003      	movs	r3, r0
 80020c0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80020c2:	197b      	adds	r3, r7, r5
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d046      	beq.n	8002158 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80020ca:	197b      	adds	r3, r7, r5
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	e2d2      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d027      	beq.n	8002126 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80020d6:	4b52      	ldr	r3, [pc, #328]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2209      	movs	r2, #9
 80020dc:	4393      	bics	r3, r2
 80020de:	0019      	movs	r1, r3
 80020e0:	4b4f      	ldr	r3, [pc, #316]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 80020e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e4:	430a      	orrs	r2, r1
 80020e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e8:	f7ff fc00 	bl	80018ec <HAL_GetTick>
 80020ec:	0003      	movs	r3, r0
 80020ee:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f2:	f7ff fbfb 	bl	80018ec <HAL_GetTick>
 80020f6:	0002      	movs	r2, r0
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e2b8      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002104:	4b46      	ldr	r3, [pc, #280]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2204      	movs	r2, #4
 800210a:	4013      	ands	r3, r2
 800210c:	d0f1      	beq.n	80020f2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210e:	4b44      	ldr	r3, [pc, #272]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	4a46      	ldr	r2, [pc, #280]	; (800222c <HAL_RCC_OscConfig+0x348>)
 8002114:	4013      	ands	r3, r2
 8002116:	0019      	movs	r1, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	021a      	lsls	r2, r3, #8
 800211e:	4b40      	ldr	r3, [pc, #256]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 8002120:	430a      	orrs	r2, r1
 8002122:	605a      	str	r2, [r3, #4]
 8002124:	e018      	b.n	8002158 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002126:	4b3e      	ldr	r3, [pc, #248]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	4b3d      	ldr	r3, [pc, #244]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 800212c:	2101      	movs	r1, #1
 800212e:	438a      	bics	r2, r1
 8002130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002132:	f7ff fbdb 	bl	80018ec <HAL_GetTick>
 8002136:	0003      	movs	r3, r0
 8002138:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800213c:	f7ff fbd6 	bl	80018ec <HAL_GetTick>
 8002140:	0002      	movs	r2, r0
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e293      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800214e:	4b34      	ldr	r3, [pc, #208]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2204      	movs	r2, #4
 8002154:	4013      	ands	r3, r2
 8002156:	d1f1      	bne.n	800213c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2210      	movs	r2, #16
 800215e:	4013      	ands	r3, r2
 8002160:	d100      	bne.n	8002164 <HAL_RCC_OscConfig+0x280>
 8002162:	e0a2      	b.n	80022aa <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d140      	bne.n	80021ec <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800216a:	4b2d      	ldr	r3, [pc, #180]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	2380      	movs	r3, #128	; 0x80
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4013      	ands	r3, r2
 8002174:	d005      	beq.n	8002182 <HAL_RCC_OscConfig+0x29e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e279      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002182:	4b27      	ldr	r3, [pc, #156]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	4a2d      	ldr	r2, [pc, #180]	; (800223c <HAL_RCC_OscConfig+0x358>)
 8002188:	4013      	ands	r3, r2
 800218a:	0019      	movs	r1, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002190:	4b23      	ldr	r3, [pc, #140]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 8002192:	430a      	orrs	r2, r1
 8002194:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002196:	4b22      	ldr	r3, [pc, #136]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	021b      	lsls	r3, r3, #8
 800219c:	0a19      	lsrs	r1, r3, #8
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	061a      	lsls	r2, r3, #24
 80021a4:	4b1e      	ldr	r3, [pc, #120]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 80021a6:	430a      	orrs	r2, r1
 80021a8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	0b5b      	lsrs	r3, r3, #13
 80021b0:	3301      	adds	r3, #1
 80021b2:	2280      	movs	r2, #128	; 0x80
 80021b4:	0212      	lsls	r2, r2, #8
 80021b6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80021b8:	4b19      	ldr	r3, [pc, #100]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	210f      	movs	r1, #15
 80021c0:	400b      	ands	r3, r1
 80021c2:	491b      	ldr	r1, [pc, #108]	; (8002230 <HAL_RCC_OscConfig+0x34c>)
 80021c4:	5ccb      	ldrb	r3, [r1, r3]
 80021c6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80021c8:	4b1a      	ldr	r3, [pc, #104]	; (8002234 <HAL_RCC_OscConfig+0x350>)
 80021ca:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80021cc:	4b1a      	ldr	r3, [pc, #104]	; (8002238 <HAL_RCC_OscConfig+0x354>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2513      	movs	r5, #19
 80021d2:	197c      	adds	r4, r7, r5
 80021d4:	0018      	movs	r0, r3
 80021d6:	f7ff fb43 	bl	8001860 <HAL_InitTick>
 80021da:	0003      	movs	r3, r0
 80021dc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80021de:	197b      	adds	r3, r7, r5
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d061      	beq.n	80022aa <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80021e6:	197b      	adds	r3, r7, r5
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	e244      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d040      	beq.n	8002276 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021f4:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b09      	ldr	r3, [pc, #36]	; (8002220 <HAL_RCC_OscConfig+0x33c>)
 80021fa:	2180      	movs	r1, #128	; 0x80
 80021fc:	0049      	lsls	r1, r1, #1
 80021fe:	430a      	orrs	r2, r1
 8002200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002202:	f7ff fb73 	bl	80018ec <HAL_GetTick>
 8002206:	0003      	movs	r3, r0
 8002208:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800220a:	e019      	b.n	8002240 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800220c:	f7ff fb6e 	bl	80018ec <HAL_GetTick>
 8002210:	0002      	movs	r2, r0
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d912      	bls.n	8002240 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e22b      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	40021000 	.word	0x40021000
 8002224:	fffeffff 	.word	0xfffeffff
 8002228:	fffbffff 	.word	0xfffbffff
 800222c:	ffffe0ff 	.word	0xffffe0ff
 8002230:	08003650 	.word	0x08003650
 8002234:	20000000 	.word	0x20000000
 8002238:	20000004 	.word	0x20000004
 800223c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002240:	4bca      	ldr	r3, [pc, #808]	; (800256c <HAL_RCC_OscConfig+0x688>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	2380      	movs	r3, #128	; 0x80
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4013      	ands	r3, r2
 800224a:	d0df      	beq.n	800220c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800224c:	4bc7      	ldr	r3, [pc, #796]	; (800256c <HAL_RCC_OscConfig+0x688>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	4ac7      	ldr	r2, [pc, #796]	; (8002570 <HAL_RCC_OscConfig+0x68c>)
 8002252:	4013      	ands	r3, r2
 8002254:	0019      	movs	r1, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800225a:	4bc4      	ldr	r3, [pc, #784]	; (800256c <HAL_RCC_OscConfig+0x688>)
 800225c:	430a      	orrs	r2, r1
 800225e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002260:	4bc2      	ldr	r3, [pc, #776]	; (800256c <HAL_RCC_OscConfig+0x688>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	021b      	lsls	r3, r3, #8
 8002266:	0a19      	lsrs	r1, r3, #8
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	061a      	lsls	r2, r3, #24
 800226e:	4bbf      	ldr	r3, [pc, #764]	; (800256c <HAL_RCC_OscConfig+0x688>)
 8002270:	430a      	orrs	r2, r1
 8002272:	605a      	str	r2, [r3, #4]
 8002274:	e019      	b.n	80022aa <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002276:	4bbd      	ldr	r3, [pc, #756]	; (800256c <HAL_RCC_OscConfig+0x688>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	4bbc      	ldr	r3, [pc, #752]	; (800256c <HAL_RCC_OscConfig+0x688>)
 800227c:	49bd      	ldr	r1, [pc, #756]	; (8002574 <HAL_RCC_OscConfig+0x690>)
 800227e:	400a      	ands	r2, r1
 8002280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002282:	f7ff fb33 	bl	80018ec <HAL_GetTick>
 8002286:	0003      	movs	r3, r0
 8002288:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800228c:	f7ff fb2e 	bl	80018ec <HAL_GetTick>
 8002290:	0002      	movs	r2, r0
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e1eb      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800229e:	4bb3      	ldr	r3, [pc, #716]	; (800256c <HAL_RCC_OscConfig+0x688>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	2380      	movs	r3, #128	; 0x80
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4013      	ands	r3, r2
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2208      	movs	r2, #8
 80022b0:	4013      	ands	r3, r2
 80022b2:	d036      	beq.n	8002322 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d019      	beq.n	80022f0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022bc:	4bab      	ldr	r3, [pc, #684]	; (800256c <HAL_RCC_OscConfig+0x688>)
 80022be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022c0:	4baa      	ldr	r3, [pc, #680]	; (800256c <HAL_RCC_OscConfig+0x688>)
 80022c2:	2101      	movs	r1, #1
 80022c4:	430a      	orrs	r2, r1
 80022c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c8:	f7ff fb10 	bl	80018ec <HAL_GetTick>
 80022cc:	0003      	movs	r3, r0
 80022ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022d2:	f7ff fb0b 	bl	80018ec <HAL_GetTick>
 80022d6:	0002      	movs	r2, r0
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e1c8      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022e4:	4ba1      	ldr	r3, [pc, #644]	; (800256c <HAL_RCC_OscConfig+0x688>)
 80022e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e8:	2202      	movs	r2, #2
 80022ea:	4013      	ands	r3, r2
 80022ec:	d0f1      	beq.n	80022d2 <HAL_RCC_OscConfig+0x3ee>
 80022ee:	e018      	b.n	8002322 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022f0:	4b9e      	ldr	r3, [pc, #632]	; (800256c <HAL_RCC_OscConfig+0x688>)
 80022f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022f4:	4b9d      	ldr	r3, [pc, #628]	; (800256c <HAL_RCC_OscConfig+0x688>)
 80022f6:	2101      	movs	r1, #1
 80022f8:	438a      	bics	r2, r1
 80022fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fc:	f7ff faf6 	bl	80018ec <HAL_GetTick>
 8002300:	0003      	movs	r3, r0
 8002302:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002306:	f7ff faf1 	bl	80018ec <HAL_GetTick>
 800230a:	0002      	movs	r2, r0
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e1ae      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002318:	4b94      	ldr	r3, [pc, #592]	; (800256c <HAL_RCC_OscConfig+0x688>)
 800231a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800231c:	2202      	movs	r2, #2
 800231e:	4013      	ands	r3, r2
 8002320:	d1f1      	bne.n	8002306 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2204      	movs	r2, #4
 8002328:	4013      	ands	r3, r2
 800232a:	d100      	bne.n	800232e <HAL_RCC_OscConfig+0x44a>
 800232c:	e0ae      	b.n	800248c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800232e:	2023      	movs	r0, #35	; 0x23
 8002330:	183b      	adds	r3, r7, r0
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002336:	4b8d      	ldr	r3, [pc, #564]	; (800256c <HAL_RCC_OscConfig+0x688>)
 8002338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	055b      	lsls	r3, r3, #21
 800233e:	4013      	ands	r3, r2
 8002340:	d109      	bne.n	8002356 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002342:	4b8a      	ldr	r3, [pc, #552]	; (800256c <HAL_RCC_OscConfig+0x688>)
 8002344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002346:	4b89      	ldr	r3, [pc, #548]	; (800256c <HAL_RCC_OscConfig+0x688>)
 8002348:	2180      	movs	r1, #128	; 0x80
 800234a:	0549      	lsls	r1, r1, #21
 800234c:	430a      	orrs	r2, r1
 800234e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002350:	183b      	adds	r3, r7, r0
 8002352:	2201      	movs	r2, #1
 8002354:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002356:	4b88      	ldr	r3, [pc, #544]	; (8002578 <HAL_RCC_OscConfig+0x694>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	2380      	movs	r3, #128	; 0x80
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	4013      	ands	r3, r2
 8002360:	d11a      	bne.n	8002398 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002362:	4b85      	ldr	r3, [pc, #532]	; (8002578 <HAL_RCC_OscConfig+0x694>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	4b84      	ldr	r3, [pc, #528]	; (8002578 <HAL_RCC_OscConfig+0x694>)
 8002368:	2180      	movs	r1, #128	; 0x80
 800236a:	0049      	lsls	r1, r1, #1
 800236c:	430a      	orrs	r2, r1
 800236e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002370:	f7ff fabc 	bl	80018ec <HAL_GetTick>
 8002374:	0003      	movs	r3, r0
 8002376:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800237a:	f7ff fab7 	bl	80018ec <HAL_GetTick>
 800237e:	0002      	movs	r2, r0
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b64      	cmp	r3, #100	; 0x64
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e174      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238c:	4b7a      	ldr	r3, [pc, #488]	; (8002578 <HAL_RCC_OscConfig+0x694>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	4013      	ands	r3, r2
 8002396:	d0f0      	beq.n	800237a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	2380      	movs	r3, #128	; 0x80
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d107      	bne.n	80023b4 <HAL_RCC_OscConfig+0x4d0>
 80023a4:	4b71      	ldr	r3, [pc, #452]	; (800256c <HAL_RCC_OscConfig+0x688>)
 80023a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023a8:	4b70      	ldr	r3, [pc, #448]	; (800256c <HAL_RCC_OscConfig+0x688>)
 80023aa:	2180      	movs	r1, #128	; 0x80
 80023ac:	0049      	lsls	r1, r1, #1
 80023ae:	430a      	orrs	r2, r1
 80023b0:	651a      	str	r2, [r3, #80]	; 0x50
 80023b2:	e031      	b.n	8002418 <HAL_RCC_OscConfig+0x534>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10c      	bne.n	80023d6 <HAL_RCC_OscConfig+0x4f2>
 80023bc:	4b6b      	ldr	r3, [pc, #428]	; (800256c <HAL_RCC_OscConfig+0x688>)
 80023be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023c0:	4b6a      	ldr	r3, [pc, #424]	; (800256c <HAL_RCC_OscConfig+0x688>)
 80023c2:	496c      	ldr	r1, [pc, #432]	; (8002574 <HAL_RCC_OscConfig+0x690>)
 80023c4:	400a      	ands	r2, r1
 80023c6:	651a      	str	r2, [r3, #80]	; 0x50
 80023c8:	4b68      	ldr	r3, [pc, #416]	; (800256c <HAL_RCC_OscConfig+0x688>)
 80023ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023cc:	4b67      	ldr	r3, [pc, #412]	; (800256c <HAL_RCC_OscConfig+0x688>)
 80023ce:	496b      	ldr	r1, [pc, #428]	; (800257c <HAL_RCC_OscConfig+0x698>)
 80023d0:	400a      	ands	r2, r1
 80023d2:	651a      	str	r2, [r3, #80]	; 0x50
 80023d4:	e020      	b.n	8002418 <HAL_RCC_OscConfig+0x534>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	23a0      	movs	r3, #160	; 0xa0
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	429a      	cmp	r2, r3
 80023e0:	d10e      	bne.n	8002400 <HAL_RCC_OscConfig+0x51c>
 80023e2:	4b62      	ldr	r3, [pc, #392]	; (800256c <HAL_RCC_OscConfig+0x688>)
 80023e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023e6:	4b61      	ldr	r3, [pc, #388]	; (800256c <HAL_RCC_OscConfig+0x688>)
 80023e8:	2180      	movs	r1, #128	; 0x80
 80023ea:	00c9      	lsls	r1, r1, #3
 80023ec:	430a      	orrs	r2, r1
 80023ee:	651a      	str	r2, [r3, #80]	; 0x50
 80023f0:	4b5e      	ldr	r3, [pc, #376]	; (800256c <HAL_RCC_OscConfig+0x688>)
 80023f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023f4:	4b5d      	ldr	r3, [pc, #372]	; (800256c <HAL_RCC_OscConfig+0x688>)
 80023f6:	2180      	movs	r1, #128	; 0x80
 80023f8:	0049      	lsls	r1, r1, #1
 80023fa:	430a      	orrs	r2, r1
 80023fc:	651a      	str	r2, [r3, #80]	; 0x50
 80023fe:	e00b      	b.n	8002418 <HAL_RCC_OscConfig+0x534>
 8002400:	4b5a      	ldr	r3, [pc, #360]	; (800256c <HAL_RCC_OscConfig+0x688>)
 8002402:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002404:	4b59      	ldr	r3, [pc, #356]	; (800256c <HAL_RCC_OscConfig+0x688>)
 8002406:	495b      	ldr	r1, [pc, #364]	; (8002574 <HAL_RCC_OscConfig+0x690>)
 8002408:	400a      	ands	r2, r1
 800240a:	651a      	str	r2, [r3, #80]	; 0x50
 800240c:	4b57      	ldr	r3, [pc, #348]	; (800256c <HAL_RCC_OscConfig+0x688>)
 800240e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002410:	4b56      	ldr	r3, [pc, #344]	; (800256c <HAL_RCC_OscConfig+0x688>)
 8002412:	495a      	ldr	r1, [pc, #360]	; (800257c <HAL_RCC_OscConfig+0x698>)
 8002414:	400a      	ands	r2, r1
 8002416:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d015      	beq.n	800244c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002420:	f7ff fa64 	bl	80018ec <HAL_GetTick>
 8002424:	0003      	movs	r3, r0
 8002426:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002428:	e009      	b.n	800243e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800242a:	f7ff fa5f 	bl	80018ec <HAL_GetTick>
 800242e:	0002      	movs	r2, r0
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	4a52      	ldr	r2, [pc, #328]	; (8002580 <HAL_RCC_OscConfig+0x69c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e11b      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800243e:	4b4b      	ldr	r3, [pc, #300]	; (800256c <HAL_RCC_OscConfig+0x688>)
 8002440:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002442:	2380      	movs	r3, #128	; 0x80
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4013      	ands	r3, r2
 8002448:	d0ef      	beq.n	800242a <HAL_RCC_OscConfig+0x546>
 800244a:	e014      	b.n	8002476 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244c:	f7ff fa4e 	bl	80018ec <HAL_GetTick>
 8002450:	0003      	movs	r3, r0
 8002452:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002454:	e009      	b.n	800246a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002456:	f7ff fa49 	bl	80018ec <HAL_GetTick>
 800245a:	0002      	movs	r2, r0
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	4a47      	ldr	r2, [pc, #284]	; (8002580 <HAL_RCC_OscConfig+0x69c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e105      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800246a:	4b40      	ldr	r3, [pc, #256]	; (800256c <HAL_RCC_OscConfig+0x688>)
 800246c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800246e:	2380      	movs	r3, #128	; 0x80
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4013      	ands	r3, r2
 8002474:	d1ef      	bne.n	8002456 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002476:	2323      	movs	r3, #35	; 0x23
 8002478:	18fb      	adds	r3, r7, r3
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d105      	bne.n	800248c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002480:	4b3a      	ldr	r3, [pc, #232]	; (800256c <HAL_RCC_OscConfig+0x688>)
 8002482:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002484:	4b39      	ldr	r3, [pc, #228]	; (800256c <HAL_RCC_OscConfig+0x688>)
 8002486:	493f      	ldr	r1, [pc, #252]	; (8002584 <HAL_RCC_OscConfig+0x6a0>)
 8002488:	400a      	ands	r2, r1
 800248a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2220      	movs	r2, #32
 8002492:	4013      	ands	r3, r2
 8002494:	d049      	beq.n	800252a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d026      	beq.n	80024ec <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800249e:	4b33      	ldr	r3, [pc, #204]	; (800256c <HAL_RCC_OscConfig+0x688>)
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	4b32      	ldr	r3, [pc, #200]	; (800256c <HAL_RCC_OscConfig+0x688>)
 80024a4:	2101      	movs	r1, #1
 80024a6:	430a      	orrs	r2, r1
 80024a8:	609a      	str	r2, [r3, #8]
 80024aa:	4b30      	ldr	r3, [pc, #192]	; (800256c <HAL_RCC_OscConfig+0x688>)
 80024ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024ae:	4b2f      	ldr	r3, [pc, #188]	; (800256c <HAL_RCC_OscConfig+0x688>)
 80024b0:	2101      	movs	r1, #1
 80024b2:	430a      	orrs	r2, r1
 80024b4:	635a      	str	r2, [r3, #52]	; 0x34
 80024b6:	4b34      	ldr	r3, [pc, #208]	; (8002588 <HAL_RCC_OscConfig+0x6a4>)
 80024b8:	6a1a      	ldr	r2, [r3, #32]
 80024ba:	4b33      	ldr	r3, [pc, #204]	; (8002588 <HAL_RCC_OscConfig+0x6a4>)
 80024bc:	2180      	movs	r1, #128	; 0x80
 80024be:	0189      	lsls	r1, r1, #6
 80024c0:	430a      	orrs	r2, r1
 80024c2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c4:	f7ff fa12 	bl	80018ec <HAL_GetTick>
 80024c8:	0003      	movs	r3, r0
 80024ca:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024ce:	f7ff fa0d 	bl	80018ec <HAL_GetTick>
 80024d2:	0002      	movs	r2, r0
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e0ca      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024e0:	4b22      	ldr	r3, [pc, #136]	; (800256c <HAL_RCC_OscConfig+0x688>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2202      	movs	r2, #2
 80024e6:	4013      	ands	r3, r2
 80024e8:	d0f1      	beq.n	80024ce <HAL_RCC_OscConfig+0x5ea>
 80024ea:	e01e      	b.n	800252a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80024ec:	4b1f      	ldr	r3, [pc, #124]	; (800256c <HAL_RCC_OscConfig+0x688>)
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	4b1e      	ldr	r3, [pc, #120]	; (800256c <HAL_RCC_OscConfig+0x688>)
 80024f2:	2101      	movs	r1, #1
 80024f4:	438a      	bics	r2, r1
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	4b23      	ldr	r3, [pc, #140]	; (8002588 <HAL_RCC_OscConfig+0x6a4>)
 80024fa:	6a1a      	ldr	r2, [r3, #32]
 80024fc:	4b22      	ldr	r3, [pc, #136]	; (8002588 <HAL_RCC_OscConfig+0x6a4>)
 80024fe:	4923      	ldr	r1, [pc, #140]	; (800258c <HAL_RCC_OscConfig+0x6a8>)
 8002500:	400a      	ands	r2, r1
 8002502:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002504:	f7ff f9f2 	bl	80018ec <HAL_GetTick>
 8002508:	0003      	movs	r3, r0
 800250a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800250e:	f7ff f9ed 	bl	80018ec <HAL_GetTick>
 8002512:	0002      	movs	r2, r0
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e0aa      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002520:	4b12      	ldr	r3, [pc, #72]	; (800256c <HAL_RCC_OscConfig+0x688>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	2202      	movs	r2, #2
 8002526:	4013      	ands	r3, r2
 8002528:	d1f1      	bne.n	800250e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252e:	2b00      	cmp	r3, #0
 8002530:	d100      	bne.n	8002534 <HAL_RCC_OscConfig+0x650>
 8002532:	e09f      	b.n	8002674 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	2b0c      	cmp	r3, #12
 8002538:	d100      	bne.n	800253c <HAL_RCC_OscConfig+0x658>
 800253a:	e078      	b.n	800262e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002540:	2b02      	cmp	r3, #2
 8002542:	d159      	bne.n	80025f8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002544:	4b09      	ldr	r3, [pc, #36]	; (800256c <HAL_RCC_OscConfig+0x688>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4b08      	ldr	r3, [pc, #32]	; (800256c <HAL_RCC_OscConfig+0x688>)
 800254a:	4911      	ldr	r1, [pc, #68]	; (8002590 <HAL_RCC_OscConfig+0x6ac>)
 800254c:	400a      	ands	r2, r1
 800254e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7ff f9cc 	bl	80018ec <HAL_GetTick>
 8002554:	0003      	movs	r3, r0
 8002556:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002558:	e01c      	b.n	8002594 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800255a:	f7ff f9c7 	bl	80018ec <HAL_GetTick>
 800255e:	0002      	movs	r2, r0
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d915      	bls.n	8002594 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e084      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
 800256c:	40021000 	.word	0x40021000
 8002570:	ffff1fff 	.word	0xffff1fff
 8002574:	fffffeff 	.word	0xfffffeff
 8002578:	40007000 	.word	0x40007000
 800257c:	fffffbff 	.word	0xfffffbff
 8002580:	00001388 	.word	0x00001388
 8002584:	efffffff 	.word	0xefffffff
 8002588:	40010000 	.word	0x40010000
 800258c:	ffffdfff 	.word	0xffffdfff
 8002590:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002594:	4b3a      	ldr	r3, [pc, #232]	; (8002680 <HAL_RCC_OscConfig+0x79c>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	2380      	movs	r3, #128	; 0x80
 800259a:	049b      	lsls	r3, r3, #18
 800259c:	4013      	ands	r3, r2
 800259e:	d1dc      	bne.n	800255a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025a0:	4b37      	ldr	r3, [pc, #220]	; (8002680 <HAL_RCC_OscConfig+0x79c>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	4a37      	ldr	r2, [pc, #220]	; (8002684 <HAL_RCC_OscConfig+0x7a0>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	0019      	movs	r1, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b8:	431a      	orrs	r2, r3
 80025ba:	4b31      	ldr	r3, [pc, #196]	; (8002680 <HAL_RCC_OscConfig+0x79c>)
 80025bc:	430a      	orrs	r2, r1
 80025be:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025c0:	4b2f      	ldr	r3, [pc, #188]	; (8002680 <HAL_RCC_OscConfig+0x79c>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	4b2e      	ldr	r3, [pc, #184]	; (8002680 <HAL_RCC_OscConfig+0x79c>)
 80025c6:	2180      	movs	r1, #128	; 0x80
 80025c8:	0449      	lsls	r1, r1, #17
 80025ca:	430a      	orrs	r2, r1
 80025cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ce:	f7ff f98d 	bl	80018ec <HAL_GetTick>
 80025d2:	0003      	movs	r3, r0
 80025d4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d8:	f7ff f988 	bl	80018ec <HAL_GetTick>
 80025dc:	0002      	movs	r2, r0
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e045      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80025ea:	4b25      	ldr	r3, [pc, #148]	; (8002680 <HAL_RCC_OscConfig+0x79c>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	2380      	movs	r3, #128	; 0x80
 80025f0:	049b      	lsls	r3, r3, #18
 80025f2:	4013      	ands	r3, r2
 80025f4:	d0f0      	beq.n	80025d8 <HAL_RCC_OscConfig+0x6f4>
 80025f6:	e03d      	b.n	8002674 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f8:	4b21      	ldr	r3, [pc, #132]	; (8002680 <HAL_RCC_OscConfig+0x79c>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	4b20      	ldr	r3, [pc, #128]	; (8002680 <HAL_RCC_OscConfig+0x79c>)
 80025fe:	4922      	ldr	r1, [pc, #136]	; (8002688 <HAL_RCC_OscConfig+0x7a4>)
 8002600:	400a      	ands	r2, r1
 8002602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002604:	f7ff f972 	bl	80018ec <HAL_GetTick>
 8002608:	0003      	movs	r3, r0
 800260a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800260e:	f7ff f96d 	bl	80018ec <HAL_GetTick>
 8002612:	0002      	movs	r2, r0
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e02a      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002620:	4b17      	ldr	r3, [pc, #92]	; (8002680 <HAL_RCC_OscConfig+0x79c>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	2380      	movs	r3, #128	; 0x80
 8002626:	049b      	lsls	r3, r3, #18
 8002628:	4013      	ands	r3, r2
 800262a:	d1f0      	bne.n	800260e <HAL_RCC_OscConfig+0x72a>
 800262c:	e022      	b.n	8002674 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e01d      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800263a:	4b11      	ldr	r3, [pc, #68]	; (8002680 <HAL_RCC_OscConfig+0x79c>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	2380      	movs	r3, #128	; 0x80
 8002644:	025b      	lsls	r3, r3, #9
 8002646:	401a      	ands	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264c:	429a      	cmp	r2, r3
 800264e:	d10f      	bne.n	8002670 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	23f0      	movs	r3, #240	; 0xf0
 8002654:	039b      	lsls	r3, r3, #14
 8002656:	401a      	ands	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265c:	429a      	cmp	r2, r3
 800265e:	d107      	bne.n	8002670 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	23c0      	movs	r3, #192	; 0xc0
 8002664:	041b      	lsls	r3, r3, #16
 8002666:	401a      	ands	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800266c:	429a      	cmp	r2, r3
 800266e:	d001      	beq.n	8002674 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	0018      	movs	r0, r3
 8002678:	46bd      	mov	sp, r7
 800267a:	b00a      	add	sp, #40	; 0x28
 800267c:	bdb0      	pop	{r4, r5, r7, pc}
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	40021000 	.word	0x40021000
 8002684:	ff02ffff 	.word	0xff02ffff
 8002688:	feffffff 	.word	0xfeffffff

0800268c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800268c:	b5b0      	push	{r4, r5, r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e128      	b.n	80028f2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026a0:	4b96      	ldr	r3, [pc, #600]	; (80028fc <HAL_RCC_ClockConfig+0x270>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2201      	movs	r2, #1
 80026a6:	4013      	ands	r3, r2
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d91e      	bls.n	80026ec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ae:	4b93      	ldr	r3, [pc, #588]	; (80028fc <HAL_RCC_ClockConfig+0x270>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2201      	movs	r2, #1
 80026b4:	4393      	bics	r3, r2
 80026b6:	0019      	movs	r1, r3
 80026b8:	4b90      	ldr	r3, [pc, #576]	; (80028fc <HAL_RCC_ClockConfig+0x270>)
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026c0:	f7ff f914 	bl	80018ec <HAL_GetTick>
 80026c4:	0003      	movs	r3, r0
 80026c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c8:	e009      	b.n	80026de <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ca:	f7ff f90f 	bl	80018ec <HAL_GetTick>
 80026ce:	0002      	movs	r2, r0
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	4a8a      	ldr	r2, [pc, #552]	; (8002900 <HAL_RCC_ClockConfig+0x274>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e109      	b.n	80028f2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026de:	4b87      	ldr	r3, [pc, #540]	; (80028fc <HAL_RCC_ClockConfig+0x270>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2201      	movs	r2, #1
 80026e4:	4013      	ands	r3, r2
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d1ee      	bne.n	80026ca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2202      	movs	r2, #2
 80026f2:	4013      	ands	r3, r2
 80026f4:	d009      	beq.n	800270a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f6:	4b83      	ldr	r3, [pc, #524]	; (8002904 <HAL_RCC_ClockConfig+0x278>)
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	22f0      	movs	r2, #240	; 0xf0
 80026fc:	4393      	bics	r3, r2
 80026fe:	0019      	movs	r1, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	4b7f      	ldr	r3, [pc, #508]	; (8002904 <HAL_RCC_ClockConfig+0x278>)
 8002706:	430a      	orrs	r2, r1
 8002708:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2201      	movs	r2, #1
 8002710:	4013      	ands	r3, r2
 8002712:	d100      	bne.n	8002716 <HAL_RCC_ClockConfig+0x8a>
 8002714:	e089      	b.n	800282a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b02      	cmp	r3, #2
 800271c:	d107      	bne.n	800272e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800271e:	4b79      	ldr	r3, [pc, #484]	; (8002904 <HAL_RCC_ClockConfig+0x278>)
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	2380      	movs	r3, #128	; 0x80
 8002724:	029b      	lsls	r3, r3, #10
 8002726:	4013      	ands	r3, r2
 8002728:	d120      	bne.n	800276c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e0e1      	b.n	80028f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b03      	cmp	r3, #3
 8002734:	d107      	bne.n	8002746 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002736:	4b73      	ldr	r3, [pc, #460]	; (8002904 <HAL_RCC_ClockConfig+0x278>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	2380      	movs	r3, #128	; 0x80
 800273c:	049b      	lsls	r3, r3, #18
 800273e:	4013      	ands	r3, r2
 8002740:	d114      	bne.n	800276c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e0d5      	b.n	80028f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d106      	bne.n	800275c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800274e:	4b6d      	ldr	r3, [pc, #436]	; (8002904 <HAL_RCC_ClockConfig+0x278>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2204      	movs	r2, #4
 8002754:	4013      	ands	r3, r2
 8002756:	d109      	bne.n	800276c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0ca      	b.n	80028f2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800275c:	4b69      	ldr	r3, [pc, #420]	; (8002904 <HAL_RCC_ClockConfig+0x278>)
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	2380      	movs	r3, #128	; 0x80
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4013      	ands	r3, r2
 8002766:	d101      	bne.n	800276c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e0c2      	b.n	80028f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800276c:	4b65      	ldr	r3, [pc, #404]	; (8002904 <HAL_RCC_ClockConfig+0x278>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	2203      	movs	r2, #3
 8002772:	4393      	bics	r3, r2
 8002774:	0019      	movs	r1, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	4b62      	ldr	r3, [pc, #392]	; (8002904 <HAL_RCC_ClockConfig+0x278>)
 800277c:	430a      	orrs	r2, r1
 800277e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002780:	f7ff f8b4 	bl	80018ec <HAL_GetTick>
 8002784:	0003      	movs	r3, r0
 8002786:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d111      	bne.n	80027b4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002790:	e009      	b.n	80027a6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002792:	f7ff f8ab 	bl	80018ec <HAL_GetTick>
 8002796:	0002      	movs	r2, r0
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	4a58      	ldr	r2, [pc, #352]	; (8002900 <HAL_RCC_ClockConfig+0x274>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e0a5      	b.n	80028f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027a6:	4b57      	ldr	r3, [pc, #348]	; (8002904 <HAL_RCC_ClockConfig+0x278>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	220c      	movs	r2, #12
 80027ac:	4013      	ands	r3, r2
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d1ef      	bne.n	8002792 <HAL_RCC_ClockConfig+0x106>
 80027b2:	e03a      	b.n	800282a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	d111      	bne.n	80027e0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027bc:	e009      	b.n	80027d2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027be:	f7ff f895 	bl	80018ec <HAL_GetTick>
 80027c2:	0002      	movs	r2, r0
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	4a4d      	ldr	r2, [pc, #308]	; (8002900 <HAL_RCC_ClockConfig+0x274>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e08f      	b.n	80028f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027d2:	4b4c      	ldr	r3, [pc, #304]	; (8002904 <HAL_RCC_ClockConfig+0x278>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	220c      	movs	r2, #12
 80027d8:	4013      	ands	r3, r2
 80027da:	2b0c      	cmp	r3, #12
 80027dc:	d1ef      	bne.n	80027be <HAL_RCC_ClockConfig+0x132>
 80027de:	e024      	b.n	800282a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d11b      	bne.n	8002820 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80027e8:	e009      	b.n	80027fe <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ea:	f7ff f87f 	bl	80018ec <HAL_GetTick>
 80027ee:	0002      	movs	r2, r0
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	4a42      	ldr	r2, [pc, #264]	; (8002900 <HAL_RCC_ClockConfig+0x274>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e079      	b.n	80028f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80027fe:	4b41      	ldr	r3, [pc, #260]	; (8002904 <HAL_RCC_ClockConfig+0x278>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	220c      	movs	r2, #12
 8002804:	4013      	ands	r3, r2
 8002806:	2b04      	cmp	r3, #4
 8002808:	d1ef      	bne.n	80027ea <HAL_RCC_ClockConfig+0x15e>
 800280a:	e00e      	b.n	800282a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800280c:	f7ff f86e 	bl	80018ec <HAL_GetTick>
 8002810:	0002      	movs	r2, r0
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	4a3a      	ldr	r2, [pc, #232]	; (8002900 <HAL_RCC_ClockConfig+0x274>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e068      	b.n	80028f2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002820:	4b38      	ldr	r3, [pc, #224]	; (8002904 <HAL_RCC_ClockConfig+0x278>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	220c      	movs	r2, #12
 8002826:	4013      	ands	r3, r2
 8002828:	d1f0      	bne.n	800280c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800282a:	4b34      	ldr	r3, [pc, #208]	; (80028fc <HAL_RCC_ClockConfig+0x270>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2201      	movs	r2, #1
 8002830:	4013      	ands	r3, r2
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d21e      	bcs.n	8002876 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002838:	4b30      	ldr	r3, [pc, #192]	; (80028fc <HAL_RCC_ClockConfig+0x270>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2201      	movs	r2, #1
 800283e:	4393      	bics	r3, r2
 8002840:	0019      	movs	r1, r3
 8002842:	4b2e      	ldr	r3, [pc, #184]	; (80028fc <HAL_RCC_ClockConfig+0x270>)
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800284a:	f7ff f84f 	bl	80018ec <HAL_GetTick>
 800284e:	0003      	movs	r3, r0
 8002850:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002852:	e009      	b.n	8002868 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002854:	f7ff f84a 	bl	80018ec <HAL_GetTick>
 8002858:	0002      	movs	r2, r0
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	4a28      	ldr	r2, [pc, #160]	; (8002900 <HAL_RCC_ClockConfig+0x274>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e044      	b.n	80028f2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002868:	4b24      	ldr	r3, [pc, #144]	; (80028fc <HAL_RCC_ClockConfig+0x270>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2201      	movs	r2, #1
 800286e:	4013      	ands	r3, r2
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d1ee      	bne.n	8002854 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2204      	movs	r2, #4
 800287c:	4013      	ands	r3, r2
 800287e:	d009      	beq.n	8002894 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002880:	4b20      	ldr	r3, [pc, #128]	; (8002904 <HAL_RCC_ClockConfig+0x278>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	4a20      	ldr	r2, [pc, #128]	; (8002908 <HAL_RCC_ClockConfig+0x27c>)
 8002886:	4013      	ands	r3, r2
 8002888:	0019      	movs	r1, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <HAL_RCC_ClockConfig+0x278>)
 8002890:	430a      	orrs	r2, r1
 8002892:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2208      	movs	r2, #8
 800289a:	4013      	ands	r3, r2
 800289c:	d00a      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800289e:	4b19      	ldr	r3, [pc, #100]	; (8002904 <HAL_RCC_ClockConfig+0x278>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	4a1a      	ldr	r2, [pc, #104]	; (800290c <HAL_RCC_ClockConfig+0x280>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	0019      	movs	r1, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	00da      	lsls	r2, r3, #3
 80028ae:	4b15      	ldr	r3, [pc, #84]	; (8002904 <HAL_RCC_ClockConfig+0x278>)
 80028b0:	430a      	orrs	r2, r1
 80028b2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028b4:	f000 f832 	bl	800291c <HAL_RCC_GetSysClockFreq>
 80028b8:	0001      	movs	r1, r0
 80028ba:	4b12      	ldr	r3, [pc, #72]	; (8002904 <HAL_RCC_ClockConfig+0x278>)
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	091b      	lsrs	r3, r3, #4
 80028c0:	220f      	movs	r2, #15
 80028c2:	4013      	ands	r3, r2
 80028c4:	4a12      	ldr	r2, [pc, #72]	; (8002910 <HAL_RCC_ClockConfig+0x284>)
 80028c6:	5cd3      	ldrb	r3, [r2, r3]
 80028c8:	000a      	movs	r2, r1
 80028ca:	40da      	lsrs	r2, r3
 80028cc:	4b11      	ldr	r3, [pc, #68]	; (8002914 <HAL_RCC_ClockConfig+0x288>)
 80028ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028d0:	4b11      	ldr	r3, [pc, #68]	; (8002918 <HAL_RCC_ClockConfig+0x28c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	250b      	movs	r5, #11
 80028d6:	197c      	adds	r4, r7, r5
 80028d8:	0018      	movs	r0, r3
 80028da:	f7fe ffc1 	bl	8001860 <HAL_InitTick>
 80028de:	0003      	movs	r3, r0
 80028e0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80028e2:	197b      	adds	r3, r7, r5
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d002      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80028ea:	197b      	adds	r3, r7, r5
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	e000      	b.n	80028f2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	0018      	movs	r0, r3
 80028f4:	46bd      	mov	sp, r7
 80028f6:	b004      	add	sp, #16
 80028f8:	bdb0      	pop	{r4, r5, r7, pc}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	40022000 	.word	0x40022000
 8002900:	00001388 	.word	0x00001388
 8002904:	40021000 	.word	0x40021000
 8002908:	fffff8ff 	.word	0xfffff8ff
 800290c:	ffffc7ff 	.word	0xffffc7ff
 8002910:	08003650 	.word	0x08003650
 8002914:	20000000 	.word	0x20000000
 8002918:	20000004 	.word	0x20000004

0800291c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800291c:	b5b0      	push	{r4, r5, r7, lr}
 800291e:	b08e      	sub	sp, #56	; 0x38
 8002920:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002922:	4b4c      	ldr	r3, [pc, #304]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x138>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800292a:	230c      	movs	r3, #12
 800292c:	4013      	ands	r3, r2
 800292e:	2b0c      	cmp	r3, #12
 8002930:	d014      	beq.n	800295c <HAL_RCC_GetSysClockFreq+0x40>
 8002932:	d900      	bls.n	8002936 <HAL_RCC_GetSysClockFreq+0x1a>
 8002934:	e07b      	b.n	8002a2e <HAL_RCC_GetSysClockFreq+0x112>
 8002936:	2b04      	cmp	r3, #4
 8002938:	d002      	beq.n	8002940 <HAL_RCC_GetSysClockFreq+0x24>
 800293a:	2b08      	cmp	r3, #8
 800293c:	d00b      	beq.n	8002956 <HAL_RCC_GetSysClockFreq+0x3a>
 800293e:	e076      	b.n	8002a2e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002940:	4b44      	ldr	r3, [pc, #272]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x138>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2210      	movs	r2, #16
 8002946:	4013      	ands	r3, r2
 8002948:	d002      	beq.n	8002950 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800294a:	4b43      	ldr	r3, [pc, #268]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x13c>)
 800294c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800294e:	e07c      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002950:	4b42      	ldr	r3, [pc, #264]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x140>)
 8002952:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002954:	e079      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002956:	4b42      	ldr	r3, [pc, #264]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x144>)
 8002958:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800295a:	e076      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800295c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295e:	0c9a      	lsrs	r2, r3, #18
 8002960:	230f      	movs	r3, #15
 8002962:	401a      	ands	r2, r3
 8002964:	4b3f      	ldr	r3, [pc, #252]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x148>)
 8002966:	5c9b      	ldrb	r3, [r3, r2]
 8002968:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800296a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296c:	0d9a      	lsrs	r2, r3, #22
 800296e:	2303      	movs	r3, #3
 8002970:	4013      	ands	r3, r2
 8002972:	3301      	adds	r3, #1
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002976:	4b37      	ldr	r3, [pc, #220]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x138>)
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	2380      	movs	r3, #128	; 0x80
 800297c:	025b      	lsls	r3, r3, #9
 800297e:	4013      	ands	r3, r2
 8002980:	d01a      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002984:	61bb      	str	r3, [r7, #24]
 8002986:	2300      	movs	r3, #0
 8002988:	61fb      	str	r3, [r7, #28]
 800298a:	4a35      	ldr	r2, [pc, #212]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x144>)
 800298c:	2300      	movs	r3, #0
 800298e:	69b8      	ldr	r0, [r7, #24]
 8002990:	69f9      	ldr	r1, [r7, #28]
 8002992:	f7fd fc65 	bl	8000260 <__aeabi_lmul>
 8002996:	0002      	movs	r2, r0
 8002998:	000b      	movs	r3, r1
 800299a:	0010      	movs	r0, r2
 800299c:	0019      	movs	r1, r3
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	613b      	str	r3, [r7, #16]
 80029a2:	2300      	movs	r3, #0
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f7fd fc39 	bl	8000220 <__aeabi_uldivmod>
 80029ae:	0002      	movs	r2, r0
 80029b0:	000b      	movs	r3, r1
 80029b2:	0013      	movs	r3, r2
 80029b4:	637b      	str	r3, [r7, #52]	; 0x34
 80029b6:	e037      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80029b8:	4b26      	ldr	r3, [pc, #152]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x138>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2210      	movs	r2, #16
 80029be:	4013      	ands	r3, r2
 80029c0:	d01a      	beq.n	80029f8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80029c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	4a23      	ldr	r2, [pc, #140]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x13c>)
 80029cc:	2300      	movs	r3, #0
 80029ce:	68b8      	ldr	r0, [r7, #8]
 80029d0:	68f9      	ldr	r1, [r7, #12]
 80029d2:	f7fd fc45 	bl	8000260 <__aeabi_lmul>
 80029d6:	0002      	movs	r2, r0
 80029d8:	000b      	movs	r3, r1
 80029da:	0010      	movs	r0, r2
 80029dc:	0019      	movs	r1, r3
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	603b      	str	r3, [r7, #0]
 80029e2:	2300      	movs	r3, #0
 80029e4:	607b      	str	r3, [r7, #4]
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f7fd fc19 	bl	8000220 <__aeabi_uldivmod>
 80029ee:	0002      	movs	r2, r0
 80029f0:	000b      	movs	r3, r1
 80029f2:	0013      	movs	r3, r2
 80029f4:	637b      	str	r3, [r7, #52]	; 0x34
 80029f6:	e017      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80029f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fa:	0018      	movs	r0, r3
 80029fc:	2300      	movs	r3, #0
 80029fe:	0019      	movs	r1, r3
 8002a00:	4a16      	ldr	r2, [pc, #88]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x140>)
 8002a02:	2300      	movs	r3, #0
 8002a04:	f7fd fc2c 	bl	8000260 <__aeabi_lmul>
 8002a08:	0002      	movs	r2, r0
 8002a0a:	000b      	movs	r3, r1
 8002a0c:	0010      	movs	r0, r2
 8002a0e:	0019      	movs	r1, r3
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	001c      	movs	r4, r3
 8002a14:	2300      	movs	r3, #0
 8002a16:	001d      	movs	r5, r3
 8002a18:	0022      	movs	r2, r4
 8002a1a:	002b      	movs	r3, r5
 8002a1c:	f7fd fc00 	bl	8000220 <__aeabi_uldivmod>
 8002a20:	0002      	movs	r2, r0
 8002a22:	000b      	movs	r3, r1
 8002a24:	0013      	movs	r3, r2
 8002a26:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a2a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a2c:	e00d      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002a2e:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x138>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	0b5b      	lsrs	r3, r3, #13
 8002a34:	2207      	movs	r2, #7
 8002a36:	4013      	ands	r3, r2
 8002a38:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	2280      	movs	r2, #128	; 0x80
 8002a40:	0212      	lsls	r2, r2, #8
 8002a42:	409a      	lsls	r2, r3
 8002a44:	0013      	movs	r3, r2
 8002a46:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a48:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b00e      	add	sp, #56	; 0x38
 8002a52:	bdb0      	pop	{r4, r5, r7, pc}
 8002a54:	40021000 	.word	0x40021000
 8002a58:	003d0900 	.word	0x003d0900
 8002a5c:	00f42400 	.word	0x00f42400
 8002a60:	007a1200 	.word	0x007a1200
 8002a64:	08003660 	.word	0x08003660

08002a68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e032      	b.n	8002ae0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2239      	movs	r2, #57	; 0x39
 8002a7e:	5c9b      	ldrb	r3, [r3, r2]
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d107      	bne.n	8002a96 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2238      	movs	r2, #56	; 0x38
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	0018      	movs	r0, r3
 8002a92:	f7fe fe0f 	bl	80016b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2239      	movs	r2, #57	; 0x39
 8002a9a:	2102      	movs	r1, #2
 8002a9c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	0019      	movs	r1, r3
 8002aa8:	0010      	movs	r0, r2
 8002aaa:	f000 fadb 	bl	8003064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	223e      	movs	r2, #62	; 0x3e
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	223a      	movs	r2, #58	; 0x3a
 8002aba:	2101      	movs	r1, #1
 8002abc:	5499      	strb	r1, [r3, r2]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	223b      	movs	r2, #59	; 0x3b
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	5499      	strb	r1, [r3, r2]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	223c      	movs	r2, #60	; 0x3c
 8002aca:	2101      	movs	r1, #1
 8002acc:	5499      	strb	r1, [r3, r2]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	223d      	movs	r2, #61	; 0x3d
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2239      	movs	r2, #57	; 0x39
 8002ada:	2101      	movs	r1, #1
 8002adc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b002      	add	sp, #8
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2239      	movs	r2, #57	; 0x39
 8002af4:	5c9b      	ldrb	r3, [r3, r2]
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d001      	beq.n	8002b00 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e033      	b.n	8002b68 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2239      	movs	r2, #57	; 0x39
 8002b04:	2102      	movs	r1, #2
 8002b06:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	2380      	movs	r3, #128	; 0x80
 8002b0e:	05db      	lsls	r3, r3, #23
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d00e      	beq.n	8002b32 <HAL_TIM_Base_Start+0x4a>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a15      	ldr	r2, [pc, #84]	; (8002b70 <HAL_TIM_Base_Start+0x88>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d009      	beq.n	8002b32 <HAL_TIM_Base_Start+0x4a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a14      	ldr	r2, [pc, #80]	; (8002b74 <HAL_TIM_Base_Start+0x8c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d004      	beq.n	8002b32 <HAL_TIM_Base_Start+0x4a>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a12      	ldr	r2, [pc, #72]	; (8002b78 <HAL_TIM_Base_Start+0x90>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d111      	bne.n	8002b56 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	2207      	movs	r2, #7
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b06      	cmp	r3, #6
 8002b42:	d010      	beq.n	8002b66 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2101      	movs	r1, #1
 8002b50:	430a      	orrs	r2, r1
 8002b52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b54:	e007      	b.n	8002b66 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2101      	movs	r1, #1
 8002b62:	430a      	orrs	r2, r1
 8002b64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	0018      	movs	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	b004      	add	sp, #16
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40000400 	.word	0x40000400
 8002b74:	40010800 	.word	0x40010800
 8002b78:	40011400 	.word	0x40011400

08002b7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e032      	b.n	8002bf4 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2239      	movs	r2, #57	; 0x39
 8002b92:	5c9b      	ldrb	r3, [r3, r2]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d107      	bne.n	8002baa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2238      	movs	r2, #56	; 0x38
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f000 f829 	bl	8002bfc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2239      	movs	r2, #57	; 0x39
 8002bae:	2102      	movs	r1, #2
 8002bb0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	0019      	movs	r1, r3
 8002bbc:	0010      	movs	r0, r2
 8002bbe:	f000 fa51 	bl	8003064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	223e      	movs	r2, #62	; 0x3e
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	223a      	movs	r2, #58	; 0x3a
 8002bce:	2101      	movs	r1, #1
 8002bd0:	5499      	strb	r1, [r3, r2]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	223b      	movs	r2, #59	; 0x3b
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	5499      	strb	r1, [r3, r2]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	223c      	movs	r2, #60	; 0x3c
 8002bde:	2101      	movs	r1, #1
 8002be0:	5499      	strb	r1, [r3, r2]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	223d      	movs	r2, #61	; 0x3d
 8002be6:	2101      	movs	r1, #1
 8002be8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2239      	movs	r2, #57	; 0x39
 8002bee:	2101      	movs	r1, #1
 8002bf0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	b002      	add	sp, #8
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c04:	46c0      	nop			; (mov r8, r8)
 8002c06:	46bd      	mov	sp, r7
 8002c08:	b002      	add	sp, #8
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d108      	bne.n	8002c2e <HAL_TIM_PWM_Start+0x22>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	223a      	movs	r2, #58	; 0x3a
 8002c20:	5c9b      	ldrb	r3, [r3, r2]
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	1e5a      	subs	r2, r3, #1
 8002c28:	4193      	sbcs	r3, r2
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	e01f      	b.n	8002c6e <HAL_TIM_PWM_Start+0x62>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b04      	cmp	r3, #4
 8002c32:	d108      	bne.n	8002c46 <HAL_TIM_PWM_Start+0x3a>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	223b      	movs	r2, #59	; 0x3b
 8002c38:	5c9b      	ldrb	r3, [r3, r2]
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	1e5a      	subs	r2, r3, #1
 8002c40:	4193      	sbcs	r3, r2
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	e013      	b.n	8002c6e <HAL_TIM_PWM_Start+0x62>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	d108      	bne.n	8002c5e <HAL_TIM_PWM_Start+0x52>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	223c      	movs	r2, #60	; 0x3c
 8002c50:	5c9b      	ldrb	r3, [r3, r2]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	3b01      	subs	r3, #1
 8002c56:	1e5a      	subs	r2, r3, #1
 8002c58:	4193      	sbcs	r3, r2
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	e007      	b.n	8002c6e <HAL_TIM_PWM_Start+0x62>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	223d      	movs	r2, #61	; 0x3d
 8002c62:	5c9b      	ldrb	r3, [r3, r2]
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	3b01      	subs	r3, #1
 8002c68:	1e5a      	subs	r2, r3, #1
 8002c6a:	4193      	sbcs	r3, r2
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e052      	b.n	8002d1c <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d104      	bne.n	8002c86 <HAL_TIM_PWM_Start+0x7a>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	223a      	movs	r2, #58	; 0x3a
 8002c80:	2102      	movs	r1, #2
 8002c82:	5499      	strb	r1, [r3, r2]
 8002c84:	e013      	b.n	8002cae <HAL_TIM_PWM_Start+0xa2>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d104      	bne.n	8002c96 <HAL_TIM_PWM_Start+0x8a>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	223b      	movs	r2, #59	; 0x3b
 8002c90:	2102      	movs	r1, #2
 8002c92:	5499      	strb	r1, [r3, r2]
 8002c94:	e00b      	b.n	8002cae <HAL_TIM_PWM_Start+0xa2>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b08      	cmp	r3, #8
 8002c9a:	d104      	bne.n	8002ca6 <HAL_TIM_PWM_Start+0x9a>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	223c      	movs	r2, #60	; 0x3c
 8002ca0:	2102      	movs	r1, #2
 8002ca2:	5499      	strb	r1, [r3, r2]
 8002ca4:	e003      	b.n	8002cae <HAL_TIM_PWM_Start+0xa2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	223d      	movs	r2, #61	; 0x3d
 8002caa:	2102      	movs	r1, #2
 8002cac:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6839      	ldr	r1, [r7, #0]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	f000 fbd0 	bl	800345c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	05db      	lsls	r3, r3, #23
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d00e      	beq.n	8002ce6 <HAL_TIM_PWM_Start+0xda>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a15      	ldr	r2, [pc, #84]	; (8002d24 <HAL_TIM_PWM_Start+0x118>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d009      	beq.n	8002ce6 <HAL_TIM_PWM_Start+0xda>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a14      	ldr	r2, [pc, #80]	; (8002d28 <HAL_TIM_PWM_Start+0x11c>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d004      	beq.n	8002ce6 <HAL_TIM_PWM_Start+0xda>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a12      	ldr	r2, [pc, #72]	; (8002d2c <HAL_TIM_PWM_Start+0x120>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d111      	bne.n	8002d0a <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	2207      	movs	r2, #7
 8002cee:	4013      	ands	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2b06      	cmp	r3, #6
 8002cf6:	d010      	beq.n	8002d1a <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2101      	movs	r1, #1
 8002d04:	430a      	orrs	r2, r1
 8002d06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d08:	e007      	b.n	8002d1a <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2101      	movs	r1, #1
 8002d16:	430a      	orrs	r2, r1
 8002d18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b004      	add	sp, #16
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40000400 	.word	0x40000400
 8002d28:	40010800 	.word	0x40010800
 8002d2c:	40011400 	.word	0x40011400

08002d30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d3c:	2317      	movs	r3, #23
 8002d3e:	18fb      	adds	r3, r7, r3
 8002d40:	2200      	movs	r2, #0
 8002d42:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2238      	movs	r2, #56	; 0x38
 8002d48:	5c9b      	ldrb	r3, [r3, r2]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e0ad      	b.n	8002eae <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2238      	movs	r2, #56	; 0x38
 8002d56:	2101      	movs	r1, #1
 8002d58:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b0c      	cmp	r3, #12
 8002d5e:	d100      	bne.n	8002d62 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002d60:	e076      	b.n	8002e50 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b0c      	cmp	r3, #12
 8002d66:	d900      	bls.n	8002d6a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002d68:	e095      	b.n	8002e96 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d04e      	beq.n	8002e0e <HAL_TIM_PWM_ConfigChannel+0xde>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b08      	cmp	r3, #8
 8002d74:	d900      	bls.n	8002d78 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002d76:	e08e      	b.n	8002e96 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_TIM_PWM_ConfigChannel+0x56>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	d021      	beq.n	8002dc8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002d84:	e087      	b.n	8002e96 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	0011      	movs	r1, r2
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f000 f9c6 	bl	8003120 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699a      	ldr	r2, [r3, #24]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2108      	movs	r1, #8
 8002da0:	430a      	orrs	r2, r1
 8002da2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699a      	ldr	r2, [r3, #24]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2104      	movs	r1, #4
 8002db0:	438a      	bics	r2, r1
 8002db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6999      	ldr	r1, [r3, #24]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	619a      	str	r2, [r3, #24]
      break;
 8002dc6:	e06b      	b.n	8002ea0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	0011      	movs	r1, r2
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f000 f9e1 	bl	8003198 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699a      	ldr	r2, [r3, #24]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2180      	movs	r1, #128	; 0x80
 8002de2:	0109      	lsls	r1, r1, #4
 8002de4:	430a      	orrs	r2, r1
 8002de6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	699a      	ldr	r2, [r3, #24]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4931      	ldr	r1, [pc, #196]	; (8002eb8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002df4:	400a      	ands	r2, r1
 8002df6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6999      	ldr	r1, [r3, #24]
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	021a      	lsls	r2, r3, #8
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	619a      	str	r2, [r3, #24]
      break;
 8002e0c:	e048      	b.n	8002ea0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	0011      	movs	r1, r2
 8002e16:	0018      	movs	r0, r3
 8002e18:	f000 fa00 	bl	800321c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	69da      	ldr	r2, [r3, #28]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2108      	movs	r1, #8
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	69da      	ldr	r2, [r3, #28]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2104      	movs	r1, #4
 8002e38:	438a      	bics	r2, r1
 8002e3a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	69d9      	ldr	r1, [r3, #28]
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	61da      	str	r2, [r3, #28]
      break;
 8002e4e:	e027      	b.n	8002ea0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	0011      	movs	r1, r2
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f000 fa1f 	bl	800329c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	69da      	ldr	r2, [r3, #28]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2180      	movs	r1, #128	; 0x80
 8002e6a:	0109      	lsls	r1, r1, #4
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	69da      	ldr	r2, [r3, #28]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	490f      	ldr	r1, [pc, #60]	; (8002eb8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002e7c:	400a      	ands	r2, r1
 8002e7e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	69d9      	ldr	r1, [r3, #28]
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	021a      	lsls	r2, r3, #8
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	61da      	str	r2, [r3, #28]
      break;
 8002e94:	e004      	b.n	8002ea0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002e96:	2317      	movs	r3, #23
 8002e98:	18fb      	adds	r3, r7, r3
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	701a      	strb	r2, [r3, #0]
      break;
 8002e9e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2238      	movs	r2, #56	; 0x38
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	5499      	strb	r1, [r3, r2]

  return status;
 8002ea8:	2317      	movs	r3, #23
 8002eaa:	18fb      	adds	r3, r7, r3
 8002eac:	781b      	ldrb	r3, [r3, #0]
}
 8002eae:	0018      	movs	r0, r3
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	b006      	add	sp, #24
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	fffffbff 	.word	0xfffffbff

08002ebc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec6:	230f      	movs	r3, #15
 8002ec8:	18fb      	adds	r3, r7, r3
 8002eca:	2200      	movs	r2, #0
 8002ecc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2238      	movs	r2, #56	; 0x38
 8002ed2:	5c9b      	ldrb	r3, [r3, r2]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_TIM_ConfigClockSource+0x20>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e0bc      	b.n	8003056 <HAL_TIM_ConfigClockSource+0x19a>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2238      	movs	r2, #56	; 0x38
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2239      	movs	r2, #57	; 0x39
 8002ee8:	2102      	movs	r1, #2
 8002eea:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2277      	movs	r2, #119	; 0x77
 8002ef8:	4393      	bics	r3, r2
 8002efa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	4a58      	ldr	r2, [pc, #352]	; (8003060 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2280      	movs	r2, #128	; 0x80
 8002f12:	0192      	lsls	r2, r2, #6
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d040      	beq.n	8002f9a <HAL_TIM_ConfigClockSource+0xde>
 8002f18:	2280      	movs	r2, #128	; 0x80
 8002f1a:	0192      	lsls	r2, r2, #6
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d900      	bls.n	8002f22 <HAL_TIM_ConfigClockSource+0x66>
 8002f20:	e088      	b.n	8003034 <HAL_TIM_ConfigClockSource+0x178>
 8002f22:	2280      	movs	r2, #128	; 0x80
 8002f24:	0152      	lsls	r2, r2, #5
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d100      	bne.n	8002f2c <HAL_TIM_ConfigClockSource+0x70>
 8002f2a:	e088      	b.n	800303e <HAL_TIM_ConfigClockSource+0x182>
 8002f2c:	2280      	movs	r2, #128	; 0x80
 8002f2e:	0152      	lsls	r2, r2, #5
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d900      	bls.n	8002f36 <HAL_TIM_ConfigClockSource+0x7a>
 8002f34:	e07e      	b.n	8003034 <HAL_TIM_ConfigClockSource+0x178>
 8002f36:	2b70      	cmp	r3, #112	; 0x70
 8002f38:	d018      	beq.n	8002f6c <HAL_TIM_ConfigClockSource+0xb0>
 8002f3a:	d900      	bls.n	8002f3e <HAL_TIM_ConfigClockSource+0x82>
 8002f3c:	e07a      	b.n	8003034 <HAL_TIM_ConfigClockSource+0x178>
 8002f3e:	2b60      	cmp	r3, #96	; 0x60
 8002f40:	d04f      	beq.n	8002fe2 <HAL_TIM_ConfigClockSource+0x126>
 8002f42:	d900      	bls.n	8002f46 <HAL_TIM_ConfigClockSource+0x8a>
 8002f44:	e076      	b.n	8003034 <HAL_TIM_ConfigClockSource+0x178>
 8002f46:	2b50      	cmp	r3, #80	; 0x50
 8002f48:	d03b      	beq.n	8002fc2 <HAL_TIM_ConfigClockSource+0x106>
 8002f4a:	d900      	bls.n	8002f4e <HAL_TIM_ConfigClockSource+0x92>
 8002f4c:	e072      	b.n	8003034 <HAL_TIM_ConfigClockSource+0x178>
 8002f4e:	2b40      	cmp	r3, #64	; 0x40
 8002f50:	d057      	beq.n	8003002 <HAL_TIM_ConfigClockSource+0x146>
 8002f52:	d900      	bls.n	8002f56 <HAL_TIM_ConfigClockSource+0x9a>
 8002f54:	e06e      	b.n	8003034 <HAL_TIM_ConfigClockSource+0x178>
 8002f56:	2b30      	cmp	r3, #48	; 0x30
 8002f58:	d063      	beq.n	8003022 <HAL_TIM_ConfigClockSource+0x166>
 8002f5a:	d86b      	bhi.n	8003034 <HAL_TIM_ConfigClockSource+0x178>
 8002f5c:	2b20      	cmp	r3, #32
 8002f5e:	d060      	beq.n	8003022 <HAL_TIM_ConfigClockSource+0x166>
 8002f60:	d868      	bhi.n	8003034 <HAL_TIM_ConfigClockSource+0x178>
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d05d      	beq.n	8003022 <HAL_TIM_ConfigClockSource+0x166>
 8002f66:	2b10      	cmp	r3, #16
 8002f68:	d05b      	beq.n	8003022 <HAL_TIM_ConfigClockSource+0x166>
 8002f6a:	e063      	b.n	8003034 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6818      	ldr	r0, [r3, #0]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	6899      	ldr	r1, [r3, #8]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f000 fa4e 	bl	800341c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2277      	movs	r2, #119	; 0x77
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	609a      	str	r2, [r3, #8]
      break;
 8002f98:	e052      	b.n	8003040 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6818      	ldr	r0, [r3, #0]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	6899      	ldr	r1, [r3, #8]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f000 fa37 	bl	800341c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2180      	movs	r1, #128	; 0x80
 8002fba:	01c9      	lsls	r1, r1, #7
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	609a      	str	r2, [r3, #8]
      break;
 8002fc0:	e03e      	b.n	8003040 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6818      	ldr	r0, [r3, #0]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	6859      	ldr	r1, [r3, #4]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	001a      	movs	r2, r3
 8002fd0:	f000 f9aa 	bl	8003328 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2150      	movs	r1, #80	; 0x50
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f000 fa04 	bl	80033e8 <TIM_ITRx_SetConfig>
      break;
 8002fe0:	e02e      	b.n	8003040 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6818      	ldr	r0, [r3, #0]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	6859      	ldr	r1, [r3, #4]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	001a      	movs	r2, r3
 8002ff0:	f000 f9c8 	bl	8003384 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2160      	movs	r1, #96	; 0x60
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f000 f9f4 	bl	80033e8 <TIM_ITRx_SetConfig>
      break;
 8003000:	e01e      	b.n	8003040 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6818      	ldr	r0, [r3, #0]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	6859      	ldr	r1, [r3, #4]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	001a      	movs	r2, r3
 8003010:	f000 f98a 	bl	8003328 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2140      	movs	r1, #64	; 0x40
 800301a:	0018      	movs	r0, r3
 800301c:	f000 f9e4 	bl	80033e8 <TIM_ITRx_SetConfig>
      break;
 8003020:	e00e      	b.n	8003040 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	0019      	movs	r1, r3
 800302c:	0010      	movs	r0, r2
 800302e:	f000 f9db 	bl	80033e8 <TIM_ITRx_SetConfig>
      break;
 8003032:	e005      	b.n	8003040 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003034:	230f      	movs	r3, #15
 8003036:	18fb      	adds	r3, r7, r3
 8003038:	2201      	movs	r2, #1
 800303a:	701a      	strb	r2, [r3, #0]
      break;
 800303c:	e000      	b.n	8003040 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800303e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2239      	movs	r2, #57	; 0x39
 8003044:	2101      	movs	r1, #1
 8003046:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2238      	movs	r2, #56	; 0x38
 800304c:	2100      	movs	r1, #0
 800304e:	5499      	strb	r1, [r3, r2]

  return status;
 8003050:	230f      	movs	r3, #15
 8003052:	18fb      	adds	r3, r7, r3
 8003054:	781b      	ldrb	r3, [r3, #0]
}
 8003056:	0018      	movs	r0, r3
 8003058:	46bd      	mov	sp, r7
 800305a:	b004      	add	sp, #16
 800305c:	bd80      	pop	{r7, pc}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	ffff00ff 	.word	0xffff00ff

08003064 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	2380      	movs	r3, #128	; 0x80
 8003078:	05db      	lsls	r3, r3, #23
 800307a:	429a      	cmp	r2, r3
 800307c:	d00b      	beq.n	8003096 <TIM_Base_SetConfig+0x32>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a23      	ldr	r2, [pc, #140]	; (8003110 <TIM_Base_SetConfig+0xac>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d007      	beq.n	8003096 <TIM_Base_SetConfig+0x32>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a22      	ldr	r2, [pc, #136]	; (8003114 <TIM_Base_SetConfig+0xb0>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d003      	beq.n	8003096 <TIM_Base_SetConfig+0x32>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a21      	ldr	r2, [pc, #132]	; (8003118 <TIM_Base_SetConfig+0xb4>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d108      	bne.n	80030a8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2270      	movs	r2, #112	; 0x70
 800309a:	4393      	bics	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	2380      	movs	r3, #128	; 0x80
 80030ac:	05db      	lsls	r3, r3, #23
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d00b      	beq.n	80030ca <TIM_Base_SetConfig+0x66>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a16      	ldr	r2, [pc, #88]	; (8003110 <TIM_Base_SetConfig+0xac>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d007      	beq.n	80030ca <TIM_Base_SetConfig+0x66>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a15      	ldr	r2, [pc, #84]	; (8003114 <TIM_Base_SetConfig+0xb0>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d003      	beq.n	80030ca <TIM_Base_SetConfig+0x66>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a14      	ldr	r2, [pc, #80]	; (8003118 <TIM_Base_SetConfig+0xb4>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d108      	bne.n	80030dc <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4a13      	ldr	r2, [pc, #76]	; (800311c <TIM_Base_SetConfig+0xb8>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	4313      	orrs	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2280      	movs	r2, #128	; 0x80
 80030e0:	4393      	bics	r3, r2
 80030e2:	001a      	movs	r2, r3
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	615a      	str	r2, [r3, #20]
}
 8003108:	46c0      	nop			; (mov r8, r8)
 800310a:	46bd      	mov	sp, r7
 800310c:	b004      	add	sp, #16
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40000400 	.word	0x40000400
 8003114:	40010800 	.word	0x40010800
 8003118:	40011400 	.word	0x40011400
 800311c:	fffffcff 	.word	0xfffffcff

08003120 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	2201      	movs	r2, #1
 8003130:	4393      	bics	r3, r2
 8003132:	001a      	movs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2270      	movs	r2, #112	; 0x70
 800314e:	4393      	bics	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2203      	movs	r2, #3
 8003156:	4393      	bics	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	4313      	orrs	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	2202      	movs	r2, #2
 8003168:	4393      	bics	r3, r2
 800316a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	4313      	orrs	r3, r2
 8003174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	621a      	str	r2, [r3, #32]
}
 8003190:	46c0      	nop			; (mov r8, r8)
 8003192:	46bd      	mov	sp, r7
 8003194:	b006      	add	sp, #24
 8003196:	bd80      	pop	{r7, pc}

08003198 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	2210      	movs	r2, #16
 80031a8:	4393      	bics	r3, r2
 80031aa:	001a      	movs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4a13      	ldr	r2, [pc, #76]	; (8003214 <TIM_OC2_SetConfig+0x7c>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4a12      	ldr	r2, [pc, #72]	; (8003218 <TIM_OC2_SetConfig+0x80>)
 80031ce:	4013      	ands	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	021b      	lsls	r3, r3, #8
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	4313      	orrs	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2220      	movs	r2, #32
 80031e2:	4393      	bics	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	621a      	str	r2, [r3, #32]
}
 800320c:	46c0      	nop			; (mov r8, r8)
 800320e:	46bd      	mov	sp, r7
 8003210:	b006      	add	sp, #24
 8003212:	bd80      	pop	{r7, pc}
 8003214:	ffff8fff 	.word	0xffff8fff
 8003218:	fffffcff 	.word	0xfffffcff

0800321c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	4a1a      	ldr	r2, [pc, #104]	; (8003294 <TIM_OC3_SetConfig+0x78>)
 800322c:	401a      	ands	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2270      	movs	r2, #112	; 0x70
 8003248:	4393      	bics	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2203      	movs	r2, #3
 8003250:	4393      	bics	r3, r2
 8003252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	4313      	orrs	r3, r2
 800325c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	4a0d      	ldr	r2, [pc, #52]	; (8003298 <TIM_OC3_SetConfig+0x7c>)
 8003262:	4013      	ands	r3, r2
 8003264:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	021b      	lsls	r3, r3, #8
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	4313      	orrs	r3, r2
 8003270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	621a      	str	r2, [r3, #32]
}
 800328c:	46c0      	nop			; (mov r8, r8)
 800328e:	46bd      	mov	sp, r7
 8003290:	b006      	add	sp, #24
 8003292:	bd80      	pop	{r7, pc}
 8003294:	fffffeff 	.word	0xfffffeff
 8003298:	fffffdff 	.word	0xfffffdff

0800329c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	4a1b      	ldr	r2, [pc, #108]	; (8003318 <TIM_OC4_SetConfig+0x7c>)
 80032ac:	401a      	ands	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4a15      	ldr	r2, [pc, #84]	; (800331c <TIM_OC4_SetConfig+0x80>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4a14      	ldr	r2, [pc, #80]	; (8003320 <TIM_OC4_SetConfig+0x84>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	021b      	lsls	r3, r3, #8
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	4313      	orrs	r3, r2
 80032de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	4a10      	ldr	r2, [pc, #64]	; (8003324 <TIM_OC4_SetConfig+0x88>)
 80032e4:	4013      	ands	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	031b      	lsls	r3, r3, #12
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	621a      	str	r2, [r3, #32]
}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	46bd      	mov	sp, r7
 8003312:	b006      	add	sp, #24
 8003314:	bd80      	pop	{r7, pc}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	ffffefff 	.word	0xffffefff
 800331c:	ffff8fff 	.word	0xffff8fff
 8003320:	fffffcff 	.word	0xfffffcff
 8003324:	ffffdfff 	.word	0xffffdfff

08003328 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	2201      	movs	r2, #1
 8003340:	4393      	bics	r3, r2
 8003342:	001a      	movs	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	22f0      	movs	r2, #240	; 0xf0
 8003352:	4393      	bics	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	220a      	movs	r2, #10
 8003364:	4393      	bics	r3, r2
 8003366:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	4313      	orrs	r3, r2
 800336e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	621a      	str	r2, [r3, #32]
}
 800337c:	46c0      	nop			; (mov r8, r8)
 800337e:	46bd      	mov	sp, r7
 8003380:	b006      	add	sp, #24
 8003382:	bd80      	pop	{r7, pc}

08003384 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	2210      	movs	r2, #16
 8003396:	4393      	bics	r3, r2
 8003398:	001a      	movs	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	4a0d      	ldr	r2, [pc, #52]	; (80033e4 <TIM_TI2_ConfigInputStage+0x60>)
 80033ae:	4013      	ands	r3, r2
 80033b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	031b      	lsls	r3, r3, #12
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	22a0      	movs	r2, #160	; 0xa0
 80033c0:	4393      	bics	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	621a      	str	r2, [r3, #32]
}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	46bd      	mov	sp, r7
 80033de:	b006      	add	sp, #24
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	ffff0fff 	.word	0xffff0fff

080033e8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2270      	movs	r2, #112	; 0x70
 80033fc:	4393      	bics	r3, r2
 80033fe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	4313      	orrs	r3, r2
 8003406:	2207      	movs	r2, #7
 8003408:	4313      	orrs	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	609a      	str	r2, [r3, #8]
}
 8003412:	46c0      	nop			; (mov r8, r8)
 8003414:	46bd      	mov	sp, r7
 8003416:	b004      	add	sp, #16
 8003418:	bd80      	pop	{r7, pc}
	...

0800341c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
 8003428:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	4a09      	ldr	r2, [pc, #36]	; (8003458 <TIM_ETR_SetConfig+0x3c>)
 8003434:	4013      	ands	r3, r2
 8003436:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	021a      	lsls	r2, r3, #8
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	431a      	orrs	r2, r3
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	4313      	orrs	r3, r2
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	4313      	orrs	r3, r2
 8003448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	609a      	str	r2, [r3, #8]
}
 8003450:	46c0      	nop			; (mov r8, r8)
 8003452:	46bd      	mov	sp, r7
 8003454:	b006      	add	sp, #24
 8003456:	bd80      	pop	{r7, pc}
 8003458:	ffff00ff 	.word	0xffff00ff

0800345c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	221f      	movs	r2, #31
 800346c:	4013      	ands	r3, r2
 800346e:	2201      	movs	r2, #1
 8003470:	409a      	lsls	r2, r3
 8003472:	0013      	movs	r3, r2
 8003474:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	43d2      	mvns	r2, r2
 800347e:	401a      	ands	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6a1a      	ldr	r2, [r3, #32]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	211f      	movs	r1, #31
 800348c:	400b      	ands	r3, r1
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	4099      	lsls	r1, r3
 8003492:	000b      	movs	r3, r1
 8003494:	431a      	orrs	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	621a      	str	r2, [r3, #32]
}
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	46bd      	mov	sp, r7
 800349e:	b006      	add	sp, #24
 80034a0:	bd80      	pop	{r7, pc}
	...

080034a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2238      	movs	r2, #56	; 0x38
 80034b2:	5c9b      	ldrb	r3, [r3, r2]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d101      	bne.n	80034bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034b8:	2302      	movs	r3, #2
 80034ba:	e047      	b.n	800354c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2238      	movs	r2, #56	; 0x38
 80034c0:	2101      	movs	r1, #1
 80034c2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2239      	movs	r2, #57	; 0x39
 80034c8:	2102      	movs	r1, #2
 80034ca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2270      	movs	r2, #112	; 0x70
 80034e0:	4393      	bics	r3, r2
 80034e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	2380      	movs	r3, #128	; 0x80
 80034fc:	05db      	lsls	r3, r3, #23
 80034fe:	429a      	cmp	r2, r3
 8003500:	d00e      	beq.n	8003520 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a13      	ldr	r2, [pc, #76]	; (8003554 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d009      	beq.n	8003520 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a11      	ldr	r2, [pc, #68]	; (8003558 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d004      	beq.n	8003520 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a10      	ldr	r2, [pc, #64]	; (800355c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d10c      	bne.n	800353a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2280      	movs	r2, #128	; 0x80
 8003524:	4393      	bics	r3, r2
 8003526:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	4313      	orrs	r3, r2
 8003530:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2239      	movs	r2, #57	; 0x39
 800353e:	2101      	movs	r1, #1
 8003540:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2238      	movs	r2, #56	; 0x38
 8003546:	2100      	movs	r1, #0
 8003548:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	0018      	movs	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	b004      	add	sp, #16
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40000400 	.word	0x40000400
 8003558:	40010800 	.word	0x40010800
 800355c:	40011400 	.word	0x40011400

08003560 <__libc_init_array>:
 8003560:	b570      	push	{r4, r5, r6, lr}
 8003562:	2600      	movs	r6, #0
 8003564:	4d0c      	ldr	r5, [pc, #48]	; (8003598 <__libc_init_array+0x38>)
 8003566:	4c0d      	ldr	r4, [pc, #52]	; (800359c <__libc_init_array+0x3c>)
 8003568:	1b64      	subs	r4, r4, r5
 800356a:	10a4      	asrs	r4, r4, #2
 800356c:	42a6      	cmp	r6, r4
 800356e:	d109      	bne.n	8003584 <__libc_init_array+0x24>
 8003570:	2600      	movs	r6, #0
 8003572:	f000 f821 	bl	80035b8 <_init>
 8003576:	4d0a      	ldr	r5, [pc, #40]	; (80035a0 <__libc_init_array+0x40>)
 8003578:	4c0a      	ldr	r4, [pc, #40]	; (80035a4 <__libc_init_array+0x44>)
 800357a:	1b64      	subs	r4, r4, r5
 800357c:	10a4      	asrs	r4, r4, #2
 800357e:	42a6      	cmp	r6, r4
 8003580:	d105      	bne.n	800358e <__libc_init_array+0x2e>
 8003582:	bd70      	pop	{r4, r5, r6, pc}
 8003584:	00b3      	lsls	r3, r6, #2
 8003586:	58eb      	ldr	r3, [r5, r3]
 8003588:	4798      	blx	r3
 800358a:	3601      	adds	r6, #1
 800358c:	e7ee      	b.n	800356c <__libc_init_array+0xc>
 800358e:	00b3      	lsls	r3, r6, #2
 8003590:	58eb      	ldr	r3, [r5, r3]
 8003592:	4798      	blx	r3
 8003594:	3601      	adds	r6, #1
 8003596:	e7f2      	b.n	800357e <__libc_init_array+0x1e>
 8003598:	08003674 	.word	0x08003674
 800359c:	08003674 	.word	0x08003674
 80035a0:	08003674 	.word	0x08003674
 80035a4:	08003678 	.word	0x08003678

080035a8 <memset>:
 80035a8:	0003      	movs	r3, r0
 80035aa:	1882      	adds	r2, r0, r2
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d100      	bne.n	80035b2 <memset+0xa>
 80035b0:	4770      	bx	lr
 80035b2:	7019      	strb	r1, [r3, #0]
 80035b4:	3301      	adds	r3, #1
 80035b6:	e7f9      	b.n	80035ac <memset+0x4>

080035b8 <_init>:
 80035b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035be:	bc08      	pop	{r3}
 80035c0:	469e      	mov	lr, r3
 80035c2:	4770      	bx	lr

080035c4 <_fini>:
 80035c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ca:	bc08      	pop	{r3}
 80035cc:	469e      	mov	lr, r3
 80035ce:	4770      	bx	lr
